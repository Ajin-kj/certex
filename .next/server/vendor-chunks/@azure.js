"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@azure";
exports.ids = ["vendor-chunks/@azure"];
exports.modules = {

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicClientApplication: () => (/* binding */ PublicClientApplication),\n/* harmony export */   createNestablePublicClientApplication: () => (/* binding */ createNestablePublicClientApplication),\n/* harmony export */   createStandardPublicClientApplication: () => (/* binding */ createStandardPublicClientApplication)\n/* harmony export */ });\n/* harmony import */ var _controllers_ControllerFactory_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controllers/ControllerFactory.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs\");\n/* harmony import */ var _controllers_StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers/StandardController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs\");\n/* harmony import */ var _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operatingcontext/StandardOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs\");\n/* harmony import */ var _controllers_NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../controllers/NestedAppAuthController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs\");\n/* harmony import */ var _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operatingcontext/NestedAppOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */ class PublicClientApplication {\n    /**\r\n     * Creates StandardController and passes it to the PublicClientApplication\r\n     *\r\n     * @param configuration {Configuration}\r\n     */ static async createPublicClientApplication(configuration) {\n        const controller = await (0,_controllers_ControllerFactory_mjs__WEBPACK_IMPORTED_MODULE_0__.createV3Controller)(configuration);\n        const pca = new PublicClientApplication(configuration, controller);\n        return pca;\n    }\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration Object for the MSAL PublicClientApplication instance\r\n     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)\r\n     */ constructor(configuration, controller){\n        this.controller = controller || new _controllers_StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__.StandardController(new _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__.StandardOperatingContext(configuration));\n    }\n    /**\r\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\r\n     * @param request {?InitializeApplicationRequest}\r\n     */ async initialize(request) {\n        return this.controller.initialize(request);\n    }\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async acquireTokenPopup(request) {\n        return this.controller.acquireTokenPopup(request);\n    }\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\r\n     * the page, so any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ acquireTokenRedirect(request) {\n        return this.controller.acquireTokenRedirect(request);\n    }\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object\r\n     */ acquireTokenSilent(silentRequest) {\n        return this.controller.acquireTokenSilent(silentRequest);\n    }\n    /**\r\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\r\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\r\n     * This API is not indended for normal authorization code acquisition and redemption.\r\n     *\r\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\r\n     *\r\n     * @param request {@link AuthorizationCodeRequest}\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ acquireTokenByCode(request) {\n        return this.controller.acquireTokenByCode(request);\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     * @param eventTypes\r\n     */ addEventCallback(callback, eventTypes) {\n        return this.controller.addEventCallback(callback, eventTypes);\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        return this.controller.removeEventCallback(callbackId);\n    }\n    /**\r\n     * Registers a callback to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */ addPerformanceCallback(callback) {\n        return this.controller.addPerformanceCallback(callback);\n    }\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */ removePerformanceCallback(callbackId) {\n        return this.controller.removePerformanceCallback(callbackId);\n    }\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ enableAccountStorageEvents() {\n        this.controller.enableAccountStorageEvents();\n    }\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ disableAccountStorageEvents() {\n        this.controller.disableAccountStorageEvents();\n    }\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */ getAccount(accountFilter) {\n        return this.controller.getAccount(accountFilter);\n    }\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */ getAccountByHomeId(homeAccountId) {\n        return this.controller.getAccountByHomeId(homeAccountId);\n    }\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */ getAccountByLocalId(localId) {\n        return this.controller.getAccountByLocalId(localId);\n    }\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param userName\r\n     * @returns The account object stored in MSAL\r\n     * @deprecated - Use getAccount instead\r\n     */ getAccountByUsername(userName) {\n        return this.controller.getAccountByUsername(userName);\n    }\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return this.controller.getAllAccounts(accountFilter);\n    }\n    /**\r\n     * Event handler function which allows users to fire events after the PublicClientApplication object\r\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\r\n     * auth flows.\r\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\r\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\r\n     */ handleRedirectPromise(hash) {\n        return this.controller.handleRedirectPromise(hash);\n    }\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ loginPopup(request) {\n        return this.controller.loginPopup(request);\n    }\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ loginRedirect(request) {\n        return this.controller.loginRedirect(request);\n    }\n    /**\r\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\r\n     * @param logoutRequest\r\n     * @deprecated\r\n     */ logout(logoutRequest) {\n        return this.controller.logout(logoutRequest);\n    }\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */ logoutRedirect(logoutRequest) {\n        return this.controller.logoutRedirect(logoutRequest);\n    }\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */ logoutPopup(logoutRequest) {\n        return this.controller.logoutPopup(logoutRequest);\n    }\n    /**\r\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\r\n     * - Any browser using a form of Intelligent Tracking Prevention\r\n     * - If there is not an established session with the service\r\n     *\r\n     * In these cases, the request must be done inside a popup or full frame redirect.\r\n     *\r\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\r\n     *\r\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\r\n     * you session on the server still exists.\r\n     * @param request {@link SsoSilentRequest}\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ ssoSilent(request) {\n        return this.controller.ssoSilent(request);\n    }\n    /**\r\n     * Gets the token cache for the application.\r\n     */ getTokenCache() {\n        return this.controller.getTokenCache();\n    }\n    /**\r\n     * Returns the logger instance\r\n     */ getLogger() {\n        return this.controller.getLogger();\n    }\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */ setLogger(logger) {\n        this.controller.setLogger(logger);\n    }\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        this.controller.setActiveAccount(account);\n    }\n    /**\r\n     * Gets the currently active account\r\n     */ getActiveAccount() {\n        return this.controller.getActiveAccount();\n    }\n    /**\r\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\r\n     * @param sku\r\n     * @param version\r\n     */ initializeWrapperLibrary(sku, version) {\n        return this.controller.initializeWrapperLibrary(sku, version);\n    }\n    /**\r\n     * Sets navigation client\r\n     * @param navigationClient\r\n     */ setNavigationClient(navigationClient) {\n        this.controller.setNavigationClient(navigationClient);\n    }\n    /**\r\n     * Returns the configuration object\r\n     * @internal\r\n     */ getConfiguration() {\n        return this.controller.getConfiguration();\n    }\n    /**\r\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\r\n     * @param result\r\n     * @param request - The request object that was used to obtain the AuthenticationResult\r\n     * @returns\r\n     */ async hydrateCache(result, request) {\n        return this.controller.hydrateCache(result, request);\n    }\n    /**\r\n     * Clears tokens and account from the browser cache.\r\n     * @param logoutRequest\r\n     */ clearCache(logoutRequest) {\n        return this.controller.clearCache(logoutRequest);\n    }\n}\n/**\r\n * creates NestedAppAuthController and passes it to the PublicClientApplication,\r\n * falls back to StandardController if NestedAppAuthController is not available\r\n *\r\n * @param configuration\r\n * @returns IPublicClientApplication\r\n *\r\n */ async function createNestablePublicClientApplication(configuration) {\n    const nestedAppAuth = new _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_3__.NestedAppOperatingContext(configuration);\n    await nestedAppAuth.initialize();\n    if (nestedAppAuth.isAvailable()) {\n        const controller = new _controllers_NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_4__.NestedAppAuthController(nestedAppAuth);\n        return new PublicClientApplication(configuration, controller);\n    }\n    return createStandardPublicClientApplication(configuration);\n}\n/**\r\n * creates PublicClientApplication using StandardController\r\n *\r\n * @param configuration\r\n * @returns IPublicClientApplication\r\n *\r\n */ async function createStandardPublicClientApplication(configuration) {\n    const pca = new PublicClientApplication(configuration);\n    await pca.initialize();\n    return pca;\n}\n //# sourceMappingURL=PublicClientApplication.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/app/PublicClientApplication.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NativeMessageHandler: () => (/* binding */ NativeMessageHandler)\n/* harmony export */ });\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/NativeAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NativeMessageHandler {\n    constructor(logger, handshakeTimeoutMs, performanceClient, extensionId){\n        this.logger = logger;\n        this.handshakeTimeoutMs = handshakeTimeoutMs;\n        this.extensionId = extensionId;\n        this.resolvers = new Map(); // Used for non-handshake messages\n        this.handshakeResolvers = new Map(); // Used for handshake messages\n        this.messageChannel = new MessageChannel();\n        this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound\n        this.performanceClient = performanceClient;\n        this.handshakeEvent = performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.NativeMessageHandlerHandshake);\n    }\n    /**\r\n     * Sends a given message to the extension and resolves with the extension response\r\n     * @param body\r\n     */ async sendMessage(body) {\n        this.logger.trace(\"NativeMessageHandler - sendMessage called.\");\n        const req = {\n            channel: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.createNewGuid)(),\n            body: body\n        };\n        this.logger.trace(\"NativeMessageHandler - Sending request to browser extension\");\n        this.logger.tracePii(`NativeMessageHandler - Sending request to browser extension: ${JSON.stringify(req)}`);\n        this.messageChannel.port1.postMessage(req);\n        return new Promise((resolve, reject)=>{\n            this.resolvers.set(req.responseId, {\n                resolve,\n                reject\n            });\n        });\n    }\n    /**\r\n     * Returns an instance of the MessageHandler that has successfully established a connection with an extension\r\n     * @param {Logger} logger\r\n     * @param {number} handshakeTimeoutMs\r\n     * @param {IPerformanceClient} performanceClient\r\n     * @param {ICrypto} crypto\r\n     */ static async createProvider(logger, handshakeTimeoutMs, performanceClient) {\n        logger.trace(\"NativeMessageHandler - createProvider called.\");\n        try {\n            const preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.PREFERRED_EXTENSION_ID);\n            await preferredProvider.sendHandshakeRequest();\n            return preferredProvider;\n        } catch (e) {\n            // If preferred extension fails for whatever reason, fallback to using any installed extension\n            const backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);\n            await backupProvider.sendHandshakeRequest();\n            return backupProvider;\n        }\n    }\n    /**\r\n     * Send handshake request helper.\r\n     */ async sendHandshakeRequest() {\n        this.logger.trace(\"NativeMessageHandler - sendHandshakeRequest called.\");\n        // Register this event listener before sending handshake\n        window.addEventListener(\"message\", this.windowListener, false); // false is important, because content script message processing should work first\n        const req = {\n            channel: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.CHANNEL_ID,\n            extensionId: this.extensionId,\n            responseId: (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.createNewGuid)(),\n            body: {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.HandshakeRequest\n            }\n        };\n        this.handshakeEvent.add({\n            extensionId: this.extensionId,\n            extensionHandshakeTimeoutMs: this.handshakeTimeoutMs\n        });\n        this.messageChannel.port1.onmessage = (event)=>{\n            this.onChannelMessage(event);\n        };\n        window.postMessage(req, window.origin, [\n            this.messageChannel.port2\n        ]);\n        return new Promise((resolve, reject)=>{\n            this.handshakeResolvers.set(req.responseId, {\n                resolve,\n                reject\n            });\n            this.timeoutId = window.setTimeout(()=>{\n                /*\r\n                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.\r\n                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port\r\n                 */ window.removeEventListener(\"message\", this.windowListener, false);\n                this.messageChannel.port1.close();\n                this.messageChannel.port2.close();\n                this.handshakeEvent.end({\n                    extensionHandshakeTimedOut: true,\n                    success: false\n                });\n                reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.nativeHandshakeTimeout));\n                this.handshakeResolvers.delete(req.responseId);\n            }, this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here\n        });\n    }\n    /**\r\n     * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.\r\n     * @param event\r\n     */ onWindowMessage(event) {\n        this.logger.trace(\"NativeMessageHandler - onWindowMessage called\");\n        // We only accept messages from ourselves\n        if (event.source !== window) {\n            return;\n        }\n        const request = event.data;\n        if (!request.channel || request.channel !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeConstants.CHANNEL_ID) {\n            return;\n        }\n        if (request.extensionId && request.extensionId !== this.extensionId) {\n            return;\n        }\n        if (request.body.method === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.HandshakeRequest) {\n            const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n            /*\r\n             * Filter out responses with no matched resolvers sooner to keep channel ports open while waiting for\r\n             * the proper response.\r\n             */ if (!handshakeResolver) {\n                this.logger.trace(`NativeMessageHandler.onWindowMessage - resolver can't be found for request ${request.responseId}`);\n                return;\n            }\n            // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed\n            this.logger.verbose(request.extensionId ? `Extension with id: ${request.extensionId} not installed` : \"No extension installed\");\n            clearTimeout(this.timeoutId);\n            this.messageChannel.port1.close();\n            this.messageChannel.port2.close();\n            window.removeEventListener(\"message\", this.windowListener, false);\n            this.handshakeEvent.end({\n                success: false,\n                extensionInstalled: false\n            });\n            handshakeResolver.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.nativeExtensionNotInstalled));\n        }\n    }\n    /**\r\n     * Invoked when a message is received from the extension on the MessageChannel port\r\n     * @param event\r\n     */ onChannelMessage(event) {\n        this.logger.trace(\"NativeMessageHandler - onChannelMessage called.\");\n        const request = event.data;\n        const resolver = this.resolvers.get(request.responseId);\n        const handshakeResolver = this.handshakeResolvers.get(request.responseId);\n        try {\n            const method = request.body.method;\n            if (method === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.Response) {\n                if (!resolver) {\n                    return;\n                }\n                const response = request.body.response;\n                this.logger.trace(\"NativeMessageHandler - Received response from browser extension\");\n                this.logger.tracePii(`NativeMessageHandler - Received response from browser extension: ${JSON.stringify(response)}`);\n                if (response.status !== \"Success\") {\n                    resolver.reject((0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createNativeAuthError)(response.code, response.description, response.ext));\n                } else if (response.result) {\n                    if (response.result[\"code\"] && response.result[\"description\"]) {\n                        resolver.reject((0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createNativeAuthError)(response.result[\"code\"], response.result[\"description\"], response.result[\"ext\"]));\n                    } else {\n                        resolver.resolve(response.result);\n                    }\n                } else {\n                    throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.createAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.unexpectedError, \"Event does not contain result.\");\n                }\n                this.resolvers.delete(request.responseId);\n            } else if (method === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.NativeExtensionMethod.HandshakeResponse) {\n                if (!handshakeResolver) {\n                    this.logger.trace(`NativeMessageHandler.onChannelMessage - resolver can't be found for request ${request.responseId}`);\n                    return;\n                }\n                clearTimeout(this.timeoutId); // Clear setTimeout\n                window.removeEventListener(\"message\", this.windowListener, false); // Remove 'No extension' listener\n                this.extensionId = request.extensionId;\n                this.extensionVersion = request.body.version;\n                this.logger.verbose(`NativeMessageHandler - Received HandshakeResponse from extension: ${this.extensionId}`);\n                this.handshakeEvent.end({\n                    extensionInstalled: true,\n                    success: true\n                });\n                handshakeResolver.resolve();\n                this.handshakeResolvers.delete(request.responseId);\n            }\n        // Do nothing if method is not Response or HandshakeResponse\n        } catch (err) {\n            this.logger.error(\"Error parsing response from WAM Extension\");\n            this.logger.errorPii(`Error parsing response from WAM Extension: ${err}`);\n            this.logger.errorPii(`Unable to parse ${event}`);\n            if (resolver) {\n                resolver.reject(err);\n            } else if (handshakeResolver) {\n                handshakeResolver.reject(err);\n            }\n        }\n    }\n    /**\r\n     * Returns the Id for the browser extension this handler is communicating with\r\n     * @returns\r\n     */ getExtensionId() {\n        return this.extensionId;\n    }\n    /**\r\n     * Returns the version for the browser extension this handler is communicating with\r\n     * @returns\r\n     */ getExtensionVersion() {\n        return this.extensionVersion;\n    }\n    /**\r\n     * Returns boolean indicating whether or not the request should attempt to use native broker\r\n     * @param logger\r\n     * @param config\r\n     * @param nativeExtensionProvider\r\n     * @param authenticationScheme\r\n     */ static isNativeAvailable(config, logger, nativeExtensionProvider, authenticationScheme) {\n        logger.trace(\"isNativeAvailable called\");\n        if (!config.system.allowNativeBroker) {\n            logger.trace(\"isNativeAvailable: allowNativeBroker is not enabled, returning false\");\n            // Developer disabled WAM\n            return false;\n        }\n        if (!nativeExtensionProvider) {\n            logger.trace(\"isNativeAvailable: WAM extension provider is not initialized, returning false\");\n            // Extension is not available\n            return false;\n        }\n        if (authenticationScheme) {\n            switch(authenticationScheme){\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.POP:\n                    logger.trace(\"isNativeAvailable: authenticationScheme is supported, returning true\");\n                    return true;\n                default:\n                    logger.trace(\"isNativeAvailable: authenticationScheme is not supported, returning false\");\n                    return false;\n            }\n        }\n        return true;\n    }\n}\n //# sourceMappingURL=NativeMessageHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_UNAVAILABLE: () => (/* binding */ ACCOUNT_UNAVAILABLE),\n/* harmony export */   DISABLED: () => (/* binding */ DISABLED),\n/* harmony export */   NO_NETWORK: () => (/* binding */ NO_NETWORK),\n/* harmony export */   PERSISTENT_ERROR: () => (/* binding */ PERSISTENT_ERROR),\n/* harmony export */   USER_CANCEL: () => (/* binding */ USER_CANCEL),\n/* harmony export */   USER_INTERACTION_REQUIRED: () => (/* binding */ USER_INTERACTION_REQUIRED)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Status Codes that can be thrown by WAM\nconst USER_INTERACTION_REQUIRED = \"USER_INTERACTION_REQUIRED\";\nconst USER_CANCEL = \"USER_CANCEL\";\nconst NO_NETWORK = \"NO_NETWORK\";\nconst PERSISTENT_ERROR = \"PERSISTENT_ERROR\";\nconst DISABLED = \"DISABLED\";\nconst ACCOUNT_UNAVAILABLE = \"ACCOUNT_UNAVAILABLE\";\n //# sourceMappingURL=NativeStatusCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Jyb2tlci9uYXRpdmVCcm9rZXIvTmF0aXZlU3RhdHVzQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELHlDQUF5QztBQUN6QyxNQUFNQSw0QkFBNEI7QUFDbEMsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLG1CQUFtQjtBQUN6QixNQUFNQyxXQUFXO0FBQ2pCLE1BQU1DLHNCQUFzQjtBQUVtRixDQUMvRyw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Jyb2tlci9uYXRpdmVCcm9rZXIvTmF0aXZlU3RhdHVzQ29kZXMubWpzPzYyYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLy8gU3RhdHVzIENvZGVzIHRoYXQgY2FuIGJlIHRocm93biBieSBXQU1cclxuY29uc3QgVVNFUl9JTlRFUkFDVElPTl9SRVFVSVJFRCA9IFwiVVNFUl9JTlRFUkFDVElPTl9SRVFVSVJFRFwiO1xyXG5jb25zdCBVU0VSX0NBTkNFTCA9IFwiVVNFUl9DQU5DRUxcIjtcclxuY29uc3QgTk9fTkVUV09SSyA9IFwiTk9fTkVUV09SS1wiO1xyXG5jb25zdCBQRVJTSVNURU5UX0VSUk9SID0gXCJQRVJTSVNURU5UX0VSUk9SXCI7XHJcbmNvbnN0IERJU0FCTEVEID0gXCJESVNBQkxFRFwiO1xyXG5jb25zdCBBQ0NPVU5UX1VOQVZBSUxBQkxFID0gXCJBQ0NPVU5UX1VOQVZBSUxBQkxFXCI7XG5cbmV4cG9ydCB7IEFDQ09VTlRfVU5BVkFJTEFCTEUsIERJU0FCTEVELCBOT19ORVRXT1JLLCBQRVJTSVNURU5UX0VSUk9SLCBVU0VSX0NBTkNFTCwgVVNFUl9JTlRFUkFDVElPTl9SRVFVSVJFRCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmF0aXZlU3RhdHVzQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlVTRVJfSU5URVJBQ1RJT05fUkVRVUlSRUQiLCJVU0VSX0NBTkNFTCIsIk5PX05FVFdPUksiLCJQRVJTSVNURU5UX0VSUk9SIiwiRElTQUJMRUQiLCJBQ0NPVU5UX1VOQVZBSUxBQkxFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAccount: () => (/* binding */ getAccount),\n/* harmony export */   getAccountByHomeId: () => (/* binding */ getAccountByHomeId),\n/* harmony export */   getAccountByLocalId: () => (/* binding */ getAccountByLocalId),\n/* harmony export */   getAccountByUsername: () => (/* binding */ getAccountByUsername),\n/* harmony export */   getActiveAccount: () => (/* binding */ getActiveAccount),\n/* harmony export */   getAllAccounts: () => (/* binding */ getAllAccounts),\n/* harmony export */   setActiveAccount: () => (/* binding */ setActiveAccount)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n * @returns Array of AccountInfo objects in cache\r\n */ function getAllAccounts(logger, browserStorage, isInBrowser, accountFilter) {\n    logger.verbose(\"getAllAccounts called\");\n    return isInBrowser ? browserStorage.getAllAccounts(accountFilter) : [];\n}\n/**\r\n * Returns the first account found in the cache that matches the account filter passed in.\r\n * @param accountFilter\r\n * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n */ function getAccount(accountFilter, logger, browserStorage) {\n    logger.trace(\"getAccount called\");\n    if (Object.keys(accountFilter).length === 0) {\n        logger.warning(\"getAccount: No accountFilter provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy(accountFilter);\n    if (account) {\n        logger.verbose(\"getAccount: Account matching provided filter found, returning\");\n        return account;\n    } else {\n        logger.verbose(\"getAccount: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Returns the signed in account matching username.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found.\r\n * This API is provided for convenience but getAccountById should be used for best reliability\r\n * @param username\r\n * @returns The account object stored in MSAL\r\n */ function getAccountByUsername(username, logger, browserStorage) {\n    logger.trace(\"getAccountByUsername called\");\n    if (!username) {\n        logger.warning(\"getAccountByUsername: No username provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy({\n        username\n    });\n    if (account) {\n        logger.verbose(\"getAccountByUsername: Account matching username found, returning\");\n        logger.verbosePii(`getAccountByUsername: Returning signed-in accounts matching username: ${username}`);\n        return account;\n    } else {\n        logger.verbose(\"getAccountByUsername: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Returns the signed in account matching homeAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param homeAccountId\r\n * @returns The account object stored in MSAL\r\n */ function getAccountByHomeId(homeAccountId, logger, browserStorage) {\n    logger.trace(\"getAccountByHomeId called\");\n    if (!homeAccountId) {\n        logger.warning(\"getAccountByHomeId: No homeAccountId provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy({\n        homeAccountId\n    });\n    if (account) {\n        logger.verbose(\"getAccountByHomeId: Account matching homeAccountId found, returning\");\n        logger.verbosePii(`getAccountByHomeId: Returning signed-in accounts matching homeAccountId: ${homeAccountId}`);\n        return account;\n    } else {\n        logger.verbose(\"getAccountByHomeId: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Returns the signed in account matching localAccountId.\r\n * (the account object is created at the time of successful login)\r\n * or null when no matching account is found\r\n * @param localAccountId\r\n * @returns The account object stored in MSAL\r\n */ function getAccountByLocalId(localAccountId, logger, browserStorage) {\n    logger.trace(\"getAccountByLocalId called\");\n    if (!localAccountId) {\n        logger.warning(\"getAccountByLocalId: No localAccountId provided\");\n        return null;\n    }\n    const account = browserStorage.getAccountInfoFilteredBy({\n        localAccountId\n    });\n    if (account) {\n        logger.verbose(\"getAccountByLocalId: Account matching localAccountId found, returning\");\n        logger.verbosePii(`getAccountByLocalId: Returning signed-in accounts matching localAccountId: ${localAccountId}`);\n        return account;\n    } else {\n        logger.verbose(\"getAccountByLocalId: No matching account found, returning null\");\n        return null;\n    }\n}\n/**\r\n * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n * @param account\r\n */ function setActiveAccount(account, browserStorage) {\n    browserStorage.setActiveAccount(account);\n}\n/**\r\n * Gets the currently active account\r\n */ function getActiveAccount(browserStorage) {\n    return browserStorage.getActiveAccount();\n}\n //# sourceMappingURL=AccountManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncMemoryStorage: () => (/* binding */ AsyncMemoryStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _DatabaseStorage_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DatabaseStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs\");\n/* harmony import */ var _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MemoryStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,\r\n * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.\r\n */ class AsyncMemoryStorage {\n    constructor(logger){\n        this.inMemoryCache = new _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_0__.MemoryStorage();\n        this.indexedDBCache = new _DatabaseStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.DatabaseStorage();\n        this.logger = logger;\n    }\n    handleDatabaseAccessError(error) {\n        if (error instanceof _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserAuthError && error.errorCode === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.databaseUnavailable) {\n            this.logger.error(\"Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.\");\n        } else {\n            throw error;\n        }\n    }\n    /**\r\n     * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous\r\n     * storage object if item isn't found in-memory.\r\n     * @param key\r\n     */ async getItem(key) {\n        const item = this.inMemoryCache.getItem(key);\n        if (!item) {\n            try {\n                this.logger.verbose(\"Queried item not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.getItem(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return item;\n    }\n    /**\r\n     * Sets the item in the in-memory cache and then tries to set it in the asynchronous\r\n     * storage object with the given key.\r\n     * @param key\r\n     * @param value\r\n     */ async setItem(key, value) {\n        this.inMemoryCache.setItem(key, value);\n        try {\n            await this.indexedDBCache.setItem(key, value);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n    /**\r\n     * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.\r\n     * @param key\r\n     */ async removeItem(key) {\n        this.inMemoryCache.removeItem(key);\n        try {\n            await this.indexedDBCache.removeItem(key);\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n        }\n    }\n    /**\r\n     * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the\r\n     * asynchronous storage object.\r\n     */ async getKeys() {\n        const cacheKeys = this.inMemoryCache.getKeys();\n        if (cacheKeys.length === 0) {\n            try {\n                this.logger.verbose(\"In-memory cache is empty, now querying persistent storage.\");\n                return await this.indexedDBCache.getKeys();\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return cacheKeys;\n    }\n    /**\r\n     * Returns true or false if the given key is present in the cache.\r\n     * @param key\r\n     */ async containsKey(key) {\n        const containsKey = this.inMemoryCache.containsKey(key);\n        if (!containsKey) {\n            try {\n                this.logger.verbose(\"Key not found in in-memory cache, now querying persistent storage.\");\n                return await this.indexedDBCache.containsKey(key);\n            } catch (e) {\n                this.handleDatabaseAccessError(e);\n            }\n        }\n        return containsKey;\n    }\n    /**\r\n     * Clears in-memory Map\r\n     */ clearInMemory() {\n        // InMemory cache is a Map instance, clear is straightforward\n        this.logger.verbose(`Deleting in-memory keystore`);\n        this.inMemoryCache.clear();\n        this.logger.verbose(`In-memory keystore deleted`);\n    }\n    /**\r\n     * Tries to delete the IndexedDB database\r\n     * @returns\r\n     */ async clearPersistent() {\n        try {\n            this.logger.verbose(\"Deleting persistent keystore\");\n            const dbDeleted = await this.indexedDBCache.deleteDatabase();\n            if (dbDeleted) {\n                this.logger.verbose(\"Persistent keystore deleted\");\n            }\n            return dbDeleted;\n        } catch (e) {\n            this.handleDatabaseAccessError(e);\n            return false;\n        }\n    }\n}\n //# sourceMappingURL=AsyncMemoryStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserCacheManager: () => (/* binding */ BrowserCacheManager),\n/* harmony export */   DEFAULT_BROWSER_CACHE_MANAGER: () => (/* binding */ DEFAULT_BROWSER_CACHE_MANAGER)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _LocalStorage_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LocalStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs\");\n/* harmony import */ var _SessionStorage_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SessionStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs\");\n/* harmony import */ var _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MemoryStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs\");\n/* harmony import */ var _utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/BrowserProtocolUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _CookieStorage_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CookieStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */ class BrowserCacheManager extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.CacheManager {\n    constructor(clientId, cacheConfig, cryptoImpl, logger, staticAuthorityOptions, performanceClient){\n        super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n        this.cacheConfig = cacheConfig;\n        this.logger = logger;\n        this.internalStorage = new _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage();\n        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\n        this.temporaryCacheStorage = this.setupBrowserStorage(this.cacheConfig.temporaryCacheLocation);\n        this.cookieStorage = new _CookieStorage_mjs__WEBPACK_IMPORTED_MODULE_2__.CookieStorage();\n        // Migrate cache entries from older versions of MSAL.\n        if (cacheConfig.cacheMigrationEnabled) {\n            this.migrateCacheEntries();\n            this.createKeyMaps();\n        }\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n     * @param cacheLocation\r\n     */ setupBrowserStorage(cacheLocation) {\n        try {\n            switch(cacheLocation){\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.LocalStorage:\n                    return new _LocalStorage_mjs__WEBPACK_IMPORTED_MODULE_4__.LocalStorage();\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.SessionStorage:\n                    return new _SessionStorage_mjs__WEBPACK_IMPORTED_MODULE_5__.SessionStorage();\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage:\n                default:\n                    break;\n            }\n        } catch (e) {\n            this.logger.error(e);\n        }\n        this.cacheConfig.cacheLocation = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage;\n        return new _MemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.MemoryStorage();\n    }\n    /**\r\n     * Migrate all old cache entries to new schema. No rollback supported.\r\n     * @param storeAuthStateInCookie\r\n     */ migrateCacheEntries() {\n        const idTokenKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN}`;\n        const clientInfoKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.CLIENT_INFO}`;\n        const errorKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR}`;\n        const errorDescKey = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR_DESC}`;\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n        const errorValue = this.browserStorage.getItem(errorKey);\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\n        const values = [\n            idTokenValue,\n            clientInfoValue,\n            errorValue,\n            errorDescValue\n        ];\n        const keysToMigrate = [\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN,\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.CLIENT_INFO,\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR,\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ERROR_DESC\n        ];\n        keysToMigrate.forEach((cacheKey, index)=>{\n            const value = values[index];\n            if (value) {\n                this.setTemporaryCache(cacheKey, value, true);\n            }\n        });\n    }\n    /**\r\n     * Searches all cache entries for MSAL accounts and creates the account key map\r\n     * This is used to migrate users from older versions of MSAL which did not create the map.\r\n     * @returns\r\n     */ createKeyMaps() {\n        this.logger.trace(\"BrowserCacheManager - createKeyMaps called.\");\n        const accountKeys = this.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS);\n        const tokenKeys = this.getItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n        if (accountKeys && tokenKeys) {\n            this.logger.verbose(\"BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.\");\n            // Key maps already exist, no need to iterate through cache\n            return;\n        }\n        const allKeys = this.browserStorage.getKeys();\n        allKeys.forEach((key)=>{\n            if (this.isCredentialKey(key)) {\n                // Get item, parse, validate and write key to map\n                const value = this.getItem(key);\n                if (value) {\n                    const credObj = this.validateAndParseJson(value);\n                    if (credObj && credObj.hasOwnProperty(\"credentialType\")) {\n                        switch(credObj[\"credentialType\"]){\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN:\n                                if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isIdTokenEntity(credObj)) {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - idToken with key: ${key} found, saving key to token key map`);\n                                    const idTokenEntity = credObj;\n                                    const newKey = this.updateCredentialCacheKey(key, idTokenEntity);\n                                    this.addTokenKey(newKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n                                    return;\n                                } else {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed idToken validation on key: ${key}`);\n                                }\n                                break;\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n                                if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAccessTokenEntity(credObj)) {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - accessToken with key: ${key} found, saving key to token key map`);\n                                    const accessTokenEntity = credObj;\n                                    const newKey = this.updateCredentialCacheKey(key, accessTokenEntity);\n                                    this.addTokenKey(newKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n                                    return;\n                                } else {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed accessToken validation on key: ${key}`);\n                                }\n                                break;\n                            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN:\n                                if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isRefreshTokenEntity(credObj)) {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - refreshToken with key: ${key} found, saving key to token key map`);\n                                    const refreshTokenEntity = credObj;\n                                    const newKey = this.updateCredentialCacheKey(key, refreshTokenEntity);\n                                    this.addTokenKey(newKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n                                    return;\n                                } else {\n                                    this.logger.trace(\"BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.\");\n                                    this.logger.tracePii(`BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: ${key}`);\n                                }\n                                break;\n                        }\n                    }\n                }\n            }\n            if (this.isAccountKey(key)) {\n                const value = this.getItem(key);\n                if (value) {\n                    const accountObj = this.validateAndParseJson(value);\n                    if (accountObj && _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.isAccountEntity(accountObj)) {\n                        this.logger.trace(\"BrowserCacheManager:createKeyMaps - account found, saving key to account key map\");\n                        this.logger.tracePii(`BrowserCacheManager:createKeyMaps - account with key: ${key} found, saving key to account key map`);\n                        this.addAccountKeyToMap(key);\n                    }\n                }\n            }\n        });\n    }\n    /**\r\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n     * @param input\r\n     */ validateAndParseJson(jsonValue) {\n        try {\n            const parsedJson = JSON.parse(jsonValue);\n            /**\r\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n             *\r\n             */ return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n        } catch (error) {\n            return null;\n        }\n    }\n    /**\r\n     * fetches the entry from the browser storage based off the key\r\n     * @param key\r\n     */ getItem(key) {\n        return this.browserStorage.getItem(key);\n    }\n    /**\r\n     * sets the entry in the browser storage\r\n     * @param key\r\n     * @param value\r\n     */ setItem(key, value) {\n        this.browserStorage.setItem(key, value);\n    }\n    /**\r\n     * fetch the account entity from the platform cache\r\n     * @param accountKey\r\n     */ getAccount(accountKey, logger) {\n        this.logger.trace(\"BrowserCacheManager.getAccount called\");\n        const accountEntity = this.getCachedAccountEntity(accountKey);\n        return this.updateOutdatedCachedAccount(accountKey, accountEntity, logger);\n    }\n    /**\r\n     * Reads account from cache, deserializes it into an account entity and returns it.\r\n     * If account is not found from the key, returns null and removes key from map.\r\n     * @param accountKey\r\n     * @returns\r\n     */ getCachedAccountEntity(accountKey) {\n        const serializedAccount = this.getItem(accountKey);\n        if (!serializedAccount) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n        const parsedAccount = this.validateAndParseJson(serializedAccount);\n        if (!parsedAccount || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AccountEntity.isAccountEntity(parsedAccount)) {\n            this.removeAccountKeyFromMap(accountKey);\n            return null;\n        }\n        return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.CacheManager.toObject(new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AccountEntity(), parsedAccount);\n    }\n    /**\r\n     * set account entity in the platform cache\r\n     * @param account\r\n     */ setAccount(account) {\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\n        const key = account.generateAccountKey();\n        this.setItem(key, JSON.stringify(account));\n        this.addAccountKeyToMap(key);\n    }\n    /**\r\n     * Returns the array of account keys currently cached\r\n     * @returns\r\n     */ getAccountKeys() {\n        this.logger.trace(\"BrowserCacheManager.getAccountKeys called\");\n        const accountKeys = this.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS);\n        if (accountKeys) {\n            return JSON.parse(accountKeys);\n        }\n        this.logger.verbose(\"BrowserCacheManager.getAccountKeys - No account keys found\");\n        return [];\n    }\n    /**\r\n     * Add a new account to the key map\r\n     * @param key\r\n     */ addAccountKeyToMap(key) {\n        this.logger.trace(\"BrowserCacheManager.addAccountKeyToMap called\");\n        this.logger.tracePii(`BrowserCacheManager.addAccountKeyToMap called with key: ${key}`);\n        const accountKeys = this.getAccountKeys();\n        if (accountKeys.indexOf(key) === -1) {\n            // Only add key if it does not already exist in the map\n            accountKeys.push(key);\n            this.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key added\");\n        } else {\n            this.logger.verbose(\"BrowserCacheManager.addAccountKeyToMap account key already exists in map\");\n        }\n    }\n    /**\r\n     * Remove an account from the key map\r\n     * @param key\r\n     */ removeAccountKeyFromMap(key) {\n        this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap called\");\n        this.logger.tracePii(`BrowserCacheManager.removeAccountKeyFromMap called with key: ${key}`);\n        const accountKeys = this.getAccountKeys();\n        const removalIndex = accountKeys.indexOf(key);\n        if (removalIndex > -1) {\n            accountKeys.splice(removalIndex, 1);\n            this.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap account key removed\");\n        } else {\n            this.logger.trace(\"BrowserCacheManager.removeAccountKeyFromMap key not found in existing map\");\n        }\n    }\n    /**\r\n     * Extends inherited removeAccount function to include removal of the account key from the map\r\n     * @param key\r\n     */ async removeAccount(key) {\n        void super.removeAccount(key);\n        this.removeAccountKeyFromMap(key);\n    }\n    /**\r\n     * Remove account entity from the platform cache if it's outdated\r\n     * @param accountKey\r\n     */ removeOutdatedAccount(accountKey) {\n        this.removeItem(accountKey);\n        this.removeAccountKeyFromMap(accountKey);\n    }\n    /**\r\n     * Removes given idToken from the cache and from the key map\r\n     * @param key\r\n     */ removeIdToken(key) {\n        super.removeIdToken(key);\n        this.removeTokenKey(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n    }\n    /**\r\n     * Removes given accessToken from the cache and from the key map\r\n     * @param key\r\n     */ async removeAccessToken(key) {\n        void super.removeAccessToken(key);\n        this.removeTokenKey(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n    }\n    /**\r\n     * Removes given refreshToken from the cache and from the key map\r\n     * @param key\r\n     */ removeRefreshToken(key) {\n        super.removeRefreshToken(key);\n        this.removeTokenKey(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n    }\n    /**\r\n     * Gets the keys for the cached tokens associated with this clientId\r\n     * @returns\r\n     */ getTokenKeys() {\n        this.logger.trace(\"BrowserCacheManager.getTokenKeys called\");\n        const item = this.getItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`);\n        if (item) {\n            const tokenKeys = this.validateAndParseJson(item);\n            if (tokenKeys && tokenKeys.hasOwnProperty(\"idToken\") && tokenKeys.hasOwnProperty(\"accessToken\") && tokenKeys.hasOwnProperty(\"refreshToken\")) {\n                return tokenKeys;\n            } else {\n                this.logger.error(\"BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.\");\n            }\n        } else {\n            this.logger.verbose(\"BrowserCacheManager.getTokenKeys - No token keys found\");\n        }\n        return {\n            idToken: [],\n            accessToken: [],\n            refreshToken: []\n        };\n    }\n    /**\r\n     * Adds the given key to the token key map\r\n     * @param key\r\n     * @param type\r\n     */ addTokenKey(key, type) {\n        this.logger.trace(\"BrowserCacheManager addTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n        switch(type){\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN:\n                if (tokenKeys.idToken.indexOf(key) === -1) {\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - idToken added to map\");\n                    tokenKeys.idToken.push(key);\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:\n                if (tokenKeys.accessToken.indexOf(key) === -1) {\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - accessToken added to map\");\n                    tokenKeys.accessToken.push(key);\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN:\n                if (tokenKeys.refreshToken.indexOf(key) === -1) {\n                    this.logger.info(\"BrowserCacheManager: addTokenKey - refreshToken added to map\");\n                    tokenKeys.refreshToken.push(key);\n                }\n                break;\n            default:\n                this.logger.error(`BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.unexpectedCredentialType);\n        }\n        this.setItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n    }\n    /**\r\n     * Removes the given key from the token key map\r\n     * @param key\r\n     * @param type\r\n     */ removeTokenKey(key, type) {\n        this.logger.trace(\"BrowserCacheManager removeTokenKey called\");\n        const tokenKeys = this.getTokenKeys();\n        switch(type){\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN:\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: ${key} from map`);\n                const idRemoval = tokenKeys.idToken.indexOf(key);\n                if (idRemoval > -1) {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken removed from map\");\n                    tokenKeys.idToken.splice(idRemoval, 1);\n                } else {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.\");\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN:\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: ${key} from map`);\n                const accessRemoval = tokenKeys.accessToken.indexOf(key);\n                if (accessRemoval > -1) {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken removed from map\");\n                    tokenKeys.accessToken.splice(accessRemoval, 1);\n                } else {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.\");\n                }\n                break;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN:\n                this.logger.infoPii(`BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: ${key} from map`);\n                const refreshRemoval = tokenKeys.refreshToken.indexOf(key);\n                if (refreshRemoval > -1) {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken removed from map\");\n                    tokenKeys.refreshToken.splice(refreshRemoval, 1);\n                } else {\n                    this.logger.info(\"BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.\");\n                }\n                break;\n            default:\n                this.logger.error(`BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: ${type}`);\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.unexpectedCredentialType);\n        }\n        this.setItem(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.StaticCacheKeys.TOKEN_KEYS}.${this.clientId}`, JSON.stringify(tokenKeys));\n    }\n    /**\r\n     * generates idToken entity from a string\r\n     * @param idTokenKey\r\n     */ getIdTokenCredential(idTokenKey) {\n        const value = this.getItem(idTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            this.removeTokenKey(idTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n            return null;\n        }\n        const parsedIdToken = this.validateAndParseJson(value);\n        if (!parsedIdToken || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isIdTokenEntity(parsedIdToken)) {\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n            this.removeTokenKey(idTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n        return parsedIdToken;\n    }\n    /**\r\n     * set IdToken credential to the platform cache\r\n     * @param idToken\r\n     */ setIdTokenCredential(idToken) {\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n        const idTokenKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(idToken);\n        this.setItem(idTokenKey, JSON.stringify(idToken));\n        this.addTokenKey(idTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ID_TOKEN);\n    }\n    /**\r\n     * generates accessToken entity from a string\r\n     * @param key\r\n     */ getAccessTokenCredential(accessTokenKey) {\n        const value = this.getItem(accessTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            this.removeTokenKey(accessTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        const parsedAccessToken = this.validateAndParseJson(value);\n        if (!parsedAccessToken || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAccessTokenEntity(parsedAccessToken)) {\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n            this.removeTokenKey(accessTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n        return parsedAccessToken;\n    }\n    /**\r\n     * set accessToken credential to the platform cache\r\n     * @param accessToken\r\n     */ setAccessTokenCredential(accessToken) {\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n        const accessTokenKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(accessToken);\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\n        this.addTokenKey(accessTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.ACCESS_TOKEN);\n    }\n    /**\r\n     * generates refreshToken entity from a string\r\n     * @param refreshTokenKey\r\n     */ getRefreshTokenCredential(refreshTokenKey) {\n        const value = this.getItem(refreshTokenKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            this.removeTokenKey(refreshTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        const parsedRefreshToken = this.validateAndParseJson(value);\n        if (!parsedRefreshToken || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isRefreshTokenEntity(parsedRefreshToken)) {\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n            this.removeTokenKey(refreshTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n        return parsedRefreshToken;\n    }\n    /**\r\n     * set refreshToken credential to the platform cache\r\n     * @param refreshToken\r\n     */ setRefreshTokenCredential(refreshToken) {\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n        const refreshTokenKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(refreshToken);\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n        this.addTokenKey(refreshTokenKey, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.CredentialType.REFRESH_TOKEN);\n    }\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */ getAppMetadata(appMetadataKey) {\n        const value = this.getItem(appMetadataKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (!parsedMetadata || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n        return parsedMetadata;\n    }\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */ setAppMetadata(appMetadata) {\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n        const appMetadataKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateAppMetadataKey(appMetadata);\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n    }\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */ getServerTelemetry(serverTelemetryKey) {\n        const value = this.getItem(serverTelemetryKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n        const parsedEntity = this.validateAndParseJson(value);\n        if (!parsedEntity || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isServerTelemetryEntity(serverTelemetryKey, parsedEntity)) {\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n        return parsedEntity;\n    }\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */ setServerTelemetry(serverTelemetryKey, serverTelemetry) {\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n    }\n    /**\r\n     *\r\n     */ getAuthorityMetadata(key) {\n        const value = this.internalStorage.getItem(key);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n            return null;\n        }\n        const parsedMetadata = this.validateAndParseJson(value);\n        if (parsedMetadata && _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isAuthorityMetadataEntity(key, parsedMetadata)) {\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n            return parsedMetadata;\n        }\n        return null;\n    }\n    /**\r\n     *\r\n     */ getAuthorityMetadataKeys() {\n        const allKeys = this.internalStorage.getKeys();\n        return allKeys.filter((key)=>{\n            return this.isAuthorityMetadata(key);\n        });\n    }\n    /**\r\n     * Sets wrapper metadata in memory\r\n     * @param wrapperSKU\r\n     * @param wrapperVersion\r\n     */ setWrapperMetadata(wrapperSKU, wrapperVersion) {\n        this.internalStorage.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);\n        this.internalStorage.setItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);\n    }\n    /**\r\n     * Returns wrapper metadata from in-memory storage\r\n     */ getWrapperMetadata() {\n        const sku = this.internalStorage.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_SKU) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING;\n        const version = this.internalStorage.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InMemoryCacheKeys.WRAPPER_VER) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING;\n        return [\n            sku,\n            version\n        ];\n    }\n    /**\r\n     *\r\n     * @param entity\r\n     */ setAuthorityMetadata(key, entity) {\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n        this.internalStorage.setItem(key, JSON.stringify(entity));\n    }\n    /**\r\n     * Gets the active account\r\n     */ getActiveAccount() {\n        const activeAccountKeyFilters = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n        const activeAccountValueFilters = this.getItem(activeAccountKeyFilters);\n        if (!activeAccountValueFilters) {\n            // if new active account cache type isn't found, it's an old version, so look for that instead\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema\");\n            const activeAccountKeyLocal = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT);\n            const activeAccountValueLocal = this.getItem(activeAccountKeyLocal);\n            if (!activeAccountValueLocal) {\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n                return null;\n            }\n            const activeAccount = this.getAccountInfoFilteredBy({\n                localAccountId: activeAccountValueLocal\n            });\n            if (activeAccount) {\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Legacy active account cache schema found\");\n                this.logger.trace(\"BrowserCacheManager.getActiveAccount: Adding active account filters cache schema\");\n                this.setActiveAccount(activeAccount);\n                return activeAccount;\n            }\n            return null;\n        }\n        const activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);\n        if (activeAccountValueObj) {\n            this.logger.trace(\"BrowserCacheManager.getActiveAccount: Active account filters schema found\");\n            return this.getAccountInfoFilteredBy({\n                homeAccountId: activeAccountValueObj.homeAccountId,\n                localAccountId: activeAccountValueObj.localAccountId,\n                tenantId: activeAccountValueObj.tenantId\n            });\n        }\n        this.logger.trace(\"BrowserCacheManager.getActiveAccount: No active account found\");\n        return null;\n    }\n    /**\r\n     * Sets the active account's localAccountId in cache\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        const activeAccountKey = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);\n        const activeAccountKeyLocal = this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ACTIVE_ACCOUNT);\n        if (account) {\n            this.logger.verbose(\"setActiveAccount: Active account set\");\n            const activeAccountValue = {\n                homeAccountId: account.homeAccountId,\n                localAccountId: account.localAccountId,\n                tenantId: account.tenantId\n            };\n            this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));\n            this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);\n        } else {\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n            this.browserStorage.removeItem(activeAccountKey);\n            this.browserStorage.removeItem(activeAccountKeyLocal);\n        }\n    }\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */ getThrottlingCache(throttlingCacheKey) {\n        const value = this.getItem(throttlingCacheKey);\n        if (!value) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n        const parsedThrottlingCache = this.validateAndParseJson(value);\n        if (!parsedThrottlingCache || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n        return parsedThrottlingCache;\n    }\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */ setThrottlingCache(throttlingCacheKey, throttlingCache) {\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n    }\n    /**\r\n     * Gets cache item with given key.\r\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */ getTemporaryCache(cacheKey, generateKey) {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            const itemCookie = this.cookieStorage.getItem(key);\n            if (itemCookie) {\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n                return itemCookie;\n            }\n        }\n        const value = this.temporaryCacheStorage.getItem(key);\n        if (!value) {\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\n            if (this.cacheConfig.cacheLocation === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.LocalStorage) {\n                const item = this.browserStorage.getItem(key);\n                if (item) {\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n                    return item;\n                }\n            }\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n            return null;\n        }\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n        return value;\n    }\n    /**\r\n     * Sets the cache item with the key and value given.\r\n     * Stores in cookie if storeAuthStateInCookie is set to true.\r\n     * This can cause cookie overflow if used incorrectly.\r\n     * @param key\r\n     * @param value\r\n     */ setTemporaryCache(cacheKey, value, generateKey) {\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n        this.temporaryCacheStorage.setItem(key, value);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n            this.cookieStorage.setItem(key, value, undefined, this.cacheConfig.secureCookies);\n        }\n    }\n    /**\r\n     * Removes the cache item with the given key.\r\n     * @param key\r\n     */ removeItem(key) {\n        this.browserStorage.removeItem(key);\n    }\n    /**\r\n     * Removes the temporary cache item with the given key.\r\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */ removeTemporaryItem(key) {\n        this.temporaryCacheStorage.removeItem(key);\n        if (this.cacheConfig.storeAuthStateInCookie) {\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n            this.cookieStorage.removeItem(key);\n        }\n    }\n    /**\r\n     * Gets all keys in window.\r\n     */ getKeys() {\n        return this.browserStorage.getKeys();\n    }\n    /**\r\n     * Clears all cache entries created by MSAL.\r\n     */ async clear() {\n        // Removes all accounts and their credentials\n        await this.removeAllAccounts();\n        this.removeAppMetadata();\n        // Remove temp storage first to make sure any cookies are cleared\n        this.temporaryCacheStorage.getKeys().forEach((cacheKey)=>{\n            if (cacheKey.indexOf(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {\n                this.removeTemporaryItem(cacheKey);\n            }\n        });\n        // Removes all remaining MSAL cache items\n        this.browserStorage.getKeys().forEach((cacheKey)=>{\n            if (cacheKey.indexOf(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(this.clientId) !== -1) {\n                this.browserStorage.removeItem(cacheKey);\n            }\n        });\n        this.internalStorage.clear();\n    }\n    /**\r\n     * Clears all access tokes that have claims prior to saving the current one\r\n     * @param performanceClient {IPerformanceClient}\r\n     * @param correlationId {string} correlation id\r\n     * @returns\r\n     */ async clearTokensAndKeysWithClaims(performanceClient, correlationId) {\n        performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.PerformanceEvents.ClearTokensAndKeysWithClaims, correlationId);\n        const tokenKeys = this.getTokenKeys();\n        const removedAccessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            // if the access token has claims in its key, remove the token key and the token\n            const credential = this.getAccessTokenCredential(key);\n            if (credential?.requestedClaimsHash && key.includes(credential.requestedClaimsHash.toLowerCase())) {\n                removedAccessTokens.push(this.removeAccessToken(key));\n            }\n        });\n        await Promise.all(removedAccessTokens);\n        // warn if any access tokens are removed\n        if (removedAccessTokens.length > 0) {\n            this.logger.warning(`${removedAccessTokens.length} access tokens with claims in the cache keys have been removed from the cache.`);\n        }\n    }\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */ generateCacheKey(key) {\n        const generatedKey = this.validateAndParseJson(key);\n        if (!generatedKey) {\n            if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.StringUtils.startsWith(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.StringUtils.startsWith(key, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ADAL_ID_TOKEN)) {\n                return key;\n            }\n            return `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\n        }\n        return JSON.stringify(key);\n    }\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */ generateAuthorityKey(stateString) {\n        const { libraryState: { id: stateId } } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.AUTHORITY}.${stateId}`);\n    }\n    /**\r\n     * Create Nonce key to cache nonce\r\n     * @param state\r\n     */ generateNonceKey(stateString) {\n        const { libraryState: { id: stateId } } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\n    }\n    /**\r\n     * Creates full cache key for the request state\r\n     * @param stateString State string for the request\r\n     */ generateStateKey(stateString) {\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n        const { libraryState: { id: stateId } } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\n        return this.generateCacheKey(`${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\n    }\n    /**\r\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n     */ getCachedAuthority(cachedState) {\n        const stateCacheKey = this.generateStateKey(cachedState);\n        const state = this.getTemporaryCache(stateCacheKey);\n        if (!state) {\n            return null;\n        }\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        return this.getTemporaryCache(authorityCacheKey);\n    }\n    /**\r\n     * Updates account, authority, and state in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     */ updateCacheEntries(state, nonce, authorityInstance, loginHint, account) {\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n        // Cache the request state\n        const stateCacheKey = this.generateStateKey(state);\n        this.setTemporaryCache(stateCacheKey, state, false);\n        // Cache the nonce\n        const nonceCacheKey = this.generateNonceKey(state);\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\n        // Cache authorityKey\n        const authorityCacheKey = this.generateAuthorityKey(state);\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n        if (account) {\n            const ccsCredential = {\n                credential: account.homeAccountId,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.CcsCredentialType.HOME_ACCOUNT_ID\n            };\n            this.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        } else if (loginHint) {\n            const ccsCredential = {\n                credential: loginHint,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.CcsCredentialType.UPN\n            };\n            this.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n        }\n    }\n    /**\r\n     * Reset all temporary cache items\r\n     * @param state\r\n     */ resetRequestCache(state) {\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n        // check state and remove associated cache items\n        if (state) {\n            this.temporaryCacheStorage.getKeys().forEach((key)=>{\n                if (key.indexOf(state) !== -1) {\n                    this.removeTemporaryItem(key);\n                }\n            });\n            // delete generic interactive request parameters\n            this.removeTemporaryItem(this.generateStateKey(state));\n            this.removeTemporaryItem(this.generateNonceKey(state));\n            this.removeTemporaryItem(this.generateAuthorityKey(state));\n        }\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.ORIGIN_URI));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CORRELATION_ID));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.CCS_CREDENTIAL));\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.NATIVE_REQUEST));\n        this.setInteractionInProgress(false);\n    }\n    /**\r\n     * Removes temporary cache for the provided state\r\n     * @param stateString\r\n     */ cleanRequestByState(stateString) {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n        // Interaction is completed - remove interaction status.\n        if (stateString) {\n            const stateKey = this.generateStateKey(stateString);\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\n            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\n            this.resetRequestCache(cachedState || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING);\n        }\n    }\n    /**\r\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n     * @param interactionType\r\n     */ cleanRequestByInteractionType(interactionType) {\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n        // Loop through all keys to find state key\n        this.temporaryCacheStorage.getKeys().forEach((key)=>{\n            // If this key is not the state key, move on\n            if (key.indexOf(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_STATE) === -1) {\n                return;\n            }\n            // Retrieve state value, return if not a valid value\n            const stateValue = this.temporaryCacheStorage.getItem(key);\n            if (!stateValue) {\n                return;\n            }\n            // Extract state and ensure it matches given InteractionType, then clean request cache\n            const parsedState = (0,_utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_15__.extractBrowserRequestState)(this.cryptoImpl, stateValue);\n            if (parsedState && parsedState.interactionType === interactionType) {\n                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\n                this.resetRequestCache(stateValue);\n            }\n        });\n        this.setInteractionInProgress(false);\n    }\n    cacheCodeRequest(authCodeRequest) {\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n        const encodedValue = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_16__.base64Encode)(JSON.stringify(authCodeRequest));\n        this.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n    }\n    /**\r\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n     */ getCachedRequest(state) {\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n        // Get token request from cache and parse as TokenExchangeParameters.\n        const encodedTokenRequest = this.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS, true);\n        if (!encodedTokenRequest) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.noTokenRequestCacheError);\n        }\n        let parsedRequest;\n        try {\n            parsedRequest = JSON.parse((0,_encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__.base64Decode)(encodedTokenRequest));\n        } catch (e) {\n            this.logger.errorPii(`Attempted to parse: ${encodedTokenRequest}`);\n            this.logger.error(`Parsing cached token request threw with error: ${e}`);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.unableToParseTokenRequestCacheError);\n        }\n        this.removeTemporaryItem(this.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.REQUEST_PARAMS));\n        // Get cached authority and use if no authority is cached with request.\n        if (!parsedRequest.authority) {\n            const authorityCacheKey = this.generateAuthorityKey(state);\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n            if (!cachedAuthority) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.noCachedAuthorityError);\n            }\n            parsedRequest.authority = cachedAuthority;\n        }\n        return parsedRequest;\n    }\n    /**\r\n     * Gets cached native request for redirect flows\r\n     */ getCachedNativeRequest() {\n        this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest called\");\n        const cachedRequest = this.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.NATIVE_REQUEST, true);\n        if (!cachedRequest) {\n            this.logger.trace(\"BrowserCacheManager.getCachedNativeRequest: No cached native request found\");\n            return null;\n        }\n        const parsedRequest = this.validateAndParseJson(cachedRequest);\n        if (!parsedRequest) {\n            this.logger.error(\"BrowserCacheManager.getCachedNativeRequest: Unable to parse native request\");\n            return null;\n        }\n        return parsedRequest;\n    }\n    isInteractionInProgress(matchClientId) {\n        const clientId = this.getInteractionInProgress();\n        if (matchClientId) {\n            return clientId === this.clientId;\n        } else {\n            return !!clientId;\n        }\n    }\n    getInteractionInProgress() {\n        const key = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        return this.getTemporaryCache(key, false);\n    }\n    setInteractionInProgress(inProgress) {\n        // Ensure we don't overwrite interaction in progress for a different clientId\n        const key = `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.Constants.CACHE_PREFIX}.${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.INTERACTION_STATUS_KEY}`;\n        if (inProgress) {\n            if (this.getInteractionInProgress()) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_17__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_18__.interactionInProgress);\n            } else {\n                // No interaction is in progress\n                this.setTemporaryCache(key, this.clientId, false);\n            }\n        } else if (!inProgress && this.getInteractionInProgress() === this.clientId) {\n            this.removeTemporaryItem(key);\n        }\n    }\n    /**\r\n     * Returns username retrieved from ADAL or MSAL v1 idToken\r\n     * @deprecated\r\n     */ getLegacyLoginHint() {\n        // Only check for adal/msal token if no SSO params are being used\n        const adalIdTokenString = this.getTemporaryCache(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ADAL_ID_TOKEN);\n        if (adalIdTokenString) {\n            this.browserStorage.removeItem(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ADAL_ID_TOKEN);\n            this.logger.verbose(\"Cached ADAL id token retrieved.\");\n        }\n        // Check for cached MSAL v1 id token\n        const msalIdTokenString = this.getTemporaryCache(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN, true);\n        if (msalIdTokenString) {\n            this.browserStorage.removeItem(this.generateCacheKey(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PersistentCacheKeys.ID_TOKEN));\n            this.logger.verbose(\"Cached MSAL.js v1 id token retrieved\");\n        }\n        const cachedIdTokenString = msalIdTokenString || adalIdTokenString;\n        if (cachedIdTokenString) {\n            const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.extractTokenClaims(cachedIdTokenString, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__.base64Decode);\n            if (idTokenClaims.preferred_username) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint\");\n                return idTokenClaims.preferred_username;\n            } else if (idTokenClaims.upn) {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint\");\n                return idTokenClaims.upn;\n            } else {\n                this.logger.verbose(\"No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.\");\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Updates a credential's cache key if the current cache key is outdated\r\n     */ updateCredentialCacheKey(currentCacheKey, credential) {\n        const updatedCacheKey = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.generateCredentialKey(credential);\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.browserStorage.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n                return updatedCacheKey;\n            } else {\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n            }\n        }\n        return currentCacheKey;\n    }\n    /**\r\n     * Builds credential entities from AuthenticationResult object and saves the resulting credentials to the cache\r\n     * @param result\r\n     * @param request\r\n     */ async hydrateCache(result, request) {\n        const idTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.createIdTokenEntity(result.account?.homeAccountId, result.account?.environment, result.idToken, this.clientId, result.tenantId);\n        let claimsHash;\n        if (request.claims) {\n            claimsHash = await this.cryptoImpl.hashString(request.claims);\n        }\n        /**\r\n         * meta data for cache stores time in seconds from epoch\r\n         * AuthenticationResult returns expiresOn and extExpiresOn in milliseconds (as a Date object which is in ms)\r\n         * We need to map these for the cache when building tokens from AuthenticationResult\r\n         *\r\n         * The next MSAL VFuture should map these both to same value if possible\r\n         */ const accessTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.createAccessTokenEntity(result.account?.homeAccountId, result.account.environment, result.accessToken, this.clientId, result.tenantId, result.scopes.join(\" \"), result.expiresOn ? result.expiresOn.getTime() / 1000 : 0, result.extExpiresOn ? result.extExpiresOn.getTime() / 1000 : 0, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_19__.base64Decode, undefined, result.tokenType, undefined, request.sshKid, request.claims, claimsHash);\n        const cacheRecord = {\n            idToken: idTokenEntity,\n            accessToken: accessTokenEntity\n        };\n        return this.saveCacheRecord(cacheRecord);\n    }\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */ async saveCacheRecord(cacheRecord, storeInCache, correlationId) {\n        try {\n            await super.saveCacheRecord(cacheRecord, storeInCache, correlationId);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.CacheError && this.performanceClient && correlationId) {\n                try {\n                    const tokenKeys = this.getTokenKeys();\n                    this.performanceClient.addFields({\n                        cacheRtCount: tokenKeys.refreshToken.length,\n                        cacheIdCount: tokenKeys.idToken.length,\n                        cacheAtCount: tokenKeys.accessToken.length\n                    }, correlationId);\n                } catch (e) {}\n            }\n            throw e;\n        }\n    }\n}\nconst DEFAULT_BROWSER_CACHE_MANAGER = (clientId, logger)=>{\n    const cacheOptions = {\n        cacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage,\n        temporaryCacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.MemoryStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        cacheMigrationEnabled: false,\n        claimsBasedCachingEnabled: false\n    };\n    return new BrowserCacheManager(clientId, cacheOptions, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__.DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\n //# sourceMappingURL=BrowserCacheManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CookieStorage: () => (/* binding */ CookieStorage),\n/* harmony export */   getCookieExpirationTime: () => (/* binding */ getCookieExpirationTime)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Cookie life calculation (hours * minutes * seconds * ms)\nconst COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\nclass CookieStorage {\n    getItem(key) {\n        const name = `${encodeURIComponent(key)}`;\n        const cookieList = document.cookie.split(\";\");\n        for(let i = 0; i < cookieList.length; i++){\n            const cookie = cookieList[i];\n            const [key, ...rest] = decodeURIComponent(cookie).trim().split(\"=\");\n            const value = rest.join(\"=\");\n            if (key === name) {\n                return value;\n            }\n        }\n        return \"\";\n    }\n    setItem(key, value, cookieLifeDays, secure = true) {\n        let cookieStr = `${encodeURIComponent(key)}=${encodeURIComponent(value)};path=/;SameSite=Lax;`;\n        if (cookieLifeDays) {\n            const expireTime = getCookieExpirationTime(cookieLifeDays);\n            cookieStr += `expires=${expireTime};`;\n        }\n        if (secure) {\n            cookieStr += \"Secure;\";\n        }\n        document.cookie = cookieStr;\n    }\n    removeItem(key) {\n        // Setting expiration to -1 removes it\n        this.setItem(key, \"\", -1);\n    }\n    getKeys() {\n        const cookieList = document.cookie.split(\";\");\n        const keys = [];\n        cookieList.forEach((cookie)=>{\n            const cookieParts = decodeURIComponent(cookie).trim().split(\"=\");\n            keys.push(cookieParts[0]);\n        });\n        return keys;\n    }\n    containsKey(key) {\n        return this.getKeys().includes(key);\n    }\n}\n/**\r\n * Get cookie expiration time\r\n * @param cookieLifeDays\r\n */ function getCookieExpirationTime(cookieLifeDays) {\n    const today = new Date();\n    const expr = new Date(today.getTime() + cookieLifeDays * COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n}\n //# sourceMappingURL=CookieStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL0Nvb2tpZVN0b3JhZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsMkRBQTJEO0FBQzNELE1BQU1BLHlCQUF5QixLQUFLLEtBQUssS0FBSztBQUM5QyxNQUFNQztJQUNGQyxRQUFRQyxHQUFHLEVBQUU7UUFDVCxNQUFNQyxPQUFPLENBQUMsRUFBRUMsbUJBQW1CRixLQUFLLENBQUM7UUFDekMsTUFBTUcsYUFBYUMsU0FBU0MsTUFBTSxDQUFDQyxLQUFLLENBQUM7UUFDekMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLFdBQVdLLE1BQU0sRUFBRUQsSUFBSztZQUN4QyxNQUFNRixTQUFTRixVQUFVLENBQUNJLEVBQUU7WUFDNUIsTUFBTSxDQUFDUCxLQUFLLEdBQUdTLEtBQUssR0FBR0MsbUJBQW1CTCxRQUFRTSxJQUFJLEdBQUdMLEtBQUssQ0FBQztZQUMvRCxNQUFNTSxRQUFRSCxLQUFLSSxJQUFJLENBQUM7WUFDeEIsSUFBSWIsUUFBUUMsTUFBTTtnQkFDZCxPQUFPVztZQUNYO1FBQ0o7UUFDQSxPQUFPO0lBQ1g7SUFDQUUsUUFBUWQsR0FBRyxFQUFFWSxLQUFLLEVBQUVHLGNBQWMsRUFBRUMsU0FBUyxJQUFJLEVBQUU7UUFDL0MsSUFBSUMsWUFBWSxDQUFDLEVBQUVmLG1CQUFtQkYsS0FBSyxDQUFDLEVBQUVFLG1CQUFtQlUsT0FBTyxxQkFBcUIsQ0FBQztRQUM5RixJQUFJRyxnQkFBZ0I7WUFDaEIsTUFBTUcsYUFBYUMsd0JBQXdCSjtZQUMzQ0UsYUFBYSxDQUFDLFFBQVEsRUFBRUMsV0FBVyxDQUFDLENBQUM7UUFDekM7UUFDQSxJQUFJRixRQUFRO1lBQ1JDLGFBQWE7UUFDakI7UUFDQWIsU0FBU0MsTUFBTSxHQUFHWTtJQUN0QjtJQUNBRyxXQUFXcEIsR0FBRyxFQUFFO1FBQ1osc0NBQXNDO1FBQ3RDLElBQUksQ0FBQ2MsT0FBTyxDQUFDZCxLQUFLLElBQUksQ0FBQztJQUMzQjtJQUNBcUIsVUFBVTtRQUNOLE1BQU1sQixhQUFhQyxTQUFTQyxNQUFNLENBQUNDLEtBQUssQ0FBQztRQUN6QyxNQUFNZ0IsT0FBTyxFQUFFO1FBQ2ZuQixXQUFXb0IsT0FBTyxDQUFDLENBQUNsQjtZQUNoQixNQUFNbUIsY0FBY2QsbUJBQW1CTCxRQUFRTSxJQUFJLEdBQUdMLEtBQUssQ0FBQztZQUM1RGdCLEtBQUtHLElBQUksQ0FBQ0QsV0FBVyxDQUFDLEVBQUU7UUFDNUI7UUFDQSxPQUFPRjtJQUNYO0lBQ0FJLFlBQVkxQixHQUFHLEVBQUU7UUFDYixPQUFPLElBQUksQ0FBQ3FCLE9BQU8sR0FBR00sUUFBUSxDQUFDM0I7SUFDbkM7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNtQix3QkFBd0JKLGNBQWM7SUFDM0MsTUFBTWEsUUFBUSxJQUFJQztJQUNsQixNQUFNQyxPQUFPLElBQUlELEtBQUtELE1BQU1HLE9BQU8sS0FBS2hCLGlCQUFpQmxCO0lBQ3pELE9BQU9pQyxLQUFLRSxXQUFXO0FBQzNCO0FBRWtELENBQ2xELDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvY2FjaGUvQ29va2llU3RvcmFnZS5tanM/OTU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb29raWUgbGlmZSBjYWxjdWxhdGlvbiAoaG91cnMgKiBtaW51dGVzICogc2Vjb25kcyAqIG1zKVxyXG5jb25zdCBDT09LSUVfTElGRV9NVUxUSVBMSUVSID0gMjQgKiA2MCAqIDYwICogMTAwMDtcclxuY2xhc3MgQ29va2llU3RvcmFnZSB7XHJcbiAgICBnZXRJdGVtKGtleSkge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX1gO1xyXG4gICAgICAgIGNvbnN0IGNvb2tpZUxpc3QgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoXCI7XCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29va2llTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb29raWUgPSBjb29raWVMaXN0W2ldO1xyXG4gICAgICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IGRlY29kZVVSSUNvbXBvbmVudChjb29raWUpLnRyaW0oKS5zcGxpdChcIj1cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdC5qb2luKFwiPVwiKTtcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgc2V0SXRlbShrZXksIHZhbHVlLCBjb29raWVMaWZlRGF5cywgc2VjdXJlID0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBjb29raWVTdHIgPSBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfTtwYXRoPS87U2FtZVNpdGU9TGF4O2A7XHJcbiAgICAgICAgaWYgKGNvb2tpZUxpZmVEYXlzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cGlyZVRpbWUgPSBnZXRDb29raWVFeHBpcmF0aW9uVGltZShjb29raWVMaWZlRGF5cyk7XHJcbiAgICAgICAgICAgIGNvb2tpZVN0ciArPSBgZXhwaXJlcz0ke2V4cGlyZVRpbWV9O2A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZWN1cmUpIHtcclxuICAgICAgICAgICAgY29va2llU3RyICs9IFwiU2VjdXJlO1wiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWVTdHI7XHJcbiAgICB9XHJcbiAgICByZW1vdmVJdGVtKGtleSkge1xyXG4gICAgICAgIC8vIFNldHRpbmcgZXhwaXJhdGlvbiB0byAtMSByZW1vdmVzIGl0XHJcbiAgICAgICAgdGhpcy5zZXRJdGVtKGtleSwgXCJcIiwgLTEpO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5cygpIHtcclxuICAgICAgICBjb25zdCBjb29raWVMaXN0ID0gZG9jdW1lbnQuY29va2llLnNwbGl0KFwiO1wiKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gW107XHJcbiAgICAgICAgY29va2llTGlzdC5mb3JFYWNoKChjb29raWUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29va2llUGFydHMgPSBkZWNvZGVVUklDb21wb25lbnQoY29va2llKS50cmltKCkuc3BsaXQoXCI9XCIpO1xyXG4gICAgICAgICAgICBrZXlzLnB1c2goY29va2llUGFydHNbMF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBrZXlzO1xyXG4gICAgfVxyXG4gICAgY29udGFpbnNLZXkoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S2V5cygpLmluY2x1ZGVzKGtleSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEdldCBjb29raWUgZXhwaXJhdGlvbiB0aW1lXHJcbiAqIEBwYXJhbSBjb29raWVMaWZlRGF5c1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Q29va2llRXhwaXJhdGlvblRpbWUoY29va2llTGlmZURheXMpIHtcclxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgIGNvbnN0IGV4cHIgPSBuZXcgRGF0ZSh0b2RheS5nZXRUaW1lKCkgKyBjb29raWVMaWZlRGF5cyAqIENPT0tJRV9MSUZFX01VTFRJUExJRVIpO1xyXG4gICAgcmV0dXJuIGV4cHIudG9VVENTdHJpbmcoKTtcclxufVxuXG5leHBvcnQgeyBDb29raWVTdG9yYWdlLCBnZXRDb29raWVFeHBpcmF0aW9uVGltZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29va2llU3RvcmFnZS5tanMubWFwXG4iXSwibmFtZXMiOlsiQ09PS0lFX0xJRkVfTVVMVElQTElFUiIsIkNvb2tpZVN0b3JhZ2UiLCJnZXRJdGVtIiwia2V5IiwibmFtZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvb2tpZUxpc3QiLCJkb2N1bWVudCIsImNvb2tpZSIsInNwbGl0IiwiaSIsImxlbmd0aCIsInJlc3QiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0cmltIiwidmFsdWUiLCJqb2luIiwic2V0SXRlbSIsImNvb2tpZUxpZmVEYXlzIiwic2VjdXJlIiwiY29va2llU3RyIiwiZXhwaXJlVGltZSIsImdldENvb2tpZUV4cGlyYXRpb25UaW1lIiwicmVtb3ZlSXRlbSIsImdldEtleXMiLCJrZXlzIiwiZm9yRWFjaCIsImNvb2tpZVBhcnRzIiwicHVzaCIsImNvbnRhaW5zS2V5IiwiaW5jbHVkZXMiLCJ0b2RheSIsIkRhdGUiLCJleHByIiwiZ2V0VGltZSIsInRvVVRDU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/CookieStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseStorage: () => (/* binding */ DatabaseStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */ class DatabaseStorage {\n    constructor(){\n        this.dbName = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_NAME;\n        this.version = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_VERSION;\n        this.tableName = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_TABLE_NAME;\n        this.dbOpen = false;\n    }\n    /**\r\n     * Opens IndexedDB instance.\r\n     */ async open() {\n        return new Promise((resolve, reject)=>{\n            const openDB = window.indexedDB.open(this.dbName, this.version);\n            openDB.addEventListener(\"upgradeneeded\", (e)=>{\n                const event = e;\n                event.target.result.createObjectStore(this.tableName);\n            });\n            openDB.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.db = event.target.result;\n                this.dbOpen = true;\n                resolve();\n            });\n            openDB.addEventListener(\"error\", ()=>reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseUnavailable)));\n        });\n    }\n    /**\r\n     * Closes the connection to IndexedDB database when all pending transactions\r\n     * complete.\r\n     */ closeConnection() {\n        const db = this.db;\n        if (db && this.dbOpen) {\n            db.close();\n            this.dbOpen = false;\n        }\n    }\n    /**\r\n     * Opens database if it's not already open\r\n     */ async validateDbIsOpen() {\n        if (!this.dbOpen) {\n            return this.open();\n        }\n    }\n    /**\r\n     * Retrieves item from IndexedDB instance.\r\n     * @param key\r\n     */ async getItem(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGet = objectStore.get(key);\n            dbGet.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n            dbGet.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Adds item to IndexedDB under given key\r\n     * @param key\r\n     * @param payload\r\n     */ async setItem(key, payload) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            // TODO: Add timeouts?\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbPut = objectStore.put(payload, key);\n            dbPut.addEventListener(\"success\", ()=>{\n                this.closeConnection();\n                resolve();\n            });\n            dbPut.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Removes item from IndexedDB under given key\r\n     * @param key\r\n     */ async removeItem(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readwrite\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbDelete = objectStore.delete(key);\n            dbDelete.addEventListener(\"success\", ()=>{\n                this.closeConnection();\n                resolve();\n            });\n            dbDelete.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Get all the keys from the storage object as an iterable array of strings.\r\n     */ async getKeys() {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbGetKeys = objectStore.getAllKeys();\n            dbGetKeys.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result);\n            });\n            dbGetKeys.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     *\r\n     * Checks whether there is an object under the search key in the object store\r\n     */ async containsKey(key) {\n        await this.validateDbIsOpen();\n        return new Promise((resolve, reject)=>{\n            if (!this.db) {\n                return reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.databaseNotOpen));\n            }\n            const transaction = this.db.transaction([\n                this.tableName\n            ], \"readonly\");\n            const objectStore = transaction.objectStore(this.tableName);\n            const dbContainsKey = objectStore.count(key);\n            dbContainsKey.addEventListener(\"success\", (e)=>{\n                const event = e;\n                this.closeConnection();\n                resolve(event.target.result === 1);\n            });\n            dbContainsKey.addEventListener(\"error\", (e)=>{\n                this.closeConnection();\n                reject(e);\n            });\n        });\n    }\n    /**\r\n     * Deletes the MSAL database. The database is deleted rather than cleared to make it possible\r\n     * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues\r\n     * with IndexedDB database versions.\r\n     */ async deleteDatabase() {\n        // Check if database being deleted exists\n        if (this.db && this.dbOpen) {\n            this.closeConnection();\n        }\n        return new Promise((resolve, reject)=>{\n            const deleteDbRequest = window.indexedDB.deleteDatabase(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.DB_NAME);\n            const id = setTimeout(()=>reject(false), 200); // Reject if events aren't raised within 200ms\n            deleteDbRequest.addEventListener(\"success\", ()=>{\n                clearTimeout(id);\n                return resolve(true);\n            });\n            deleteDbRequest.addEventListener(\"blocked\", ()=>{\n                clearTimeout(id);\n                return resolve(true);\n            });\n            deleteDbRequest.addEventListener(\"error\", ()=>{\n                clearTimeout(id);\n                return reject(false);\n            });\n        });\n    }\n}\n //# sourceMappingURL=DatabaseStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/DatabaseStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalStorage: () => (/* binding */ LocalStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class LocalStorage {\n    constructor(){\n        if (!window.localStorage) {\n            throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.storageNotSupported);\n        }\n    }\n    getItem(key) {\n        return window.localStorage.getItem(key);\n    }\n    setItem(key, value) {\n        window.localStorage.setItem(key, value);\n    }\n    removeItem(key) {\n        window.localStorage.removeItem(key);\n    }\n    getKeys() {\n        return Object.keys(window.localStorage);\n    }\n    containsKey(key) {\n        return window.localStorage.hasOwnProperty(key);\n    }\n}\n //# sourceMappingURL=LocalStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL0xvY2FsU3RvcmFnZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ2lHO0FBQ1g7QUFFdEY7OztDQUdDLEdBQ0QsTUFBTUU7SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsT0FBT0MsWUFBWSxFQUFFO1lBQ3RCLE1BQU1MLDZHQUFtQ0EsQ0FBQ0MsOEZBQW1CQTtRQUNqRTtJQUNKO0lBQ0FLLFFBQVFDLEdBQUcsRUFBRTtRQUNULE9BQU9ILE9BQU9DLFlBQVksQ0FBQ0MsT0FBTyxDQUFDQztJQUN2QztJQUNBQyxRQUFRRCxHQUFHLEVBQUVFLEtBQUssRUFBRTtRQUNoQkwsT0FBT0MsWUFBWSxDQUFDRyxPQUFPLENBQUNELEtBQUtFO0lBQ3JDO0lBQ0FDLFdBQVdILEdBQUcsRUFBRTtRQUNaSCxPQUFPQyxZQUFZLENBQUNLLFVBQVUsQ0FBQ0g7SUFDbkM7SUFDQUksVUFBVTtRQUNOLE9BQU9DLE9BQU9DLElBQUksQ0FBQ1QsT0FBT0MsWUFBWTtJQUMxQztJQUNBUyxZQUFZUCxHQUFHLEVBQUU7UUFDYixPQUFPSCxPQUFPQyxZQUFZLENBQUNVLGNBQWMsQ0FBQ1I7SUFDOUM7QUFDSjtBQUV3QixDQUN4Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL0xvY2FsU3RvcmFnZS5tanM/ZDA2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IHN0b3JhZ2VOb3RTdXBwb3J0ZWQgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBMb2NhbFN0b3JhZ2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cubG9jYWxTdG9yYWdlKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yKHN0b3JhZ2VOb3RTdXBwb3J0ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldEl0ZW0oa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgfVxyXG4gICAgc2V0SXRlbShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlSXRlbShrZXkpIHtcclxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuICAgIH1cclxuICAgIGdldEtleXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHdpbmRvdy5sb2NhbFN0b3JhZ2UpO1xyXG4gICAgfVxyXG4gICAgY29udGFpbnNLZXkoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBMb2NhbFN0b3JhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxvY2FsU3RvcmFnZS5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IiLCJzdG9yYWdlTm90U3VwcG9ydGVkIiwiTG9jYWxTdG9yYWdlIiwiY29uc3RydWN0b3IiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwia2V5Iiwic2V0SXRlbSIsInZhbHVlIiwicmVtb3ZlSXRlbSIsImdldEtleXMiLCJPYmplY3QiLCJrZXlzIiwiY29udGFpbnNLZXkiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/LocalStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoryStorage: () => (/* binding */ MemoryStorage)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class MemoryStorage {\n    constructor(){\n        this.cache = new Map();\n    }\n    getItem(key) {\n        return this.cache.get(key) || null;\n    }\n    setItem(key, value) {\n        this.cache.set(key, value);\n    }\n    removeItem(key) {\n        this.cache.delete(key);\n    }\n    getKeys() {\n        const cacheKeys = [];\n        this.cache.forEach((value, key)=>{\n            cacheKeys.push(key);\n        });\n        return cacheKeys;\n    }\n    containsKey(key) {\n        return this.cache.has(key);\n    }\n    clear() {\n        this.cache.clear();\n    }\n}\n //# sourceMappingURL=MemoryStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL01lbW9yeVN0b3JhZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUM7SUFDckI7SUFDQUMsUUFBUUMsR0FBRyxFQUFFO1FBQ1QsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ0ksR0FBRyxDQUFDRCxRQUFRO0lBQ2xDO0lBQ0FFLFFBQVFGLEdBQUcsRUFBRUcsS0FBSyxFQUFFO1FBQ2hCLElBQUksQ0FBQ04sS0FBSyxDQUFDTyxHQUFHLENBQUNKLEtBQUtHO0lBQ3hCO0lBQ0FFLFdBQVdMLEdBQUcsRUFBRTtRQUNaLElBQUksQ0FBQ0gsS0FBSyxDQUFDUyxNQUFNLENBQUNOO0lBQ3RCO0lBQ0FPLFVBQVU7UUFDTixNQUFNQyxZQUFZLEVBQUU7UUFDcEIsSUFBSSxDQUFDWCxLQUFLLENBQUNZLE9BQU8sQ0FBQyxDQUFDTixPQUFPSDtZQUN2QlEsVUFBVUUsSUFBSSxDQUFDVjtRQUNuQjtRQUNBLE9BQU9RO0lBQ1g7SUFDQUcsWUFBWVgsR0FBRyxFQUFFO1FBQ2IsT0FBTyxJQUFJLENBQUNILEtBQUssQ0FBQ2UsR0FBRyxDQUFDWjtJQUMxQjtJQUNBYSxRQUFRO1FBQ0osSUFBSSxDQUFDaEIsS0FBSyxDQUFDZ0IsS0FBSztJQUNwQjtBQUNKO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvY2FjaGUvTWVtb3J5U3RvcmFnZS5tanM/YzAxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBNZW1vcnlTdG9yYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBnZXRJdGVtKGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmdldChrZXkpIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgICBzZXRJdGVtKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLmNhY2hlLnNldChrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJlbW92ZUl0ZW0oa2V5KSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIGdldEtleXMoKSB7XHJcbiAgICAgICAgY29uc3QgY2FjaGVLZXlzID0gW107XHJcbiAgICAgICAgdGhpcy5jYWNoZS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNhY2hlS2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNhY2hlS2V5cztcclxuICAgIH1cclxuICAgIGNvbnRhaW5zS2V5KGtleSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmhhcyhrZXkpO1xyXG4gICAgfVxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZS5jbGVhcigpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IE1lbW9yeVN0b3JhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lbW9yeVN0b3JhZ2UubWpzLm1hcFxuIl0sIm5hbWVzIjpbIk1lbW9yeVN0b3JhZ2UiLCJjb25zdHJ1Y3RvciIsImNhY2hlIiwiTWFwIiwiZ2V0SXRlbSIsImtleSIsImdldCIsInNldEl0ZW0iLCJ2YWx1ZSIsInNldCIsInJlbW92ZUl0ZW0iLCJkZWxldGUiLCJnZXRLZXlzIiwiY2FjaGVLZXlzIiwiZm9yRWFjaCIsInB1c2giLCJjb250YWluc0tleSIsImhhcyIsImNsZWFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/MemoryStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionStorage: () => (/* binding */ SessionStorage)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SessionStorage {\n    constructor(){\n        if (!window.sessionStorage) {\n            throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.storageNotSupported);\n        }\n    }\n    getItem(key) {\n        return window.sessionStorage.getItem(key);\n    }\n    setItem(key, value) {\n        window.sessionStorage.setItem(key, value);\n    }\n    removeItem(key) {\n        window.sessionStorage.removeItem(key);\n    }\n    getKeys() {\n        return Object.keys(window.sessionStorage);\n    }\n    containsKey(key) {\n        return window.sessionStorage.hasOwnProperty(key);\n    }\n}\n //# sourceMappingURL=SessionStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL1Nlc3Npb25TdG9yYWdlLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDaUc7QUFDWDtBQUV0Rjs7O0NBR0MsR0FDRCxNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxPQUFPQyxjQUFjLEVBQUU7WUFDeEIsTUFBTUwsNkdBQW1DQSxDQUFDQyw4RkFBbUJBO1FBQ2pFO0lBQ0o7SUFDQUssUUFBUUMsR0FBRyxFQUFFO1FBQ1QsT0FBT0gsT0FBT0MsY0FBYyxDQUFDQyxPQUFPLENBQUNDO0lBQ3pDO0lBQ0FDLFFBQVFELEdBQUcsRUFBRUUsS0FBSyxFQUFFO1FBQ2hCTCxPQUFPQyxjQUFjLENBQUNHLE9BQU8sQ0FBQ0QsS0FBS0U7SUFDdkM7SUFDQUMsV0FBV0gsR0FBRyxFQUFFO1FBQ1pILE9BQU9DLGNBQWMsQ0FBQ0ssVUFBVSxDQUFDSDtJQUNyQztJQUNBSSxVQUFVO1FBQ04sT0FBT0MsT0FBT0MsSUFBSSxDQUFDVCxPQUFPQyxjQUFjO0lBQzVDO0lBQ0FTLFlBQVlQLEdBQUcsRUFBRTtRQUNiLE9BQU9ILE9BQU9DLGNBQWMsQ0FBQ1UsY0FBYyxDQUFDUjtJQUNoRDtBQUNKO0FBRTBCLENBQzFCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvY2FjaGUvU2Vzc2lvblN0b3JhZ2UubWpzPzM5ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBzdG9yYWdlTm90U3VwcG9ydGVkIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgU2Vzc2lvblN0b3JhZ2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuc2Vzc2lvblN0b3JhZ2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3Ioc3RvcmFnZU5vdFN1cHBvcnRlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0SXRlbShrZXkpIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgIH1cclxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlSXRlbShrZXkpIHtcclxuICAgICAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgfVxyXG4gICAgZ2V0S2V5cygpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMod2luZG93LnNlc3Npb25TdG9yYWdlKTtcclxuICAgIH1cclxuICAgIGNvbnRhaW5zS2V5KGtleSkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBTZXNzaW9uU3RvcmFnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2Vzc2lvblN0b3JhZ2UubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yIiwic3RvcmFnZU5vdFN1cHBvcnRlZCIsIlNlc3Npb25TdG9yYWdlIiwiY29uc3RydWN0b3IiLCJ3aW5kb3ciLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJrZXkiLCJzZXRJdGVtIiwidmFsdWUiLCJyZW1vdmVJdGVtIiwiZ2V0S2V5cyIsIk9iamVjdCIsImtleXMiLCJjb250YWluc0tleSIsImhhc093blByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/SessionStorage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenCache: () => (/* binding */ TokenCache)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Token cache manager\r\n */ class TokenCache {\n    constructor(configuration, storage, logger, cryptoObj){\n        this.isBrowserEnvironment = \"undefined\" !== \"undefined\";\n        this.config = configuration;\n        this.storage = storage;\n        this.logger = logger;\n        this.cryptoObj = cryptoObj;\n    }\n    // Move getAllAccounts here and cache utility APIs\n    /**\r\n     * API to load tokens to msal-browser cache.\r\n     * @param request\r\n     * @param response\r\n     * @param options\r\n     * @returns `AuthenticationResult` for the response that was loaded.\r\n     */ loadExternalTokens(request, response, options) {\n        if (!this.isBrowserEnvironment) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nonBrowserEnvironment);\n        }\n        const idTokenClaims = response.id_token ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.extractTokenClaims(response.id_token, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode) : undefined;\n        const authorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n        };\n        const authority = request.authority ? new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Authority(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Authority.generateAuthority(request.authority, request.azureCloudOptions), this.config.system.networkClient, this.storage, authorityOptions, this.logger, request.correlationId || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.createNewGuid)()) : undefined;\n        const cacheRecordAccount = this.loadAccount(request, options.clientInfo || response.client_info || \"\", idTokenClaims, authority);\n        const idToken = this.loadIdToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm);\n        const accessToken = this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment, cacheRecordAccount.realm, options);\n        const refreshToken = this.loadRefreshToken(response, cacheRecordAccount.homeAccountId, cacheRecordAccount.environment);\n        return this.generateAuthenticationResult(request, {\n            account: cacheRecordAccount,\n            idToken,\n            accessToken,\n            refreshToken\n        }, idTokenClaims, authority);\n    }\n    /**\r\n     * Helper function to load account to msal-browser cache\r\n     * @param idToken\r\n     * @param environment\r\n     * @param clientInfo\r\n     * @param authorityType\r\n     * @param requestHomeAccountId\r\n     * @returns `AccountEntity`\r\n     */ loadAccount(request, clientInfo, idTokenClaims, authority) {\n        this.logger.verbose(\"TokenCache - loading account\");\n        if (request.account) {\n            const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AccountEntity.createFromAccountInfo(request.account);\n            this.storage.setAccount(accountEntity);\n            return accountEntity;\n        } else if (!authority || !clientInfo && !idTokenClaims) {\n            this.logger.error(\"TokenCache - if an account is not provided on the request, authority and either clientInfo or idToken must be provided instead.\");\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.unableToLoadToken);\n        }\n        const homeAccountId = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AccountEntity.generateHomeAccountId(clientInfo, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n        const claimsTenantId = idTokenClaims?.tid;\n        const cachedAccount = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.buildAccountToCache)(this.storage, authority, homeAccountId, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode, idTokenClaims, clientInfo, authority.hostnameAndPort, claimsTenantId, undefined, undefined, this.logger);\n        this.storage.setAccount(cachedAccount);\n        return cachedAccount;\n    }\n    /**\r\n     * Helper function to load id tokens to msal-browser cache\r\n     * @param idToken\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `IdTokenEntity`\r\n     */ loadIdToken(response, homeAccountId, environment, tenantId) {\n        if (!response.id_token) {\n            this.logger.verbose(\"TokenCache - no id token found in response\");\n            return null;\n        }\n        this.logger.verbose(\"TokenCache - loading id token\");\n        const idTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.createIdTokenEntity(homeAccountId, environment, response.id_token, this.config.auth.clientId, tenantId);\n        this.storage.setIdTokenCredential(idTokenEntity);\n        return idTokenEntity;\n    }\n    /**\r\n     * Helper function to load access tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param tenantId\r\n     * @returns `AccessTokenEntity`\r\n     */ loadAccessToken(request, response, homeAccountId, environment, tenantId, options) {\n        if (!response.access_token) {\n            this.logger.verbose(\"TokenCache - no access token found in response\");\n            return null;\n        } else if (!response.expires_in) {\n            this.logger.error(\"TokenCache - no expiration set on the access token. Cannot add it to the cache.\");\n            return null;\n        } else if (!response.scope && (!request.scopes || !request.scopes.length)) {\n            this.logger.error(\"TokenCache - scopes not specified in the request or response. Cannot add token to the cache.\");\n            return null;\n        }\n        this.logger.verbose(\"TokenCache - loading access token\");\n        const scopes = response.scope ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(response.scope) : new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet(request.scopes);\n        const expiresOn = options.expiresOn || response.expires_in + new Date().getTime() / 1000;\n        const extendedExpiresOn = options.extendedExpiresOn || (response.ext_expires_in || response.expires_in) + new Date().getTime() / 1000;\n        const accessTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes.printScopes(), expiresOn, extendedExpiresOn, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode);\n        this.storage.setAccessTokenCredential(accessTokenEntity);\n        return accessTokenEntity;\n    }\n    /**\r\n     * Helper function to load refresh tokens to msal-browser cache\r\n     * @param request\r\n     * @param response\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @returns `RefreshTokenEntity`\r\n     */ loadRefreshToken(response, homeAccountId, environment) {\n        if (!response.refresh_token) {\n            this.logger.verbose(\"TokenCache - no refresh token found in response\");\n            return null;\n        }\n        this.logger.verbose(\"TokenCache - loading refresh token\");\n        const refreshTokenEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId, response.foci, undefined, response.refresh_token_expires_in);\n        this.storage.setRefreshTokenCredential(refreshTokenEntity);\n        return refreshTokenEntity;\n    }\n    /**\r\n     * Helper function to generate an `AuthenticationResult` for the result.\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param cacheRecord\r\n     * @param authority\r\n     * @returns `AuthenticationResult`\r\n     */ generateAuthenticationResult(request, cacheRecord, idTokenClaims, authority) {\n        let accessToken = \"\";\n        let responseScopes = [];\n        let expiresOn = null;\n        let extExpiresOn;\n        if (cacheRecord?.accessToken) {\n            accessToken = cacheRecord.accessToken.secret;\n            responseScopes = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n        }\n        const accountEntity = cacheRecord.account;\n        return {\n            authority: authority ? authority.canonicalAuthority : \"\",\n            uniqueId: cacheRecord.account.localAccountId,\n            tenantId: cacheRecord.account.realm,\n            scopes: responseScopes,\n            account: accountEntity.getAccountInfo(),\n            idToken: cacheRecord.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: true,\n            expiresOn: expiresOn,\n            correlationId: request.correlationId || \"\",\n            requestId: \"\",\n            extExpiresOn: extExpiresOn,\n            familyId: cacheRecord.refreshToken?.familyId || \"\",\n            tokenType: cacheRecord?.accessToken?.tokenType || \"\",\n            state: request.state || \"\",\n            cloudGraphHostName: accountEntity.cloudGraphHostName || \"\",\n            msGraphHost: accountEntity.msGraphHost || \"\",\n            fromNativeBroker: false\n        };\n    }\n}\n //# sourceMappingURL=TokenCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NhY2hlL1Rva2VuQ2FjaGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQzhIO0FBQ3ZEO0FBQ2I7QUFDRTtBQUNrQztBQUU5Rjs7O0NBR0MsR0FDRDs7Q0FFQyxHQUNELE1BQU1XO0lBQ0ZDLFlBQVlDLGFBQWEsRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLFNBQVMsQ0FBRTtRQUNuRCxJQUFJLENBQUNDLG9CQUFvQixHQUFHLGdCQUFrQjtRQUM5QyxJQUFJLENBQUNDLE1BQU0sR0FBR0w7UUFDZCxJQUFJLENBQUNDLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLFNBQVMsR0FBR0E7SUFDckI7SUFDQSxrREFBa0Q7SUFDbEQ7Ozs7OztLQU1DLEdBQ0RHLG1CQUFtQkMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRTtRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDTCxvQkFBb0IsRUFBRTtZQUM1QixNQUFNWCxtRkFBc0JBLENBQUNHLG1GQUFxQkE7UUFDdEQ7UUFDQSxNQUFNYyxnQkFBZ0JGLFNBQVNHLFFBQVEsR0FDakN4QiwwRUFBNEIsQ0FBQ3FCLFNBQVNHLFFBQVEsRUFBRWpCLGtFQUFZQSxJQUM1RG1CO1FBQ04sTUFBTUMsbUJBQW1CO1lBQ3JCQyxjQUFjLElBQUksQ0FBQ1YsTUFBTSxDQUFDVyxJQUFJLENBQUNELFlBQVk7WUFDM0NFLGtCQUFrQixJQUFJLENBQUNaLE1BQU0sQ0FBQ1csSUFBSSxDQUFDQyxnQkFBZ0I7WUFDbkRDLHdCQUF3QixJQUFJLENBQUNiLE1BQU0sQ0FBQ1csSUFBSSxDQUFDRSxzQkFBc0I7WUFDL0RDLG1CQUFtQixJQUFJLENBQUNkLE1BQU0sQ0FBQ1csSUFBSSxDQUFDRyxpQkFBaUI7WUFDckRDLDRCQUE0QixJQUFJLENBQUNmLE1BQU0sQ0FBQ1csSUFBSSxDQUFDSSwwQkFBMEI7UUFDM0U7UUFDQSxNQUFNQyxZQUFZZCxRQUFRYyxTQUFTLEdBQzdCLElBQUlqQyxpRUFBU0EsQ0FBQ0EsaUVBQVNBLENBQUNrQyxpQkFBaUIsQ0FBQ2YsUUFBUWMsU0FBUyxFQUFFZCxRQUFRZ0IsaUJBQWlCLEdBQUcsSUFBSSxDQUFDbEIsTUFBTSxDQUFDbUIsTUFBTSxDQUFDQyxhQUFhLEVBQUUsSUFBSSxDQUFDeEIsT0FBTyxFQUFFYSxrQkFBa0IsSUFBSSxDQUFDWixNQUFNLEVBQUVLLFFBQVFtQixhQUFhLElBQUkvQix3RUFBYUEsTUFDOU1rQjtRQUNOLE1BQU1jLHFCQUFxQixJQUFJLENBQUNDLFdBQVcsQ0FBQ3JCLFNBQVNFLFFBQVFvQixVQUFVLElBQUlyQixTQUFTc0IsV0FBVyxJQUFJLElBQUlwQixlQUFlVztRQUN0SCxNQUFNVSxVQUFVLElBQUksQ0FBQ0MsV0FBVyxDQUFDeEIsVUFBVW1CLG1CQUFtQk0sYUFBYSxFQUFFTixtQkFBbUJPLFdBQVcsRUFBRVAsbUJBQW1CUSxLQUFLO1FBQ3JJLE1BQU1DLGNBQWMsSUFBSSxDQUFDQyxlQUFlLENBQUM5QixTQUFTQyxVQUFVbUIsbUJBQW1CTSxhQUFhLEVBQUVOLG1CQUFtQk8sV0FBVyxFQUFFUCxtQkFBbUJRLEtBQUssRUFBRTFCO1FBQ3hKLE1BQU02QixlQUFlLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUMvQixVQUFVbUIsbUJBQW1CTSxhQUFhLEVBQUVOLG1CQUFtQk8sV0FBVztRQUNySCxPQUFPLElBQUksQ0FBQ00sNEJBQTRCLENBQUNqQyxTQUFTO1lBQzlDa0MsU0FBU2Q7WUFDVEk7WUFDQUs7WUFDQUU7UUFDSixHQUFHNUIsZUFBZVc7SUFDdEI7SUFDQTs7Ozs7Ozs7S0FRQyxHQUNETyxZQUFZckIsT0FBTyxFQUFFc0IsVUFBVSxFQUFFbkIsYUFBYSxFQUFFVyxTQUFTLEVBQUU7UUFDdkQsSUFBSSxDQUFDbkIsTUFBTSxDQUFDd0MsT0FBTyxDQUFDO1FBQ3BCLElBQUluQyxRQUFRa0MsT0FBTyxFQUFFO1lBQ2pCLE1BQU1FLGdCQUFnQnRELHFFQUFhQSxDQUFDdUQscUJBQXFCLENBQUNyQyxRQUFRa0MsT0FBTztZQUN6RSxJQUFJLENBQUN4QyxPQUFPLENBQUM0QyxVQUFVLENBQUNGO1lBQ3hCLE9BQU9BO1FBQ1gsT0FDSyxJQUFJLENBQUN0QixhQUFjLENBQUNRLGNBQWMsQ0FBQ25CLGVBQWdCO1lBQ3BELElBQUksQ0FBQ1IsTUFBTSxDQUFDNEMsS0FBSyxDQUFDO1lBQ2xCLE1BQU1yRCxtRkFBc0JBLENBQUNJLCtFQUFpQkE7UUFDbEQ7UUFDQSxNQUFNb0MsZ0JBQWdCNUMscUVBQWFBLENBQUMwRCxxQkFBcUIsQ0FBQ2xCLFlBQVlSLFVBQVUyQixhQUFhLEVBQUUsSUFBSSxDQUFDOUMsTUFBTSxFQUFFLElBQUksQ0FBQ0MsU0FBUyxFQUFFTztRQUM1SCxNQUFNdUMsaUJBQWlCdkMsZUFBZXdDO1FBQ3RDLE1BQU1DLGdCQUFnQjdELCtFQUFtQkEsQ0FBQyxJQUFJLENBQUNXLE9BQU8sRUFBRW9CLFdBQVdZLGVBQWV2QyxrRUFBWUEsRUFBRWdCLGVBQWVtQixZQUFZUixVQUFVK0IsZUFBZSxFQUFFSCxnQkFBZ0JwQyxXQUN0S0EsV0FDQSxJQUFJLENBQUNYLE1BQU07UUFDWCxJQUFJLENBQUNELE9BQU8sQ0FBQzRDLFVBQVUsQ0FBQ007UUFDeEIsT0FBT0E7SUFDWDtJQUNBOzs7Ozs7O0tBT0MsR0FDRG5CLFlBQVl4QixRQUFRLEVBQUV5QixhQUFhLEVBQUVDLFdBQVcsRUFBRW1CLFFBQVEsRUFBRTtRQUN4RCxJQUFJLENBQUM3QyxTQUFTRyxRQUFRLEVBQUU7WUFDcEIsSUFBSSxDQUFDVCxNQUFNLENBQUN3QyxPQUFPLENBQUM7WUFDcEIsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDeEMsTUFBTSxDQUFDd0MsT0FBTyxDQUFDO1FBQ3BCLE1BQU1ZLGdCQUFnQi9ELDJFQUFnQyxDQUFDMEMsZUFBZUMsYUFBYTFCLFNBQVNHLFFBQVEsRUFBRSxJQUFJLENBQUNOLE1BQU0sQ0FBQ1csSUFBSSxDQUFDd0MsUUFBUSxFQUFFSDtRQUNqSSxJQUFJLENBQUNwRCxPQUFPLENBQUN3RCxvQkFBb0IsQ0FBQ0g7UUFDbEMsT0FBT0E7SUFDWDtJQUNBOzs7Ozs7OztLQVFDLEdBQ0RqQixnQkFBZ0I5QixPQUFPLEVBQUVDLFFBQVEsRUFBRXlCLGFBQWEsRUFBRUMsV0FBVyxFQUFFbUIsUUFBUSxFQUFFNUMsT0FBTyxFQUFFO1FBQzlFLElBQUksQ0FBQ0QsU0FBU2tELFlBQVksRUFBRTtZQUN4QixJQUFJLENBQUN4RCxNQUFNLENBQUN3QyxPQUFPLENBQUM7WUFDcEIsT0FBTztRQUNYLE9BQ0ssSUFBSSxDQUFDbEMsU0FBU21ELFVBQVUsRUFBRTtZQUMzQixJQUFJLENBQUN6RCxNQUFNLENBQUM0QyxLQUFLLENBQUM7WUFDbEIsT0FBTztRQUNYLE9BQ0ssSUFBSSxDQUFDdEMsU0FBU29ELEtBQUssSUFDbkIsRUFBQ3JELFFBQVFzRCxNQUFNLElBQUksQ0FBQ3RELFFBQVFzRCxNQUFNLENBQUNDLE1BQU0sR0FBRztZQUM3QyxJQUFJLENBQUM1RCxNQUFNLENBQUM0QyxLQUFLLENBQUM7WUFDbEIsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDNUMsTUFBTSxDQUFDd0MsT0FBTyxDQUFDO1FBQ3BCLE1BQU1tQixTQUFTckQsU0FBU29ELEtBQUssR0FDdkJwRSxnRUFBUUEsQ0FBQ3VFLFVBQVUsQ0FBQ3ZELFNBQVNvRCxLQUFLLElBQ2xDLElBQUlwRSxnRUFBUUEsQ0FBQ2UsUUFBUXNELE1BQU07UUFDakMsTUFBTUcsWUFBWXZELFFBQVF1RCxTQUFTLElBQy9CeEQsU0FBU21ELFVBQVUsR0FBRyxJQUFJTSxPQUFPQyxPQUFPLEtBQUs7UUFDakQsTUFBTUMsb0JBQW9CMUQsUUFBUTBELGlCQUFpQixJQUMvQyxDQUFDM0QsU0FBUzRELGNBQWMsSUFBSTVELFNBQVNtRCxVQUFVLElBQzNDLElBQUlNLE9BQU9DLE9BQU8sS0FBSztRQUMvQixNQUFNRyxvQkFBb0I5RSwrRUFBb0MsQ0FBQzBDLGVBQWVDLGFBQWExQixTQUFTa0QsWUFBWSxFQUFFLElBQUksQ0FBQ3JELE1BQU0sQ0FBQ1csSUFBSSxDQUFDd0MsUUFBUSxFQUFFSCxVQUFVUSxPQUFPVSxXQUFXLElBQUlQLFdBQVdHLG1CQUFtQnpFLGtFQUFZQTtRQUN2TixJQUFJLENBQUNPLE9BQU8sQ0FBQ3VFLHdCQUF3QixDQUFDSDtRQUN0QyxPQUFPQTtJQUNYO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNEOUIsaUJBQWlCL0IsUUFBUSxFQUFFeUIsYUFBYSxFQUFFQyxXQUFXLEVBQUU7UUFDbkQsSUFBSSxDQUFDMUIsU0FBU2lFLGFBQWEsRUFBRTtZQUN6QixJQUFJLENBQUN2RSxNQUFNLENBQUN3QyxPQUFPLENBQUM7WUFDcEIsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDeEMsTUFBTSxDQUFDd0MsT0FBTyxDQUFDO1FBQ3BCLE1BQU1nQyxxQkFBcUJuRixnRkFBcUMsQ0FBQzBDLGVBQWVDLGFBQWExQixTQUFTaUUsYUFBYSxFQUFFLElBQUksQ0FBQ3BFLE1BQU0sQ0FBQ1csSUFBSSxDQUFDd0MsUUFBUSxFQUFFaEQsU0FBU29FLElBQUksRUFBRS9ELFdBQy9KTCxTQUFTcUUsd0JBQXdCO1FBQ2pDLElBQUksQ0FBQzVFLE9BQU8sQ0FBQzZFLHlCQUF5QixDQUFDSjtRQUN2QyxPQUFPQTtJQUNYO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNEbEMsNkJBQTZCakMsT0FBTyxFQUFFd0UsV0FBVyxFQUFFckUsYUFBYSxFQUFFVyxTQUFTLEVBQUU7UUFDekUsSUFBSWUsY0FBYztRQUNsQixJQUFJNEMsaUJBQWlCLEVBQUU7UUFDdkIsSUFBSWhCLFlBQVk7UUFDaEIsSUFBSWlCO1FBQ0osSUFBSUYsYUFBYTNDLGFBQWE7WUFDMUJBLGNBQWMyQyxZQUFZM0MsV0FBVyxDQUFDOEMsTUFBTTtZQUM1Q0YsaUJBQWlCeEYsZ0VBQVFBLENBQUN1RSxVQUFVLENBQUNnQixZQUFZM0MsV0FBVyxDQUFDK0MsTUFBTSxFQUFFQyxPQUFPO1lBQzVFcEIsWUFBWSxJQUFJQyxLQUFLb0IsT0FBT04sWUFBWTNDLFdBQVcsQ0FBQzRCLFNBQVMsSUFBSTtZQUNqRWlCLGVBQWUsSUFBSWhCLEtBQUtvQixPQUFPTixZQUFZM0MsV0FBVyxDQUFDK0IsaUJBQWlCLElBQUk7UUFDaEY7UUFDQSxNQUFNeEIsZ0JBQWdCb0MsWUFBWXRDLE9BQU87UUFDekMsT0FBTztZQUNIcEIsV0FBV0EsWUFBWUEsVUFBVWlFLGtCQUFrQixHQUFHO1lBQ3REQyxVQUFVUixZQUFZdEMsT0FBTyxDQUFDK0MsY0FBYztZQUM1Q25DLFVBQVUwQixZQUFZdEMsT0FBTyxDQUFDTixLQUFLO1lBQ25DMEIsUUFBUW1CO1lBQ1J2QyxTQUFTRSxjQUFjOEMsY0FBYztZQUNyQzFELFNBQVNnRCxZQUFZaEQsT0FBTyxFQUFFbUQsVUFBVTtZQUN4Q3hFLGVBQWVBLGlCQUFpQixDQUFDO1lBQ2pDMEIsYUFBYUE7WUFDYnNELFdBQVc7WUFDWDFCLFdBQVdBO1lBQ1h0QyxlQUFlbkIsUUFBUW1CLGFBQWEsSUFBSTtZQUN4Q2lFLFdBQVc7WUFDWFYsY0FBY0E7WUFDZFcsVUFBVWIsWUFBWXpDLFlBQVksRUFBRXNELFlBQVk7WUFDaERDLFdBQVdkLGFBQWEzQyxhQUFheUQsYUFBYTtZQUNsREMsT0FBT3ZGLFFBQVF1RixLQUFLLElBQUk7WUFDeEJDLG9CQUFvQnBELGNBQWNvRCxrQkFBa0IsSUFBSTtZQUN4REMsYUFBYXJELGNBQWNxRCxXQUFXLElBQUk7WUFDMUNDLGtCQUFrQjtRQUN0QjtJQUNKO0FBQ0o7QUFFc0IsQ0FDdEIsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9jYWNoZS9Ub2tlbkNhY2hlLm1qcz9lYzEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aFRva2VuLCBBdXRob3JpdHksIEFjY291bnRFbnRpdHksIGJ1aWxkQWNjb3VudFRvQ2FjaGUsIENhY2hlSGVscGVycywgU2NvcGVTZXQgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VyQXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgYmFzZTY0RGVjb2RlIH0gZnJvbSAnLi4vZW5jb2RlL0Jhc2U2NERlY29kZS5tanMnO1xuaW1wb3J0IHsgY3JlYXRlTmV3R3VpZCB9IGZyb20gJy4uL2NyeXB0by9Ccm93c2VyQ3J5cHRvLm1qcyc7XG5pbXBvcnQgeyBub25Ccm93c2VyRW52aXJvbm1lbnQsIHVuYWJsZVRvTG9hZFRva2VuIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVG9rZW4gY2FjaGUgbWFuYWdlclxyXG4gKi9cclxuY2xhc3MgVG9rZW5DYWNoZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uLCBzdG9yYWdlLCBsb2dnZXIsIGNyeXB0b09iaikge1xyXG4gICAgICAgIHRoaXMuaXNCcm93c2VyRW52aXJvbm1lbnQgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlndXJhdGlvbjtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMuY3J5cHRvT2JqID0gY3J5cHRvT2JqO1xyXG4gICAgfVxyXG4gICAgLy8gTW92ZSBnZXRBbGxBY2NvdW50cyBoZXJlIGFuZCBjYWNoZSB1dGlsaXR5IEFQSXNcclxuICAgIC8qKlxyXG4gICAgICogQVBJIHRvIGxvYWQgdG9rZW5zIHRvIG1zYWwtYnJvd3NlciBjYWNoZS5cclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyBgQXV0aGVudGljYXRpb25SZXN1bHRgIGZvciB0aGUgcmVzcG9uc2UgdGhhdCB3YXMgbG9hZGVkLlxyXG4gICAgICovXHJcbiAgICBsb2FkRXh0ZXJuYWxUb2tlbnMocmVxdWVzdCwgcmVzcG9uc2UsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNCcm93c2VyRW52aXJvbm1lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcihub25Ccm93c2VyRW52aXJvbm1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpZFRva2VuQ2xhaW1zID0gcmVzcG9uc2UuaWRfdG9rZW5cclxuICAgICAgICAgICAgPyBBdXRoVG9rZW4uZXh0cmFjdFRva2VuQ2xhaW1zKHJlc3BvbnNlLmlkX3Rva2VuLCBiYXNlNjREZWNvZGUpXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IGF1dGhvcml0eU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHByb3RvY29sTW9kZTogdGhpcy5jb25maWcuYXV0aC5wcm90b2NvbE1vZGUsXHJcbiAgICAgICAgICAgIGtub3duQXV0aG9yaXRpZXM6IHRoaXMuY29uZmlnLmF1dGgua25vd25BdXRob3JpdGllcyxcclxuICAgICAgICAgICAgY2xvdWREaXNjb3ZlcnlNZXRhZGF0YTogdGhpcy5jb25maWcuYXV0aC5jbG91ZERpc2NvdmVyeU1ldGFkYXRhLFxyXG4gICAgICAgICAgICBhdXRob3JpdHlNZXRhZGF0YTogdGhpcy5jb25maWcuYXV0aC5hdXRob3JpdHlNZXRhZGF0YSxcclxuICAgICAgICAgICAgc2tpcEF1dGhvcml0eU1ldGFkYXRhQ2FjaGU6IHRoaXMuY29uZmlnLmF1dGguc2tpcEF1dGhvcml0eU1ldGFkYXRhQ2FjaGUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhdXRob3JpdHkgPSByZXF1ZXN0LmF1dGhvcml0eVxyXG4gICAgICAgICAgICA/IG5ldyBBdXRob3JpdHkoQXV0aG9yaXR5LmdlbmVyYXRlQXV0aG9yaXR5KHJlcXVlc3QuYXV0aG9yaXR5LCByZXF1ZXN0LmF6dXJlQ2xvdWRPcHRpb25zKSwgdGhpcy5jb25maWcuc3lzdGVtLm5ldHdvcmtDbGllbnQsIHRoaXMuc3RvcmFnZSwgYXV0aG9yaXR5T3B0aW9ucywgdGhpcy5sb2dnZXIsIHJlcXVlc3QuY29ycmVsYXRpb25JZCB8fCBjcmVhdGVOZXdHdWlkKCkpXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlUmVjb3JkQWNjb3VudCA9IHRoaXMubG9hZEFjY291bnQocmVxdWVzdCwgb3B0aW9ucy5jbGllbnRJbmZvIHx8IHJlc3BvbnNlLmNsaWVudF9pbmZvIHx8IFwiXCIsIGlkVG9rZW5DbGFpbXMsIGF1dGhvcml0eSk7XHJcbiAgICAgICAgY29uc3QgaWRUb2tlbiA9IHRoaXMubG9hZElkVG9rZW4ocmVzcG9uc2UsIGNhY2hlUmVjb3JkQWNjb3VudC5ob21lQWNjb3VudElkLCBjYWNoZVJlY29yZEFjY291bnQuZW52aXJvbm1lbnQsIGNhY2hlUmVjb3JkQWNjb3VudC5yZWFsbSk7XHJcbiAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSB0aGlzLmxvYWRBY2Nlc3NUb2tlbihyZXF1ZXN0LCByZXNwb25zZSwgY2FjaGVSZWNvcmRBY2NvdW50LmhvbWVBY2NvdW50SWQsIGNhY2hlUmVjb3JkQWNjb3VudC5lbnZpcm9ubWVudCwgY2FjaGVSZWNvcmRBY2NvdW50LnJlYWxtLCBvcHRpb25zKTtcclxuICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSB0aGlzLmxvYWRSZWZyZXNoVG9rZW4ocmVzcG9uc2UsIGNhY2hlUmVjb3JkQWNjb3VudC5ob21lQWNjb3VudElkLCBjYWNoZVJlY29yZEFjY291bnQuZW52aXJvbm1lbnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlQXV0aGVudGljYXRpb25SZXN1bHQocmVxdWVzdCwge1xyXG4gICAgICAgICAgICBhY2NvdW50OiBjYWNoZVJlY29yZEFjY291bnQsXHJcbiAgICAgICAgICAgIGlkVG9rZW4sXHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuLFxyXG4gICAgICAgICAgICByZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgfSwgaWRUb2tlbkNsYWltcywgYXV0aG9yaXR5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGxvYWQgYWNjb3VudCB0byBtc2FsLWJyb3dzZXIgY2FjaGVcclxuICAgICAqIEBwYXJhbSBpZFRva2VuXHJcbiAgICAgKiBAcGFyYW0gZW52aXJvbm1lbnRcclxuICAgICAqIEBwYXJhbSBjbGllbnRJbmZvXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5VHlwZVxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RIb21lQWNjb3VudElkXHJcbiAgICAgKiBAcmV0dXJucyBgQWNjb3VudEVudGl0eWBcclxuICAgICAqL1xyXG4gICAgbG9hZEFjY291bnQocmVxdWVzdCwgY2xpZW50SW5mbywgaWRUb2tlbkNsYWltcywgYXV0aG9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlRva2VuQ2FjaGUgLSBsb2FkaW5nIGFjY291bnRcIik7XHJcbiAgICAgICAgaWYgKHJlcXVlc3QuYWNjb3VudCkge1xyXG4gICAgICAgICAgICBjb25zdCBhY2NvdW50RW50aXR5ID0gQWNjb3VudEVudGl0eS5jcmVhdGVGcm9tQWNjb3VudEluZm8ocmVxdWVzdC5hY2NvdW50KTtcclxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNldEFjY291bnQoYWNjb3VudEVudGl0eSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhY2NvdW50RW50aXR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghYXV0aG9yaXR5IHx8ICghY2xpZW50SW5mbyAmJiAhaWRUb2tlbkNsYWltcykpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXCJUb2tlbkNhY2hlIC0gaWYgYW4gYWNjb3VudCBpcyBub3QgcHJvdmlkZWQgb24gdGhlIHJlcXVlc3QsIGF1dGhvcml0eSBhbmQgZWl0aGVyIGNsaWVudEluZm8gb3IgaWRUb2tlbiBtdXN0IGJlIHByb3ZpZGVkIGluc3RlYWQuXCIpO1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKHVuYWJsZVRvTG9hZFRva2VuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaG9tZUFjY291bnRJZCA9IEFjY291bnRFbnRpdHkuZ2VuZXJhdGVIb21lQWNjb3VudElkKGNsaWVudEluZm8sIGF1dGhvcml0eS5hdXRob3JpdHlUeXBlLCB0aGlzLmxvZ2dlciwgdGhpcy5jcnlwdG9PYmosIGlkVG9rZW5DbGFpbXMpO1xyXG4gICAgICAgIGNvbnN0IGNsYWltc1RlbmFudElkID0gaWRUb2tlbkNsYWltcz8udGlkO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlZEFjY291bnQgPSBidWlsZEFjY291bnRUb0NhY2hlKHRoaXMuc3RvcmFnZSwgYXV0aG9yaXR5LCBob21lQWNjb3VudElkLCBiYXNlNjREZWNvZGUsIGlkVG9rZW5DbGFpbXMsIGNsaWVudEluZm8sIGF1dGhvcml0eS5ob3N0bmFtZUFuZFBvcnQsIGNsYWltc1RlbmFudElkLCB1bmRlZmluZWQsIC8vIGF1dGhDb2RlUGF5bG9hZFxyXG4gICAgICAgIHVuZGVmaW5lZCwgLy8gbmF0aXZlQWNjb3VudElkXHJcbiAgICAgICAgdGhpcy5sb2dnZXIpO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRBY2NvdW50KGNhY2hlZEFjY291bnQpO1xyXG4gICAgICAgIHJldHVybiBjYWNoZWRBY2NvdW50O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gbG9hZCBpZCB0b2tlbnMgdG8gbXNhbC1icm93c2VyIGNhY2hlXHJcbiAgICAgKiBAcGFyYW0gaWRUb2tlblxyXG4gICAgICogQHBhcmFtIGhvbWVBY2NvdW50SWRcclxuICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxyXG4gICAgICogQHBhcmFtIHRlbmFudElkXHJcbiAgICAgKiBAcmV0dXJucyBgSWRUb2tlbkVudGl0eWBcclxuICAgICAqL1xyXG4gICAgbG9hZElkVG9rZW4ocmVzcG9uc2UsIGhvbWVBY2NvdW50SWQsIGVudmlyb25tZW50LCB0ZW5hbnRJZCkge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UuaWRfdG9rZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlRva2VuQ2FjaGUgLSBubyBpZCB0b2tlbiBmb3VuZCBpbiByZXNwb25zZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJUb2tlbkNhY2hlIC0gbG9hZGluZyBpZCB0b2tlblwiKTtcclxuICAgICAgICBjb25zdCBpZFRva2VuRW50aXR5ID0gQ2FjaGVIZWxwZXJzLmNyZWF0ZUlkVG9rZW5FbnRpdHkoaG9tZUFjY291bnRJZCwgZW52aXJvbm1lbnQsIHJlc3BvbnNlLmlkX3Rva2VuLCB0aGlzLmNvbmZpZy5hdXRoLmNsaWVudElkLCB0ZW5hbnRJZCk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldElkVG9rZW5DcmVkZW50aWFsKGlkVG9rZW5FbnRpdHkpO1xyXG4gICAgICAgIHJldHVybiBpZFRva2VuRW50aXR5O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gbG9hZCBhY2Nlc3MgdG9rZW5zIHRvIG1zYWwtYnJvd3NlciBjYWNoZVxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICogQHBhcmFtIGhvbWVBY2NvdW50SWRcclxuICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxyXG4gICAgICogQHBhcmFtIHRlbmFudElkXHJcbiAgICAgKiBAcmV0dXJucyBgQWNjZXNzVG9rZW5FbnRpdHlgXHJcbiAgICAgKi9cclxuICAgIGxvYWRBY2Nlc3NUb2tlbihyZXF1ZXN0LCByZXNwb25zZSwgaG9tZUFjY291bnRJZCwgZW52aXJvbm1lbnQsIHRlbmFudElkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5hY2Nlc3NfdG9rZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlRva2VuQ2FjaGUgLSBubyBhY2Nlc3MgdG9rZW4gZm91bmQgaW4gcmVzcG9uc2VcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghcmVzcG9uc2UuZXhwaXJlc19pbikge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIlRva2VuQ2FjaGUgLSBubyBleHBpcmF0aW9uIHNldCBvbiB0aGUgYWNjZXNzIHRva2VuLiBDYW5ub3QgYWRkIGl0IHRvIHRoZSBjYWNoZS5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghcmVzcG9uc2Uuc2NvcGUgJiZcclxuICAgICAgICAgICAgKCFyZXF1ZXN0LnNjb3BlcyB8fCAhcmVxdWVzdC5zY29wZXMubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIlRva2VuQ2FjaGUgLSBzY29wZXMgbm90IHNwZWNpZmllZCBpbiB0aGUgcmVxdWVzdCBvciByZXNwb25zZS4gQ2Fubm90IGFkZCB0b2tlbiB0byB0aGUgY2FjaGUuXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlRva2VuQ2FjaGUgLSBsb2FkaW5nIGFjY2VzcyB0b2tlblwiKTtcclxuICAgICAgICBjb25zdCBzY29wZXMgPSByZXNwb25zZS5zY29wZVxyXG4gICAgICAgICAgICA/IFNjb3BlU2V0LmZyb21TdHJpbmcocmVzcG9uc2Uuc2NvcGUpXHJcbiAgICAgICAgICAgIDogbmV3IFNjb3BlU2V0KHJlcXVlc3Quc2NvcGVzKTtcclxuICAgICAgICBjb25zdCBleHBpcmVzT24gPSBvcHRpb25zLmV4cGlyZXNPbiB8fFxyXG4gICAgICAgICAgICByZXNwb25zZS5leHBpcmVzX2luICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZGVkRXhwaXJlc09uID0gb3B0aW9ucy5leHRlbmRlZEV4cGlyZXNPbiB8fFxyXG4gICAgICAgICAgICAocmVzcG9uc2UuZXh0X2V4cGlyZXNfaW4gfHwgcmVzcG9uc2UuZXhwaXJlc19pbikgK1xyXG4gICAgICAgICAgICAgICAgbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xyXG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuRW50aXR5ID0gQ2FjaGVIZWxwZXJzLmNyZWF0ZUFjY2Vzc1Rva2VuRW50aXR5KGhvbWVBY2NvdW50SWQsIGVudmlyb25tZW50LCByZXNwb25zZS5hY2Nlc3NfdG9rZW4sIHRoaXMuY29uZmlnLmF1dGguY2xpZW50SWQsIHRlbmFudElkLCBzY29wZXMucHJpbnRTY29wZXMoKSwgZXhwaXJlc09uLCBleHRlbmRlZEV4cGlyZXNPbiwgYmFzZTY0RGVjb2RlKTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2Uuc2V0QWNjZXNzVG9rZW5DcmVkZW50aWFsKGFjY2Vzc1Rva2VuRW50aXR5KTtcclxuICAgICAgICByZXR1cm4gYWNjZXNzVG9rZW5FbnRpdHk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciBmdW5jdGlvbiB0byBsb2FkIHJlZnJlc2ggdG9rZW5zIHRvIG1zYWwtYnJvd3NlciBjYWNoZVxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICogQHBhcmFtIGhvbWVBY2NvdW50SWRcclxuICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxyXG4gICAgICogQHJldHVybnMgYFJlZnJlc2hUb2tlbkVudGl0eWBcclxuICAgICAqL1xyXG4gICAgbG9hZFJlZnJlc2hUb2tlbihyZXNwb25zZSwgaG9tZUFjY291bnRJZCwgZW52aXJvbm1lbnQpIHtcclxuICAgICAgICBpZiAoIXJlc3BvbnNlLnJlZnJlc2hfdG9rZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlRva2VuQ2FjaGUgLSBubyByZWZyZXNoIHRva2VuIGZvdW5kIGluIHJlc3BvbnNlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlRva2VuQ2FjaGUgLSBsb2FkaW5nIHJlZnJlc2ggdG9rZW5cIik7XHJcbiAgICAgICAgY29uc3QgcmVmcmVzaFRva2VuRW50aXR5ID0gQ2FjaGVIZWxwZXJzLmNyZWF0ZVJlZnJlc2hUb2tlbkVudGl0eShob21lQWNjb3VudElkLCBlbnZpcm9ubWVudCwgcmVzcG9uc2UucmVmcmVzaF90b2tlbiwgdGhpcy5jb25maWcuYXV0aC5jbGllbnRJZCwgcmVzcG9uc2UuZm9jaSwgdW5kZWZpbmVkLCAvLyB1c2VyQXNzZXJ0aW9uSGFzaFxyXG4gICAgICAgIHJlc3BvbnNlLnJlZnJlc2hfdG9rZW5fZXhwaXJlc19pbik7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNldFJlZnJlc2hUb2tlbkNyZWRlbnRpYWwocmVmcmVzaFRva2VuRW50aXR5KTtcclxuICAgICAgICByZXR1cm4gcmVmcmVzaFRva2VuRW50aXR5O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gYEF1dGhlbnRpY2F0aW9uUmVzdWx0YCBmb3IgdGhlIHJlc3VsdC5cclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gaWRUb2tlbk9ialxyXG4gICAgICogQHBhcmFtIGNhY2hlUmVjb3JkXHJcbiAgICAgKiBAcGFyYW0gYXV0aG9yaXR5XHJcbiAgICAgKiBAcmV0dXJucyBgQXV0aGVudGljYXRpb25SZXN1bHRgXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlQXV0aGVudGljYXRpb25SZXN1bHQocmVxdWVzdCwgY2FjaGVSZWNvcmQsIGlkVG9rZW5DbGFpbXMsIGF1dGhvcml0eSkge1xyXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IFwiXCI7XHJcbiAgICAgICAgbGV0IHJlc3BvbnNlU2NvcGVzID0gW107XHJcbiAgICAgICAgbGV0IGV4cGlyZXNPbiA9IG51bGw7XHJcbiAgICAgICAgbGV0IGV4dEV4cGlyZXNPbjtcclxuICAgICAgICBpZiAoY2FjaGVSZWNvcmQ/LmFjY2Vzc1Rva2VuKSB7XHJcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4uc2VjcmV0O1xyXG4gICAgICAgICAgICByZXNwb25zZVNjb3BlcyA9IFNjb3BlU2V0LmZyb21TdHJpbmcoY2FjaGVSZWNvcmQuYWNjZXNzVG9rZW4udGFyZ2V0KS5hc0FycmF5KCk7XHJcbiAgICAgICAgICAgIGV4cGlyZXNPbiA9IG5ldyBEYXRlKE51bWJlcihjYWNoZVJlY29yZC5hY2Nlc3NUb2tlbi5leHBpcmVzT24pICogMTAwMCk7XHJcbiAgICAgICAgICAgIGV4dEV4cGlyZXNPbiA9IG5ldyBEYXRlKE51bWJlcihjYWNoZVJlY29yZC5hY2Nlc3NUb2tlbi5leHRlbmRlZEV4cGlyZXNPbikgKiAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWNjb3VudEVudGl0eSA9IGNhY2hlUmVjb3JkLmFjY291bnQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYXV0aG9yaXR5OiBhdXRob3JpdHkgPyBhdXRob3JpdHkuY2Fub25pY2FsQXV0aG9yaXR5IDogXCJcIixcclxuICAgICAgICAgICAgdW5pcXVlSWQ6IGNhY2hlUmVjb3JkLmFjY291bnQubG9jYWxBY2NvdW50SWQsXHJcbiAgICAgICAgICAgIHRlbmFudElkOiBjYWNoZVJlY29yZC5hY2NvdW50LnJlYWxtLFxyXG4gICAgICAgICAgICBzY29wZXM6IHJlc3BvbnNlU2NvcGVzLFxyXG4gICAgICAgICAgICBhY2NvdW50OiBhY2NvdW50RW50aXR5LmdldEFjY291bnRJbmZvKCksXHJcbiAgICAgICAgICAgIGlkVG9rZW46IGNhY2hlUmVjb3JkLmlkVG9rZW4/LnNlY3JldCB8fCBcIlwiLFxyXG4gICAgICAgICAgICBpZFRva2VuQ2xhaW1zOiBpZFRva2VuQ2xhaW1zIHx8IHt9LFxyXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4sXHJcbiAgICAgICAgICAgIGZyb21DYWNoZTogdHJ1ZSxcclxuICAgICAgICAgICAgZXhwaXJlc09uOiBleHBpcmVzT24sXHJcbiAgICAgICAgICAgIGNvcnJlbGF0aW9uSWQ6IHJlcXVlc3QuY29ycmVsYXRpb25JZCB8fCBcIlwiLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGV4dEV4cGlyZXNPbjogZXh0RXhwaXJlc09uLFxyXG4gICAgICAgICAgICBmYW1pbHlJZDogY2FjaGVSZWNvcmQucmVmcmVzaFRva2VuPy5mYW1pbHlJZCB8fCBcIlwiLFxyXG4gICAgICAgICAgICB0b2tlblR5cGU6IGNhY2hlUmVjb3JkPy5hY2Nlc3NUb2tlbj8udG9rZW5UeXBlIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIHN0YXRlOiByZXF1ZXN0LnN0YXRlIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIGNsb3VkR3JhcGhIb3N0TmFtZTogYWNjb3VudEVudGl0eS5jbG91ZEdyYXBoSG9zdE5hbWUgfHwgXCJcIixcclxuICAgICAgICAgICAgbXNHcmFwaEhvc3Q6IGFjY291bnRFbnRpdHkubXNHcmFwaEhvc3QgfHwgXCJcIixcclxuICAgICAgICAgICAgZnJvbU5hdGl2ZUJyb2tlcjogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBUb2tlbkNhY2hlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub2tlbkNhY2hlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRoVG9rZW4iLCJBdXRob3JpdHkiLCJBY2NvdW50RW50aXR5IiwiYnVpbGRBY2NvdW50VG9DYWNoZSIsIkNhY2hlSGVscGVycyIsIlNjb3BlU2V0IiwiY3JlYXRlQnJvd3NlckF1dGhFcnJvciIsImJhc2U2NERlY29kZSIsImNyZWF0ZU5ld0d1aWQiLCJub25Ccm93c2VyRW52aXJvbm1lbnQiLCJ1bmFibGVUb0xvYWRUb2tlbiIsIlRva2VuQ2FjaGUiLCJjb25zdHJ1Y3RvciIsImNvbmZpZ3VyYXRpb24iLCJzdG9yYWdlIiwibG9nZ2VyIiwiY3J5cHRvT2JqIiwiaXNCcm93c2VyRW52aXJvbm1lbnQiLCJjb25maWciLCJsb2FkRXh0ZXJuYWxUb2tlbnMiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJvcHRpb25zIiwiaWRUb2tlbkNsYWltcyIsImlkX3Rva2VuIiwiZXh0cmFjdFRva2VuQ2xhaW1zIiwidW5kZWZpbmVkIiwiYXV0aG9yaXR5T3B0aW9ucyIsInByb3RvY29sTW9kZSIsImF1dGgiLCJrbm93bkF1dGhvcml0aWVzIiwiY2xvdWREaXNjb3ZlcnlNZXRhZGF0YSIsImF1dGhvcml0eU1ldGFkYXRhIiwic2tpcEF1dGhvcml0eU1ldGFkYXRhQ2FjaGUiLCJhdXRob3JpdHkiLCJnZW5lcmF0ZUF1dGhvcml0eSIsImF6dXJlQ2xvdWRPcHRpb25zIiwic3lzdGVtIiwibmV0d29ya0NsaWVudCIsImNvcnJlbGF0aW9uSWQiLCJjYWNoZVJlY29yZEFjY291bnQiLCJsb2FkQWNjb3VudCIsImNsaWVudEluZm8iLCJjbGllbnRfaW5mbyIsImlkVG9rZW4iLCJsb2FkSWRUb2tlbiIsImhvbWVBY2NvdW50SWQiLCJlbnZpcm9ubWVudCIsInJlYWxtIiwiYWNjZXNzVG9rZW4iLCJsb2FkQWNjZXNzVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJsb2FkUmVmcmVzaFRva2VuIiwiZ2VuZXJhdGVBdXRoZW50aWNhdGlvblJlc3VsdCIsImFjY291bnQiLCJ2ZXJib3NlIiwiYWNjb3VudEVudGl0eSIsImNyZWF0ZUZyb21BY2NvdW50SW5mbyIsInNldEFjY291bnQiLCJlcnJvciIsImdlbmVyYXRlSG9tZUFjY291bnRJZCIsImF1dGhvcml0eVR5cGUiLCJjbGFpbXNUZW5hbnRJZCIsInRpZCIsImNhY2hlZEFjY291bnQiLCJob3N0bmFtZUFuZFBvcnQiLCJ0ZW5hbnRJZCIsImlkVG9rZW5FbnRpdHkiLCJjcmVhdGVJZFRva2VuRW50aXR5IiwiY2xpZW50SWQiLCJzZXRJZFRva2VuQ3JlZGVudGlhbCIsImFjY2Vzc190b2tlbiIsImV4cGlyZXNfaW4iLCJzY29wZSIsInNjb3BlcyIsImxlbmd0aCIsImZyb21TdHJpbmciLCJleHBpcmVzT24iLCJEYXRlIiwiZ2V0VGltZSIsImV4dGVuZGVkRXhwaXJlc09uIiwiZXh0X2V4cGlyZXNfaW4iLCJhY2Nlc3NUb2tlbkVudGl0eSIsImNyZWF0ZUFjY2Vzc1Rva2VuRW50aXR5IiwicHJpbnRTY29wZXMiLCJzZXRBY2Nlc3NUb2tlbkNyZWRlbnRpYWwiLCJyZWZyZXNoX3Rva2VuIiwicmVmcmVzaFRva2VuRW50aXR5IiwiY3JlYXRlUmVmcmVzaFRva2VuRW50aXR5IiwiZm9jaSIsInJlZnJlc2hfdG9rZW5fZXhwaXJlc19pbiIsInNldFJlZnJlc2hUb2tlbkNyZWRlbnRpYWwiLCJjYWNoZVJlY29yZCIsInJlc3BvbnNlU2NvcGVzIiwiZXh0RXhwaXJlc09uIiwic2VjcmV0IiwidGFyZ2V0IiwiYXNBcnJheSIsIk51bWJlciIsImNhbm9uaWNhbEF1dGhvcml0eSIsInVuaXF1ZUlkIiwibG9jYWxBY2NvdW50SWQiLCJnZXRBY2NvdW50SW5mbyIsImZyb21DYWNoZSIsInJlcXVlc3RJZCIsImZhbWlseUlkIiwidG9rZW5UeXBlIiwic3RhdGUiLCJjbG91ZEdyYXBoSG9zdE5hbWUiLCJtc0dyYXBoSG9zdCIsImZyb21OYXRpdmVCcm9rZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/config/Configuration.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_IFRAME_TIMEOUT_MS: () => (/* binding */ DEFAULT_IFRAME_TIMEOUT_MS),\n/* harmony export */   DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS: () => (/* binding */ DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS),\n/* harmony export */   DEFAULT_POPUP_TIMEOUT_MS: () => (/* binding */ DEFAULT_POPUP_TIMEOUT_MS),\n/* harmony export */   DEFAULT_REDIRECT_TIMEOUT_MS: () => (/* binding */ DEFAULT_REDIRECT_TIMEOUT_MS),\n/* harmony export */   buildConfiguration: () => (/* binding */ buildConfiguration)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _navigation_NavigationClient_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../navigation/NavigationClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs\");\n/* harmony import */ var _network_FetchClient_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../network/FetchClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Default timeout for popup windows and iframes in milliseconds\nconst DEFAULT_POPUP_TIMEOUT_MS = 60000;\nconst DEFAULT_IFRAME_TIMEOUT_MS = 10000;\nconst DEFAULT_REDIRECT_TIMEOUT_MS = 30000;\nconst DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;\n/**\r\n * MSAL function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param auth\r\n * @param cache\r\n * @param system\r\n *\r\n * @returns Configuration object\r\n */ function buildConfiguration({ auth: userInputAuth, cache: userInputCache, system: userInputSystem, telemetry: userInputTelemetry }, isBrowserEnvironment) {\n    // Default auth options for browser\n    const DEFAULT_AUTH_OPTIONS = {\n        clientId: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        authority: `${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.DEFAULT_AUTHORITY}`,\n        knownAuthorities: [],\n        cloudDiscoveryMetadata: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        authorityMetadata: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        redirectUri:  false ? 0 : \"\",\n        postLogoutRedirectUri: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n        navigateToLoginRequestUrl: true,\n        clientCapabilities: [],\n        protocolMode: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ProtocolMode.AAD,\n        OIDCOptions: {\n            serverResponseType: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.ServerResponseType.FRAGMENT,\n            defaultScopes: [\n                _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.OPENID_SCOPE,\n                _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.PROFILE_SCOPE,\n                _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.OFFLINE_ACCESS_SCOPE\n            ]\n        },\n        azureCloudOptions: {\n            azureCloudInstance: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.AzureCloudInstance.None,\n            tenant: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        },\n        skipAuthorityMetadataCache: false,\n        supportsNestedAppAuth: false,\n        instanceAware: false\n    };\n    // Default cache options for browser\n    const DEFAULT_CACHE_OPTIONS = {\n        cacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.SessionStorage,\n        temporaryCacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.SessionStorage,\n        storeAuthStateInCookie: false,\n        secureCookies: false,\n        // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage\n        cacheMigrationEnabled: userInputCache && userInputCache.cacheLocation === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserCacheLocation.LocalStorage ? true : false,\n        claimsBasedCachingEnabled: false\n    };\n    // Default logger options for browser\n    const DEFAULT_LOGGER_OPTIONS = {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        loggerCallback: ()=>{\n        // allow users to not set logger call back\n        },\n        logLevel: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Info,\n        piiLoggingEnabled: false\n    };\n    // Default system options for browser\n    const DEFAULT_BROWSER_SYSTEM_OPTIONS = {\n        ..._azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_SYSTEM_OPTIONS,\n        loggerOptions: DEFAULT_LOGGER_OPTIONS,\n        networkClient: isBrowserEnvironment ? new _network_FetchClient_mjs__WEBPACK_IMPORTED_MODULE_6__.FetchClient() : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.StubbedNetworkModule,\n        navigationClient: new _navigation_NavigationClient_mjs__WEBPACK_IMPORTED_MODULE_8__.NavigationClient(),\n        loadFrameTimeout: 0,\n        // If loadFrameTimeout is provided, use that as default.\n        windowHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_POPUP_TIMEOUT_MS,\n        iframeHashTimeout: userInputSystem?.loadFrameTimeout || DEFAULT_IFRAME_TIMEOUT_MS,\n        navigateFrameWait: 0,\n        redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS,\n        asyncPopups: false,\n        allowRedirectInIframe: false,\n        allowNativeBroker: false,\n        nativeBrokerHandshakeTimeout: userInputSystem?.nativeBrokerHandshakeTimeout || DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS,\n        pollIntervalMilliseconds: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.BrowserConstants.DEFAULT_POLL_INTERVAL_MS\n    };\n    const providedSystemOptions = {\n        ...DEFAULT_BROWSER_SYSTEM_OPTIONS,\n        ...userInputSystem,\n        loggerOptions: userInputSystem?.loggerOptions || DEFAULT_LOGGER_OPTIONS\n    };\n    const DEFAULT_TELEMETRY_OPTIONS = {\n        application: {\n            appName: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n            appVersion: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        },\n        client: new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.StubPerformanceClient()\n    };\n    // Throw an error if user has set OIDCOptions without being in OIDC protocol mode\n    if (userInputAuth?.protocolMode !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ProtocolMode.OIDC && userInputAuth?.OIDCOptions) {\n        const logger = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Logger(providedSystemOptions.loggerOptions);\n        logger.warning(JSON.stringify((0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.cannotSetOIDCOptions)));\n    }\n    // Throw an error if user has set allowNativeBroker to true without being in AAD protocol mode\n    if (userInputAuth?.protocolMode && userInputAuth.protocolMode !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ProtocolMode.AAD && providedSystemOptions?.allowNativeBroker) {\n        throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.cannotAllowNativeBroker);\n    }\n    const overlayedConfig = {\n        auth: {\n            ...DEFAULT_AUTH_OPTIONS,\n            ...userInputAuth,\n            OIDCOptions: {\n                ...DEFAULT_AUTH_OPTIONS.OIDCOptions,\n                ...userInputAuth?.OIDCOptions\n            }\n        },\n        cache: {\n            ...DEFAULT_CACHE_OPTIONS,\n            ...userInputCache\n        },\n        system: providedSystemOptions,\n        telemetry: {\n            ...DEFAULT_TELEMETRY_OPTIONS,\n            ...userInputTelemetry\n        }\n    };\n    return overlayedConfig;\n}\n //# sourceMappingURL=Configuration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createController: () => (/* binding */ createController),\n/* harmony export */   createV3Controller: () => (/* binding */ createV3Controller)\n/* harmony export */ });\n/* harmony import */ var _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operatingcontext/NestedAppOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs\");\n/* harmony import */ var _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operatingcontext/StandardOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs\");\n/* harmony import */ var _StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StandardController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs\");\n/* harmony import */ var _NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./NestedAppAuthController.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ async function createV3Controller(config, request) {\n    const standard = new _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardOperatingContext(config);\n    await standard.initialize();\n    return _StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__.StandardController.createController(standard, request);\n}\nasync function createController(config) {\n    const standard = new _operatingcontext_StandardOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardOperatingContext(config);\n    const nestedApp = new _operatingcontext_NestedAppOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_2__.NestedAppOperatingContext(config);\n    const operatingContexts = [\n        standard.initialize(),\n        nestedApp.initialize()\n    ];\n    await Promise.all(operatingContexts);\n    if (nestedApp.isAvailable() && config.auth.supportsNestedAppAuth) {\n        return _NestedAppAuthController_mjs__WEBPACK_IMPORTED_MODULE_3__.NestedAppAuthController.createController(nestedApp);\n    } else if (standard.isAvailable()) {\n        return _StandardController_mjs__WEBPACK_IMPORTED_MODULE_1__.StandardController.createController(standard);\n    } else {\n        // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController\n        return null;\n    }\n}\n //# sourceMappingURL=ControllerFactory.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NvbnRyb2xsZXJzL0NvbnRyb2xsZXJGYWN0b3J5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDOEY7QUFDRjtBQUM5QjtBQUNVO0FBRXhFOzs7Q0FHQyxHQUNELGVBQWVJLG1CQUFtQkMsTUFBTSxFQUFFQyxPQUFPO0lBQzdDLE1BQU1DLFdBQVcsSUFBSU4sb0dBQXdCQSxDQUFDSTtJQUM5QyxNQUFNRSxTQUFTQyxVQUFVO0lBQ3pCLE9BQU9OLHVFQUFrQkEsQ0FBQ08sZ0JBQWdCLENBQUNGLFVBQVVEO0FBQ3pEO0FBQ0EsZUFBZUcsaUJBQWlCSixNQUFNO0lBQ2xDLE1BQU1FLFdBQVcsSUFBSU4sb0dBQXdCQSxDQUFDSTtJQUM5QyxNQUFNSyxZQUFZLElBQUlWLHNHQUF5QkEsQ0FBQ0s7SUFDaEQsTUFBTU0sb0JBQW9CO1FBQUNKLFNBQVNDLFVBQVU7UUFBSUUsVUFBVUYsVUFBVTtLQUFHO0lBQ3pFLE1BQU1JLFFBQVFDLEdBQUcsQ0FBQ0Y7SUFDbEIsSUFBSUQsVUFBVUksV0FBVyxNQUFNVCxPQUFPVSxJQUFJLENBQUNDLHFCQUFxQixFQUFFO1FBQzlELE9BQU9iLGlGQUF1QkEsQ0FBQ00sZ0JBQWdCLENBQUNDO0lBQ3BELE9BQ0ssSUFBSUgsU0FBU08sV0FBVyxJQUFJO1FBQzdCLE9BQU9aLHVFQUFrQkEsQ0FBQ08sZ0JBQWdCLENBQUNGO0lBQy9DLE9BQ0s7UUFDRCwwR0FBMEc7UUFDMUcsT0FBTztJQUNYO0FBQ0o7QUFFZ0QsQ0FDaEQsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9jb250cm9sbGVycy9Db250cm9sbGVyRmFjdG9yeS5tanM/ZTNkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IE5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQgfSBmcm9tICcuLi9vcGVyYXRpbmdjb250ZXh0L05lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQubWpzJztcbmltcG9ydCB7IFN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dCB9IGZyb20gJy4uL29wZXJhdGluZ2NvbnRleHQvU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBTdGFuZGFyZENvbnRyb2xsZXIgfSBmcm9tICcuL1N0YW5kYXJkQ29udHJvbGxlci5tanMnO1xuaW1wb3J0IHsgTmVzdGVkQXBwQXV0aENvbnRyb2xsZXIgfSBmcm9tICcuL05lc3RlZEFwcEF1dGhDb250cm9sbGVyLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVWM0NvbnRyb2xsZXIoY29uZmlnLCByZXF1ZXN0KSB7XHJcbiAgICBjb25zdCBzdGFuZGFyZCA9IG5ldyBTdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQoY29uZmlnKTtcclxuICAgIGF3YWl0IHN0YW5kYXJkLmluaXRpYWxpemUoKTtcclxuICAgIHJldHVybiBTdGFuZGFyZENvbnRyb2xsZXIuY3JlYXRlQ29udHJvbGxlcihzdGFuZGFyZCwgcmVxdWVzdCk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ29udHJvbGxlcihjb25maWcpIHtcclxuICAgIGNvbnN0IHN0YW5kYXJkID0gbmV3IFN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dChjb25maWcpO1xyXG4gICAgY29uc3QgbmVzdGVkQXBwID0gbmV3IE5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQoY29uZmlnKTtcclxuICAgIGNvbnN0IG9wZXJhdGluZ0NvbnRleHRzID0gW3N0YW5kYXJkLmluaXRpYWxpemUoKSwgbmVzdGVkQXBwLmluaXRpYWxpemUoKV07XHJcbiAgICBhd2FpdCBQcm9taXNlLmFsbChvcGVyYXRpbmdDb250ZXh0cyk7XHJcbiAgICBpZiAobmVzdGVkQXBwLmlzQXZhaWxhYmxlKCkgJiYgY29uZmlnLmF1dGguc3VwcG9ydHNOZXN0ZWRBcHBBdXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIE5lc3RlZEFwcEF1dGhDb250cm9sbGVyLmNyZWF0ZUNvbnRyb2xsZXIobmVzdGVkQXBwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHN0YW5kYXJkLmlzQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICByZXR1cm4gU3RhbmRhcmRDb250cm9sbGVyLmNyZWF0ZUNvbnRyb2xsZXIoc3RhbmRhcmQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gU2luY2UgbmVpdGhlciBvZiB0aGUgYWN0dWFsIG9wZXJhdGluZyBjb250ZXh0cyBhcmUgYXZhaWxhYmxlIGtlZXAgdGhlIFVua25vd25PcGVyYXRpbmdDb250ZXh0Q29udHJvbGxlclxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNvbnRyb2xsZXIsIGNyZWF0ZVYzQ29udHJvbGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udHJvbGxlckZhY3RvcnkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIk5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQiLCJTdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQiLCJTdGFuZGFyZENvbnRyb2xsZXIiLCJOZXN0ZWRBcHBBdXRoQ29udHJvbGxlciIsImNyZWF0ZVYzQ29udHJvbGxlciIsImNvbmZpZyIsInJlcXVlc3QiLCJzdGFuZGFyZCIsImluaXRpYWxpemUiLCJjcmVhdGVDb250cm9sbGVyIiwibmVzdGVkQXBwIiwib3BlcmF0aW5nQ29udGV4dHMiLCJQcm9taXNlIiwiYWxsIiwiaXNBdmFpbGFibGUiLCJhdXRoIiwic3VwcG9ydHNOZXN0ZWRBcHBBdXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/controllers/ControllerFactory.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppAuthController: () => (/* binding */ NestedAppAuthController)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/CryptoOps.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs\");\n/* harmony import */ var _naa_mapping_NestedAppAuthAdapter_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../naa/mapping/NestedAppAuthAdapter.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs\");\n/* harmony import */ var _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/NestedAppAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs\");\n/* harmony import */ var _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../event/EventHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cache/BrowserCacheManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs\");\n/* harmony import */ var _cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/AccountManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NestedAppAuthController {\n    constructor(operatingContext){\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment() ? new _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_0__.CryptoOps(this.logger, this.performanceClient) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CRYPTO_IMPLEMENTATION;\n        // Initialize the browser storage class.\n        this.browserStorage = this.operatingContext.isBrowserEnvironment() ? new _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.buildStaticAuthorityOptions)(this.config.auth)) : (0,_cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_BROWSER_CACHE_MANAGER)(this.config.auth.clientId, this.logger);\n        this.eventHandler = new _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_4__.EventHandler(this.logger);\n        this.nestedAppAuthAdapter = new _naa_mapping_NestedAppAuthAdapter_mjs__WEBPACK_IMPORTED_MODULE_5__.NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n        // Set the active account if available\n        const accountContext = this.bridgeProxy.getAccountContext();\n        if (accountContext) {\n            const cachedAccount = (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccount)(accountContext, this.logger, this.browserStorage);\n            (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.setActiveAccount)(cachedAccount, this.browserStorage);\n        }\n    }\n    /**\r\n     * Factory function to create a new instance of NestedAppAuthController\r\n     * @param operatingContext\r\n     * @returns Promise<IController>\r\n     */ static async createController(operatingContext) {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n    /**\r\n     * Specific implementation of initialize function for NestedAppAuthController\r\n     * @returns\r\n     */ initialize() {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n    /**\r\n     * Validate the incoming request and add correlationId if not present\r\n     * @param request\r\n     * @returns\r\n     */ ensureValidRequest(request) {\n        if (request?.correlationId) {\n            return request;\n        }\n        return {\n            ...request,\n            correlationId: this.browserCrypto.createNewGuid()\n        };\n    }\n    /**\r\n     * Internal implementation of acquireTokenInteractive flow\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenInteractive(request) {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Popup, validRequest);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenPopup, validRequest.correlationId);\n        atPopupMeasurement?.add({\n            nestedAppAuthRequest: true\n        });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(naaRequest);\n            const result = {\n                ...this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp)\n            };\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Popup, result);\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length\n            });\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Popup, null, e);\n            atPopupMeasurement.end({\n                success: false\n            }, e);\n            throw error;\n        }\n    }\n    /**\r\n     * Internal implementation of acquireTokenSilent flow\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenSilentInternal(request) {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, validRequest);\n        // Look for tokens in the cache first\n        const result = await this.acquireTokenFromCache(validRequest);\n        if (result) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, result);\n            return result;\n        }\n        // proceed with acquiring tokens via the host\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SsoSilent, validRequest.correlationId);\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0\n        });\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true\n        });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            // cache the tokens in the response\n            await this.hydrateCache(result, request);\n            this.browserStorage.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, result);\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, null, e);\n            ssoSilentMeasurement?.end({\n                success: false\n            }, e);\n            throw error;\n        }\n    }\n    /**\r\n     * acquires tokens from cache\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenFromCache(request) {\n        const atsMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilent, request.correlationId);\n        atsMeasurement?.add({\n            nestedAppAuthRequest: true\n        });\n        // if the request has claims, we cannot look up in the cache\n        if (request.claims) {\n            this.logger.verbose(\"Claims are present in the request, skipping cache lookup\");\n            return null;\n        }\n        // respect cache lookup policy\n        let result = null;\n        switch(request.cacheLookupPolicy){\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.CacheLookupPolicy.Default:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.CacheLookupPolicy.AccessToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.CacheLookupPolicy.AccessTokenAndRefreshToken:\n                result = await this.acquireTokenFromCacheInternal(request);\n                break;\n            default:\n                return null;\n        }\n        if (result) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, result);\n            atsMeasurement?.add({\n                accessTokenSize: result?.accessToken.length,\n                idTokenSize: result?.idToken.length\n            });\n            atsMeasurement?.end({\n                success: true\n            });\n            return result;\n        }\n        this.logger.error(\"Cached tokens are not found for the account, proceeding with silent token request.\");\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_7__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.InteractionType.Silent, null);\n        atsMeasurement?.end({\n            success: false\n        });\n        return null;\n    }\n    /**\r\n     *\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenFromCacheInternal(request) {\n        const accountContext = this.bridgeProxy.getAccountContext();\n        let currentAccount = null;\n        if (accountContext) {\n            const hubAccount = (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccount)(accountContext, this.logger, this.browserStorage);\n            // always prioritize for hub account context, the reqirement of `request.account` will be removed soon\n            currentAccount = hubAccount || request.account;\n        }\n        // fall back to brokering if no cached account is found\n        if (!currentAccount) {\n            this.logger.verbose(\"No active account found, falling back to the host\");\n            return Promise.resolve(null);\n        }\n        this.logger.verbose(\"active account found, attempting to acquire token silently\");\n        const authRequest = {\n            ...request,\n            correlationId: request.correlationId || this.browserCrypto.createNewGuid(),\n            authority: request.authority || currentAccount.environment,\n            scopes: request.scopes?.length ? request.scopes : [\n                ..._azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.OIDC_DEFAULT_SCOPES\n            ]\n        };\n        // fetch access token and check for expiry\n        const tokenKeys = this.browserStorage.getTokenKeys();\n        const cachedAccessToken = this.browserStorage.getAccessToken(currentAccount, authRequest, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);\n        // If there is no access token, log it and return null\n        if (!cachedAccessToken) {\n            this.logger.verbose(\"No cached access token found\");\n            return Promise.resolve(null);\n        } else if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.wasClockTurnedBack(cachedAccessToken.cachedAt) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.isTokenExpired(cachedAccessToken.expiresOn, this.config.system.tokenRenewalOffsetSeconds)) {\n            this.logger.verbose(\"Cached access token has expired\");\n            return Promise.resolve(null);\n        }\n        const cachedIdToken = this.browserStorage.getIdToken(currentAccount, tokenKeys, currentAccount.tenantId, this.performanceClient, authRequest.correlationId);\n        if (!cachedIdToken) {\n            this.logger.verbose(\"No cached id token found\");\n            return Promise.resolve(null);\n        }\n        return this.nestedAppAuthAdapter.toAuthenticationResultFromCache(currentAccount, cachedIdToken, cachedAccessToken, authRequest, authRequest.correlationId);\n    }\n    /**\r\n     * acquireTokenPopup flow implementation\r\n     * @param request\r\n     * @returns\r\n     */ async acquireTokenPopup(request) {\n        return this.acquireTokenInteractive(request);\n    }\n    /**\r\n     * acquireTokenRedirect flow is not supported in nested app auth\r\n     * @param request\r\n     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * acquireTokenSilent flow implementation\r\n     * @param silentRequest\r\n     * @returns\r\n     */ async acquireTokenSilent(silentRequest) {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n    /**\r\n     * Hybrid flow is not currently supported in nested app auth\r\n     * @param request\r\n     */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * acquireTokenNative flow is not currently supported in nested app auth\r\n     * @param request\r\n     * @param apiId\r\n     * @param accountId\r\n     */ acquireTokenNative(request, apiId, accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * acquireTokenByRefreshToken flow is not currently supported in nested app auth\r\n     * @param commonRequest\r\n     * @param silentRequest\r\n     */ acquireTokenByRefreshToken(commonRequest, silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     * @param eventTypes\r\n     */ addEventCallback(callback, eventTypes) {\n        return this.eventHandler.addEventCallback(callback, eventTypes);\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // #region Account APIs\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAllAccounts)(this.logger, this.browserStorage, this.isBrowserEnv(), accountFilter);\n    }\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */ getAccount(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccount)(accountFilter, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param username\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByUsername(username) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccountByUsername)(username, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByHomeId(homeAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccountByHomeId)(homeAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByLocalId(localAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getAccountByLocalId)(localAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        /*\r\n         * StandardController uses this to allow the developer to set the active account\r\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\r\n         */ return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.setActiveAccount)(account, this.browserStorage);\n    }\n    /**\r\n     * Gets the currently active account\r\n     */ getActiveAccount() {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_6__.getActiveAccount)(this.browserStorage);\n    }\n    // #endregion\n    handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return Promise.resolve(null);\n    }\n    loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        return this.acquireTokenInteractive(request || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_REQUEST);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        return this.acquireTokenSilentInternal(request);\n    }\n    getTokenCache() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    /**\r\n     * Returns the logger instance\r\n     */ getLogger() {\n        return this.logger;\n    }\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */ setLogger(logger) {\n        this.logger = logger;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku, version) {\n        /*\r\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\r\n         * we do nothing here\r\n         */ return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient) {\n        this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n    }\n    getConfiguration() {\n        return this.config;\n    }\n    isBrowserEnv() {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto() {\n        return this.browserCrypto;\n    }\n    getPerformanceClient() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    getRedirectResponse() {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest) {\n        throw _error_NestedAppAuthError_mjs__WEBPACK_IMPORTED_MODULE_12__.NestedAppAuthError.createUnsupportedError();\n    }\n    async hydrateCache(result, request) {\n        this.logger.verbose(\"hydrateCache called\");\n        const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_13__.AccountEntity.createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);\n        this.browserStorage.setAccount(accountEntity);\n        return this.browserStorage.hydrateCache(result, request);\n    }\n}\n //# sourceMappingURL=NestedAppAuthController.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardController: () => (/* binding */ StandardController)\n/* harmony export */ });\n/* harmony import */ var _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/CryptoOps.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/* harmony import */ var _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cache/BrowserCacheManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/BrowserCacheManager.mjs\");\n/* harmony import */ var _cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../cache/AccountManager.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/AccountManager.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../event/EventHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs\");\n/* harmony import */ var _interaction_client_PopupClient_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../interaction_client/PopupClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs\");\n/* harmony import */ var _interaction_client_RedirectClient_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../interaction_client/RedirectClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs\");\n/* harmony import */ var _interaction_client_SilentIframeClient_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../interaction_client/SilentIframeClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs\");\n/* harmony import */ var _interaction_client_SilentRefreshClient_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../interaction_client/SilentRefreshClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs\");\n/* harmony import */ var _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/TokenCache.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/TokenCache.mjs\");\n/* harmony import */ var _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../interaction_client/NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../error/NativeAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\");\n/* harmony import */ var _interaction_client_SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../interaction_client/SilentCacheClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs\");\n/* harmony import */ var _interaction_client_SilentAuthCodeClient_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../interaction_client/SilentAuthCodeClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../request/RequestHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function getAccountType(account) {\n    const idTokenClaims = account?.idTokenClaims;\n    if (idTokenClaims?.tfp || idTokenClaims?.acr) {\n        return \"B2C\";\n    }\n    if (!idTokenClaims?.tid) {\n        return undefined;\n    } else if (idTokenClaims?.tid === \"9188040d-6c67-4c5b-b112-36a304b66dad\") {\n        return \"MSA\";\n    }\n    return \"AAD\";\n}\nfunction preflightCheck(initialized, performanceEvent) {\n    try {\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.preflightCheck)(initialized);\n    } catch (e) {\n        performanceEvent.end({\n            success: false\n        }, e);\n        throw e;\n    }\n}\nclass StandardController {\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration Object for the MSAL PublicClientApplication instance\r\n     */ constructor(operatingContext){\n        this.operatingContext = operatingContext;\n        this.isBrowserEnvironment = this.operatingContext.isBrowserEnvironment();\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        this.initialized = false;\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize the network module class.\n        this.networkClient = this.config.system.networkClient;\n        // Initialize the navigation client class.\n        this.navigationClient = this.config.system.navigationClient;\n        // Initialize redirectResponse Map\n        this.redirectResponse = new Map();\n        // Initial hybrid spa map\n        this.hybridAuthCodeResponses = new Map();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n        // Initialize the crypto class.\n        this.browserCrypto = this.isBrowserEnvironment ? new _crypto_CryptoOps_mjs__WEBPACK_IMPORTED_MODULE_1__.CryptoOps(this.logger, this.performanceClient) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_CRYPTO_IMPLEMENTATION;\n        this.eventHandler = new _event_EventHandler_mjs__WEBPACK_IMPORTED_MODULE_3__.EventHandler(this.logger);\n        // Initialize the browser storage class.\n        this.browserStorage = this.isBrowserEnvironment ? new _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger, (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.buildStaticAuthorityOptions)(this.config.auth), this.performanceClient) : (0,_cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_BROWSER_CACHE_MANAGER)(this.config.auth.clientId, this.logger);\n        // initialize in memory storage for native flows\n        const nativeCacheOptions = {\n            cacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.BrowserCacheLocation.MemoryStorage,\n            temporaryCacheLocation: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.BrowserCacheLocation.MemoryStorage,\n            storeAuthStateInCookie: false,\n            secureCookies: false,\n            cacheMigrationEnabled: false,\n            claimsBasedCachingEnabled: false\n        };\n        this.nativeInternalStorage = new _cache_BrowserCacheManager_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserCacheManager(this.config.auth.clientId, nativeCacheOptions, this.browserCrypto, this.logger, undefined, this.performanceClient);\n        // Initialize the token cache\n        this.tokenCache = new _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_7__.TokenCache(this.config, this.browserStorage, this.logger, this.browserCrypto);\n        this.activeSilentTokenRequests = new Map();\n        // Register listener functions\n        this.trackPageVisibility = this.trackPageVisibility.bind(this);\n        // Register listener functions\n        this.trackPageVisibilityWithMeasurement = this.trackPageVisibilityWithMeasurement.bind(this);\n        // account storage events\n        this.listeningToStorageEvents = false;\n        this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);\n    }\n    static async createController(operatingContext, request) {\n        const controller = new StandardController(operatingContext);\n        await controller.initialize(request);\n        return controller;\n    }\n    trackPageVisibility(correlationId) {\n        if (!correlationId) {\n            return;\n        }\n        this.logger.info(\"Perf: Visibility change detected\");\n        this.performanceClient.incrementFields({\n            visibilityChangeCount: 1\n        }, correlationId);\n    }\n    /**\r\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\r\n     * @param request {?InitializeApplicationRequest} correlation id\r\n     */ async initialize(request) {\n        this.logger.trace(\"initialize called\");\n        if (this.initialized) {\n            this.logger.info(\"initialize has already been called, exiting early.\");\n            return;\n        }\n        if (!this.isBrowserEnvironment) {\n            this.logger.info(\"in non-browser environment, exiting early.\");\n            this.initialized = true;\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.INITIALIZE_END);\n            return;\n        }\n        const initCorrelationId = request?.correlationId || this.getRequestCorrelationId();\n        const allowNativeBroker = this.config.system.allowNativeBroker;\n        const initMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.InitializeClientApplication, initCorrelationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.INITIALIZE_START);\n        if (allowNativeBroker) {\n            try {\n                this.nativeExtensionProvider = await _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.createProvider(this.logger, this.config.system.nativeBrokerHandshakeTimeout, this.performanceClient);\n            } catch (e) {\n                this.logger.verbose(e);\n            }\n        }\n        if (!this.config.cache.claimsBasedCachingEnabled) {\n            this.logger.verbose(\"Claims-based caching is disabled. Clearing the previous cache with claims\");\n            await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.browserStorage.clearTokensAndKeysWithClaims.bind(this.browserStorage), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.ClearTokensAndKeysWithClaims, this.logger, this.performanceClient, initCorrelationId)(this.performanceClient, initCorrelationId);\n        }\n        this.initialized = true;\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.INITIALIZE_END);\n        initMeasurement.end({\n            allowNativeBroker,\n            success: true\n        });\n    }\n    // #region Redirect Flow\n    /**\r\n     * Event handler function which allows users to fire events after the PublicClientApplication object\r\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\r\n     * auth flows.\r\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\r\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\r\n     */ async handleRedirectPromise(hash) {\n        this.logger.verbose(\"handleRedirectPromise called\");\n        // Block token acquisition before initialize has been called\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.blockAPICallsBeforeInitialize)(this.initialized);\n        if (this.isBrowserEnvironment) {\n            /**\r\n             * Store the promise on the PublicClientApplication instance if this is the first invocation of handleRedirectPromise,\r\n             * otherwise return the promise from the first invocation. Prevents race conditions when handleRedirectPromise is called\r\n             * several times concurrently.\r\n             */ const redirectResponseKey = hash || \"\";\n            let response = this.redirectResponse.get(redirectResponseKey);\n            if (typeof response === \"undefined\") {\n                response = this.handleRedirectPromiseInternal(hash);\n                this.redirectResponse.set(redirectResponseKey, response);\n                this.logger.verbose(\"handleRedirectPromise has been called for the first time, storing the promise\");\n            } else {\n                this.logger.verbose(\"handleRedirectPromise has been called previously, returning the result from the first call\");\n            }\n            return response;\n        }\n        this.logger.verbose(\"handleRedirectPromise returns null, not browser environment\");\n        return null;\n    }\n    /**\r\n     * The internal details of handleRedirectPromise. This is separated out to a helper to allow handleRedirectPromise to memoize requests\r\n     * @param hash\r\n     * @returns\r\n     */ async handleRedirectPromiseInternal(hash) {\n        const loggedInAccounts = this.getAllAccounts();\n        const request = this.browserStorage.getCachedNativeRequest();\n        const useNative = request && _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider) && this.nativeExtensionProvider && !hash;\n        const correlationId = useNative ? request?.correlationId : this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.TemporaryCacheKeys.CORRELATION_ID, true) || \"\";\n        const rootMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenRedirect, correlationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.HANDLE_REDIRECT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect);\n        let redirectResponse;\n        if (useNative && this.nativeExtensionProvider) {\n            this.logger.trace(\"handleRedirectPromise - acquiring token from native platform\");\n            const nativeClient = new _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.handleRedirectPromise, this.performanceClient, this.nativeExtensionProvider, request.accountId, this.nativeInternalStorage, request.correlationId);\n            redirectResponse = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(nativeClient.handleRedirectPromise.bind(nativeClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.HandleNativeRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(this.performanceClient, rootMeasurement.event.correlationId);\n        } else {\n            this.logger.trace(\"handleRedirectPromise - acquiring token from web flow\");\n            const redirectClient = this.createRedirectClient(correlationId);\n            redirectResponse = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(redirectClient.handleRedirectPromise.bind(redirectClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.HandleRedirectPromiseMeasurement, this.logger, this.performanceClient, rootMeasurement.event.correlationId)(hash, rootMeasurement);\n        }\n        return redirectResponse.then((result)=>{\n            if (result) {\n                // Emit login event if number of accounts change\n                const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;\n                if (isLoggingIn) {\n                    this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, result);\n                    this.logger.verbose(\"handleRedirectResponse returned result, login success\");\n                } else {\n                    this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, result);\n                    this.logger.verbose(\"handleRedirectResponse returned result, acquire token success\");\n                }\n                rootMeasurement.end({\n                    success: true,\n                    accountType: getAccountType(result.account)\n                });\n            } else {\n                /*\r\n                 * Instrument an event only if an error code is set. Otherwise, discard it when the redirect response\r\n                 * is empty and the error code is missing.\r\n                 */ if (rootMeasurement.event.errorCode) {\n                    rootMeasurement.end({\n                        success: false\n                    });\n                } else {\n                    rootMeasurement.discard();\n                }\n            }\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.HANDLE_REDIRECT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect);\n            return result;\n        }).catch((e)=>{\n            const eventError = e;\n            // Emit login event if there is an account\n            if (loggedInAccounts.length > 0) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, eventError);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, eventError);\n            }\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.HANDLE_REDIRECT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect);\n            rootMeasurement.end({\n                success: false\n            }, eventError);\n            throw e;\n        });\n    }\n    /**\r\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\r\n     * the page, so any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ async acquireTokenRedirect(request) {\n        // Preflight request\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"acquireTokenRedirect called\", correlationId);\n        const atrMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenPreRedirect, correlationId);\n        atrMeasurement.add({\n            accountType: getAccountType(request.account),\n            scenarioId: request.scenarioId\n        });\n        // Override on request only if set, as onRedirectNavigate field is deprecated\n        const onRedirectNavigateCb = request.onRedirectNavigate;\n        if (onRedirectNavigateCb) {\n            request.onRedirectNavigate = (url)=>{\n                const navigate = typeof onRedirectNavigateCb === \"function\" ? onRedirectNavigateCb(url) : undefined;\n                if (navigate !== false) {\n                    atrMeasurement.end({\n                        success: true\n                    });\n                } else {\n                    atrMeasurement.discard();\n                }\n                return navigate;\n            };\n        } else {\n            const configOnRedirectNavigateCb = this.config.auth.onRedirectNavigate;\n            this.config.auth.onRedirectNavigate = (url)=>{\n                const navigate = typeof configOnRedirectNavigateCb === \"function\" ? configOnRedirectNavigateCb(url) : undefined;\n                if (navigate !== false) {\n                    atrMeasurement.end({\n                        success: true\n                    });\n                } else {\n                    atrMeasurement.discard();\n                }\n                return navigate;\n            };\n        }\n        // If logged in, emit acquire token events\n        const isLoggedIn = this.getAllAccounts().length > 0;\n        try {\n            (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectPreflightCheck)(this.initialized, this.config);\n            this.browserStorage.setInteractionInProgress(true);\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, request);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, request);\n            }\n            let result;\n            if (this.nativeExtensionProvider && this.canUseNative(request)) {\n                const nativeClient = new _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenRedirect, this.performanceClient, this.nativeExtensionProvider, this.getNativeAccountId(request), this.nativeInternalStorage, correlationId);\n                result = nativeClient.acquireTokenRedirect(request, atrMeasurement).catch((e)=>{\n                    if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                        this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        const redirectClient = this.createRedirectClient(correlationId);\n                        return redirectClient.acquireToken(request);\n                    } else if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.InteractionRequiredAuthError) {\n                        this.logger.verbose(\"acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow\");\n                        const redirectClient = this.createRedirectClient(correlationId);\n                        return redirectClient.acquireToken(request);\n                    }\n                    this.browserStorage.setInteractionInProgress(false);\n                    throw e;\n                });\n            } else {\n                const redirectClient = this.createRedirectClient(correlationId);\n                result = redirectClient.acquireToken(request);\n            }\n            return await result;\n        } catch (e) {\n            atrMeasurement.end({\n                success: false\n            }, e);\n            if (isLoggedIn) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, e);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Redirect, null, e);\n            }\n            throw e;\n        }\n    }\n    // #endregion\n    // #region Popup Flow\n    /**\r\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ acquireTokenPopup(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenPopup, correlationId);\n        atPopupMeasurement.add({\n            scenarioId: request.scenarioId,\n            accountType: getAccountType(request.account)\n        });\n        try {\n            this.logger.verbose(\"acquireTokenPopup called\", correlationId);\n            preflightCheck(this.initialized, atPopupMeasurement);\n            this.browserStorage.setInteractionInProgress(true);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n        // If logged in, emit acquire token events\n        const loggedInAccounts = this.getAllAccounts();\n        if (loggedInAccounts.length > 0) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, request);\n        } else {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, request);\n        }\n        let result;\n        if (this.canUseNative(request)) {\n            result = this.acquireTokenNative({\n                ...request,\n                correlationId\n            }, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenPopup).then((response)=>{\n                this.browserStorage.setInteractionInProgress(false);\n                atPopupMeasurement.end({\n                    success: true,\n                    isNativeBroker: true,\n                    accountType: getAccountType(response.account)\n                });\n                return response;\n            }).catch((e)=>{\n                if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                    const popupClient = this.createPopupClient(correlationId);\n                    return popupClient.acquireToken(request);\n                } else if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.InteractionRequiredAuthError) {\n                    this.logger.verbose(\"acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow\");\n                    const popupClient = this.createPopupClient(correlationId);\n                    return popupClient.acquireToken(request);\n                }\n                this.browserStorage.setInteractionInProgress(false);\n                throw e;\n            });\n        } else {\n            const popupClient = this.createPopupClient(correlationId);\n            result = popupClient.acquireToken(request);\n        }\n        return result.then((result)=>{\n            /*\r\n             *  If logged in, emit acquire token events\r\n             */ const isLoggingIn = loggedInAccounts.length < this.getAllAccounts().length;\n            if (isLoggingIn) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, result);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, result);\n            }\n            atPopupMeasurement.end({\n                success: true,\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n                accountType: getAccountType(result.account)\n            });\n            return result;\n        }).catch((e)=>{\n            if (loggedInAccounts.length > 0) {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, null, e);\n            } else {\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGIN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Popup, null, e);\n            }\n            atPopupMeasurement.end({\n                success: false\n            }, e);\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        });\n    }\n    trackPageVisibilityWithMeasurement() {\n        const measurement = this.ssoSilentMeasurement || this.acquireTokenByCodeAsyncMeasurement;\n        if (!measurement) {\n            return;\n        }\n        this.logger.info(\"Perf: Visibility change detected in \", measurement.event.name);\n        measurement.increment({\n            visibilityChangeCount: 1\n        });\n    }\n    // #endregion\n    // #region Silent Flow\n    /**\r\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\r\n     * - Any browser using a form of Intelligent Tracking Prevention\r\n     * - If there is not an established session with the service\r\n     *\r\n     * In these cases, the request must be done inside a popup or full frame redirect.\r\n     *\r\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\r\n     *\r\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\r\n     * you session on the server still exists.\r\n     * @param request {@link SsoSilentRequest}\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async ssoSilent(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        const validRequest = {\n            ...request,\n            // will be PromptValue.NONE or PromptValue.NO_SESSION\n            prompt: request.prompt,\n            correlationId: correlationId\n        };\n        this.ssoSilentMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SsoSilent, correlationId);\n        this.ssoSilentMeasurement?.add({\n            scenarioId: request.scenarioId,\n            accountType: getAccountType(request.account)\n        });\n        preflightCheck(this.initialized, this.ssoSilentMeasurement);\n        this.ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0\n        });\n        document.addEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        this.logger.verbose(\"ssoSilent called\", correlationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, validRequest);\n        let result;\n        if (this.canUseNative(validRequest)) {\n            result = this.acquireTokenNative(validRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.ssoSilent).catch((e)=>{\n                // If native token acquisition fails for availability reasons fallback to standard flow\n                if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                    this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                    const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);\n                    return silentIframeClient.acquireToken(validRequest);\n                }\n                throw e;\n            });\n        } else {\n            const silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);\n            result = silentIframeClient.acquireToken(validRequest);\n        }\n        return result.then((response)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, response);\n            this.ssoSilentMeasurement?.end({\n                success: true,\n                isNativeBroker: response.fromNativeBroker,\n                accessTokenSize: response.accessToken.length,\n                idTokenSize: response.idToken.length,\n                accountType: getAccountType(response.account)\n            });\n            return response;\n        }).catch((e)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.SSO_SILENT_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, e);\n            this.ssoSilentMeasurement?.end({\n                success: false\n            }, e);\n            throw e;\n        }).finally(()=>{\n            document.removeEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        });\n    }\n    /**\r\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\r\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\r\n     * This API is not indended for normal authorization code acquisition and redemption.\r\n     *\r\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\r\n     *\r\n     * @param request {@link AuthorizationCodeRequest}\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async acquireTokenByCode(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.trace(\"acquireTokenByCode called\", correlationId);\n        const atbcMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByCode, correlationId);\n        preflightCheck(this.initialized, atbcMeasurement);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, request);\n        atbcMeasurement.add({\n            scenarioId: request.scenarioId\n        });\n        try {\n            if (request.code && request.nativeAccountId) {\n                // Throw error in case server returns both spa_code and spa_accountid in exchange for auth code.\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.spaCodeAndNativeAccountIdPresent);\n            } else if (request.code) {\n                const hybridAuthCode = request.code;\n                let response = this.hybridAuthCodeResponses.get(hybridAuthCode);\n                if (!response) {\n                    this.logger.verbose(\"Initiating new acquireTokenByCode request\", correlationId);\n                    response = this.acquireTokenByCodeAsync({\n                        ...request,\n                        correlationId\n                    }).then((result)=>{\n                        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, result);\n                        this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                        atbcMeasurement.end({\n                            success: true,\n                            isNativeBroker: result.fromNativeBroker,\n                            accessTokenSize: result.accessToken.length,\n                            idTokenSize: result.idToken.length,\n                            accountType: getAccountType(result.account)\n                        });\n                        return result;\n                    }).catch((error)=>{\n                        this.hybridAuthCodeResponses.delete(hybridAuthCode);\n                        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, error);\n                        atbcMeasurement.end({\n                            success: false\n                        }, error);\n                        throw error;\n                    });\n                    this.hybridAuthCodeResponses.set(hybridAuthCode, response);\n                } else {\n                    this.logger.verbose(\"Existing acquireTokenByCode request found\", correlationId);\n                    atbcMeasurement.discard();\n                }\n                return await response;\n            } else if (request.nativeAccountId) {\n                if (this.canUseNative(request, request.nativeAccountId)) {\n                    const result = await this.acquireTokenNative({\n                        ...request,\n                        correlationId\n                    }, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenByCode, request.nativeAccountId).catch((e)=>{\n                        // If native token acquisition fails for availability reasons fallback to standard flow\n                        if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                            this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt\n                        }\n                        throw e;\n                    });\n                    atbcMeasurement.end({\n                        accountType: getAccountType(result.account),\n                        success: true\n                    });\n                    return result;\n                } else {\n                    throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.unableToAcquireTokenFromNativePlatform);\n                }\n            } else {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.authCodeOrNativeAccountIdRequired);\n            }\n        } catch (e) {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, e);\n            atbcMeasurement.end({\n                success: false\n            }, e);\n            throw e;\n        }\n    }\n    /**\r\n     * Creates a SilentAuthCodeClient to redeem an authorization code.\r\n     * @param request\r\n     * @returns Result of the operation to redeem the authorization code\r\n     */ async acquireTokenByCodeAsync(request) {\n        this.logger.trace(\"acquireTokenByCodeAsync called\", request.correlationId);\n        this.acquireTokenByCodeAsyncMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByCodeAsync, request.correlationId);\n        this.acquireTokenByCodeAsyncMeasurement?.increment({\n            visibilityChangeCount: 0\n        });\n        document.addEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        const silentAuthCodeClient = this.createSilentAuthCodeClient(request.correlationId);\n        const silentTokenResult = await silentAuthCodeClient.acquireToken(request).then((response)=>{\n            this.acquireTokenByCodeAsyncMeasurement?.end({\n                success: true,\n                fromCache: response.fromCache,\n                isNativeBroker: response.fromNativeBroker\n            });\n            return response;\n        }).catch((tokenRenewalError)=>{\n            this.acquireTokenByCodeAsyncMeasurement?.end({\n                success: false\n            }, tokenRenewalError);\n            throw tokenRenewalError;\n        }).finally(()=>{\n            document.removeEventListener(\"visibilitychange\", this.trackPageVisibilityWithMeasurement);\n        });\n        return silentTokenResult;\n    }\n    /**\r\n     * Attempt to acquire an access token from the cache\r\n     * @param silentCacheClient SilentCacheClient\r\n     * @param commonRequest CommonSilentFlowRequest\r\n     * @param silentRequest SilentRequest\r\n     * @returns A promise that, when resolved, returns the access token\r\n     */ async acquireTokenFromCache(commonRequest, cacheLookupPolicy) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenFromCache, commonRequest.correlationId);\n        switch(cacheLookupPolicy){\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Default:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessTokenAndRefreshToken:\n                const silentCacheClient = this.createSilentCacheClient(commonRequest.correlationId);\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(silentCacheClient.acquireToken.bind(silentCacheClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SilentCacheClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);\n            default:\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired);\n        }\n    }\n    /**\r\n     * Attempt to acquire an access token via a refresh token\r\n     * @param commonRequest CommonSilentFlowRequest\r\n     * @param cacheLookupPolicy CacheLookupPolicy\r\n     * @returns A promise that, when resolved, returns the access token\r\n     */ async acquireTokenByRefreshToken(commonRequest, cacheLookupPolicy) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByRefreshToken, commonRequest.correlationId);\n        switch(cacheLookupPolicy){\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Default:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessTokenAndRefreshToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.RefreshToken:\n            case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.RefreshTokenAndNetwork:\n                const silentRefreshClient = this.createSilentRefreshClient(commonRequest.correlationId);\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(silentRefreshClient.acquireToken.bind(silentRefreshClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SilentRefreshClientAcquireToken, this.logger, this.performanceClient, commonRequest.correlationId)(commonRequest);\n            default:\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired);\n        }\n    }\n    /**\r\n     * Attempt to acquire an access token via an iframe\r\n     * @param request CommonSilentFlowRequest\r\n     * @returns A promise that, when resolved, returns the access token\r\n     */ async acquireTokenBySilentIframe(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenBySilentIframe, request.correlationId);\n        const silentIframeClient = this.createSilentIframeClient(request.correlationId);\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(silentIframeClient.acquireToken.bind(silentIframeClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.SilentIframeClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(request);\n    }\n    // #endregion\n    // #region Logout\n    /**\r\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\r\n     * @param logoutRequest\r\n     * @deprecated\r\n     */ async logout(logoutRequest) {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        this.logger.warning(\"logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.\", correlationId);\n        return this.logoutRedirect({\n            correlationId,\n            ...logoutRequest\n        });\n    }\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */ async logoutRedirect(logoutRequest) {\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectPreflightCheck)(this.initialized, this.config);\n        this.browserStorage.setInteractionInProgress(true);\n        const redirectClient = this.createRedirectClient(correlationId);\n        return redirectClient.logout(logoutRequest);\n    }\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */ logoutPopup(logoutRequest) {\n        try {\n            const correlationId = this.getRequestCorrelationId(logoutRequest);\n            (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.preflightCheck)(this.initialized);\n            this.browserStorage.setInteractionInProgress(true);\n            const popupClient = this.createPopupClient(correlationId);\n            return popupClient.logout(logoutRequest);\n        } catch (e) {\n            // Since this function is syncronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n    /**\r\n     * Creates a cache interaction client to clear broswer cache.\r\n     * @param logoutRequest\r\n     */ async clearCache(logoutRequest) {\n        if (!this.isBrowserEnvironment) {\n            this.logger.info(\"in non-browser environment, returning early.\");\n            return;\n        }\n        const correlationId = this.getRequestCorrelationId(logoutRequest);\n        const cacheClient = this.createSilentCacheClient(correlationId);\n        return cacheClient.logout(logoutRequest);\n    }\n    // #endregion\n    // #region Account APIs\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAllAccounts)(this.logger, this.browserStorage, this.isBrowserEnvironment, accountFilter);\n    }\n    /**\r\n     * Returns the first account found in the cache that matches the account filter passed in.\r\n     * @param accountFilter\r\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\r\n     */ getAccount(accountFilter) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccount)(accountFilter, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching username.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found.\r\n     * This API is provided for convenience but getAccountById should be used for best reliability\r\n     * @param username\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByUsername(username) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccountByUsername)(username, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByHomeId(homeAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccountByHomeId)(homeAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId\r\n     * @returns The account object stored in MSAL\r\n     */ getAccountByLocalId(localAccountId) {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getAccountByLocalId)(localAccountId, this.logger, this.browserStorage);\n    }\n    /**\r\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\r\n     * @param account\r\n     */ setActiveAccount(account) {\n        (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.setActiveAccount)(account, this.browserStorage);\n    }\n    /**\r\n     * Gets the currently active account\r\n     */ getActiveAccount() {\n        return (0,_cache_AccountManager_mjs__WEBPACK_IMPORTED_MODULE_19__.getActiveAccount)(this.browserStorage);\n    }\n    // #endregion\n    /**\r\n     * Hydrates the cache with the tokens from an AuthenticationResult\r\n     * @param result\r\n     * @param request\r\n     * @returns\r\n     */ async hydrateCache(result, request) {\n        this.logger.verbose(\"hydrateCache called\");\n        // Account gets saved to browser storage regardless of native or not\n        const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.AccountEntity.createFromAccountInfo(result.account, result.cloudGraphHostName, result.msGraphHost);\n        this.browserStorage.setAccount(accountEntity);\n        if (result.fromNativeBroker) {\n            this.logger.verbose(\"Response was from native broker, storing in-memory\");\n            // Tokens from native broker are stored in-memory\n            return this.nativeInternalStorage.hydrateCache(result, request);\n        } else {\n            return this.browserStorage.hydrateCache(result, request);\n        }\n    }\n    // #region Helpers\n    /**\r\n     * Acquire a token from native device (e.g. WAM)\r\n     * @param request\r\n     */ async acquireTokenNative(request, apiId, accountId) {\n        this.logger.trace(\"acquireTokenNative called\");\n        if (!this.nativeExtensionProvider) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.nativeConnectionNotEstablished);\n        }\n        const nativeClient = new _interaction_client_NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_12__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, apiId, this.performanceClient, this.nativeExtensionProvider, accountId || this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);\n        return nativeClient.acquireToken(request);\n    }\n    /**\r\n     * Returns boolean indicating if this request can use the native broker\r\n     * @param request\r\n     */ canUseNative(request, accountId) {\n        this.logger.trace(\"canUseNative called\");\n        if (!_broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme)) {\n            this.logger.trace(\"canUseNative: isNativeAvailable returned false, returning false\");\n            return false;\n        }\n        if (request.prompt) {\n            switch(request.prompt){\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PromptValue.NONE:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PromptValue.CONSENT:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PromptValue.LOGIN:\n                    this.logger.trace(\"canUseNative: prompt is compatible with native flow\");\n                    break;\n                default:\n                    this.logger.trace(`canUseNative: prompt = ${request.prompt} is not compatible with native flow, returning false`);\n                    return false;\n            }\n        }\n        if (!accountId && !this.getNativeAccountId(request)) {\n            this.logger.trace(\"canUseNative: nativeAccountId is not available, returning false\");\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Get the native accountId from the account\r\n     * @param request\r\n     * @returns\r\n     */ getNativeAccountId(request) {\n        const account = request.account || this.getAccount({\n            loginHint: request.loginHint,\n            sid: request.sid\n        }) || this.getActiveAccount();\n        return account && account.nativeAccountId || \"\";\n    }\n    /**\r\n     * Returns new instance of the Popup Interaction Client\r\n     * @param correlationId\r\n     */ createPopupClient(correlationId) {\n        return new _interaction_client_PopupClient_mjs__WEBPACK_IMPORTED_MODULE_22__.PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Redirect Interaction Client\r\n     * @param correlationId\r\n     */ createRedirectClient(correlationId) {\n        return new _interaction_client_RedirectClient_mjs__WEBPACK_IMPORTED_MODULE_23__.RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent Iframe Interaction Client\r\n     * @param correlationId\r\n     */ createSilentIframeClient(correlationId) {\n        return new _interaction_client_SilentIframeClient_mjs__WEBPACK_IMPORTED_MODULE_24__.SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.ssoSilent, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent Cache Interaction Client\r\n     */ createSilentCacheClient(correlationId) {\n        return new _interaction_client_SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_25__.SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent Refresh Interaction Client\r\n     */ createSilentRefreshClient(correlationId) {\n        return new _interaction_client_SilentRefreshClient_mjs__WEBPACK_IMPORTED_MODULE_26__.SilentRefreshClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Returns new instance of the Silent AuthCode Interaction Client\r\n     */ createSilentAuthCodeClient(correlationId) {\n        return new _interaction_client_SilentAuthCodeClient_mjs__WEBPACK_IMPORTED_MODULE_27__.SilentAuthCodeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenByCode, this.performanceClient, this.nativeExtensionProvider, correlationId);\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */ addEventCallback(callback, eventTypes) {\n        return this.eventHandler.addEventCallback(callback, eventTypes);\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    /**\r\n     * Registers a callback to receive performance events.\r\n     *\r\n     * @param {PerformanceCallbackFunction} callback\r\n     * @returns {string}\r\n     */ addPerformanceCallback(callback) {\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNonBrowserEnvironment)();\n        return this.performanceClient.addPerformanceCallback(callback);\n    }\n    /**\r\n     * Removes a callback registered with addPerformanceCallback.\r\n     *\r\n     * @param {string} callbackId\r\n     * @returns {boolean}\r\n     */ removePerformanceCallback(callbackId) {\n        return this.performanceClient.removePerformanceCallback(callbackId);\n    }\n    /**\r\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ enableAccountStorageEvents() {\n        if (true) {\n            return;\n        }\n        if (!this.listeningToStorageEvents) {\n            this.logger.verbose(\"Adding account storage listener.\");\n            this.listeningToStorageEvents = true;\n            window.addEventListener(\"storage\", this.handleAccountCacheChange);\n        } else {\n            this.logger.verbose(\"Account storage listener already registered.\");\n        }\n    }\n    /**\r\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\r\n     */ disableAccountStorageEvents() {\n        if (true) {\n            return;\n        }\n        if (this.listeningToStorageEvents) {\n            this.logger.verbose(\"Removing account storage listener.\");\n            window.removeEventListener(\"storage\", this.handleAccountCacheChange);\n            this.listeningToStorageEvents = false;\n        } else {\n            this.logger.verbose(\"No account storage listener registered.\");\n        }\n    }\n    /**\r\n     * Emit account added/removed events when cached accounts are changed in a different tab or frame\r\n     */ handleAccountCacheChange(e) {\n        try {\n            // Handle active account filter change\n            if (e.key?.includes(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS)) {\n                // This event has no payload, it only signals cross-tab app instances that the results of calling getActiveAccount() will have changed\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACTIVE_ACCOUNT_CHANGED);\n            }\n            // Handle account object change\n            const cacheValue = e.newValue || e.oldValue;\n            if (!cacheValue) {\n                return;\n            }\n            const parsedValue = JSON.parse(cacheValue);\n            if (typeof parsedValue !== \"object\" || !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.AccountEntity.isAccountEntity(parsedValue)) {\n                return;\n            }\n            const accountEntity = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_28__.CacheManager.toObject(new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.AccountEntity(), parsedValue);\n            const accountInfo = accountEntity.getAccountInfo();\n            if (!e.oldValue && e.newValue) {\n                this.logger.info(\"Account was added to cache in a different window\");\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACCOUNT_ADDED, undefined, accountInfo);\n            } else if (!e.newValue && e.oldValue) {\n                this.logger.info(\"Account was removed from cache in a different window\");\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACCOUNT_REMOVED, undefined, accountInfo);\n            }\n        } catch (e) {\n            return;\n        }\n    }\n    /**\r\n     * Gets the token cache for the application.\r\n     */ getTokenCache() {\n        return this.tokenCache;\n    }\n    /**\r\n     * Returns the logger instance\r\n     */ getLogger() {\n        return this.logger;\n    }\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger Logger instance\r\n     */ setLogger(logger) {\n        this.logger = logger;\n    }\n    /**\r\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\r\n     * @param sku\r\n     * @param version\r\n     */ initializeWrapperLibrary(sku, version) {\n        // Validate the SKU passed in is one we expect\n        this.browserStorage.setWrapperMetadata(sku, version);\n    }\n    /**\r\n     * Sets navigation client\r\n     * @param navigationClient\r\n     */ setNavigationClient(navigationClient) {\n        this.navigationClient = navigationClient;\n    }\n    /**\r\n     * Returns the configuration object\r\n     */ getConfiguration() {\n        return this.config;\n    }\n    /**\r\n     * Returns the performance client\r\n     */ getPerformanceClient() {\n        return this.performanceClient;\n    }\n    /**\r\n     * Returns the browser env indicator\r\n     */ isBrowserEnv() {\n        return this.isBrowserEnvironment;\n    }\n    /**\r\n     * Generates a correlation id for a request if none is provided.\r\n     *\r\n     * @protected\r\n     * @param {?Partial<BaseAuthRequest>} [request]\r\n     * @returns {string}\r\n     */ getRequestCorrelationId(request) {\n        if (request?.correlationId) {\n            return request.correlationId;\n        }\n        if (this.isBrowserEnvironment) {\n            return (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_29__.createNewGuid)();\n        }\n        /*\r\n         * Included for fallback for non-browser environments,\r\n         * and to ensure this method always returns a string.\r\n         */ return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.Constants.EMPTY_STRING;\n    }\n    // #endregion\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */ async loginRedirect(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return this.acquireTokenRedirect({\n            correlationId,\n            ...request || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_REQUEST\n        });\n    }\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ loginPopup(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginPopup called\", correlationId);\n        return this.acquireTokenPopup({\n            correlationId,\n            ...request || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_REQUEST\n        });\n    }\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */ async acquireTokenSilent(request) {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atsMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilent, correlationId);\n        atsMeasurement.add({\n            cacheLookupPolicy: request.cacheLookupPolicy,\n            scenarioId: request.scenarioId\n        });\n        preflightCheck(this.initialized, atsMeasurement);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_15__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_16__.noAccountError);\n        }\n        atsMeasurement.add({\n            accountType: getAccountType(account)\n        });\n        const thumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.Constants.EMPTY_STRING,\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid,\n            shrOptions: request.shrOptions\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n            const response = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenSilentAsync.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilentAsync, this.logger, this.performanceClient, correlationId)({\n                ...request,\n                correlationId\n            }, account).then((result)=>{\n                this.activeSilentTokenRequests.delete(silentRequestKey);\n                atsMeasurement.end({\n                    success: true,\n                    fromCache: result.fromCache,\n                    isNativeBroker: result.fromNativeBroker,\n                    cacheLookupPolicy: request.cacheLookupPolicy,\n                    accessTokenSize: result.accessToken.length,\n                    idTokenSize: result.idToken.length\n                });\n                return result;\n            }).catch((error)=>{\n                this.activeSilentTokenRequests.delete(silentRequestKey);\n                atsMeasurement.end({\n                    success: false\n                }, error);\n                throw error;\n            });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return {\n                ...await response,\n                state: request.state\n            };\n        } else {\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n            atsMeasurement.discard();\n            return {\n                ...await cachedResponse,\n                state: request.state\n            };\n        }\n    }\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */ async acquireTokenSilentAsync(request, account) {\n        const trackPageVisibility = ()=>this.trackPageVisibility(request.correlationId);\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, request);\n        if (request.correlationId) {\n            this.performanceClient.incrementFields({\n                visibilityChangeCount: 0\n            }, request.correlationId);\n        }\n        document.addEventListener(\"visibilitychange\", trackPageVisibility);\n        const silentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(_request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_30__.initializeSilentRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.InitializeSilentRequest, this.logger, this.performanceClient, request.correlationId)(request, account, this.config, this.performanceClient, this.logger);\n        const cacheLookupPolicy = request.cacheLookupPolicy || _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Default;\n        const result = this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy).catch(async (refreshTokenError)=>{\n            const shouldTryToResolveSilently = checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy);\n            if (shouldTryToResolveSilently) {\n                if (!this.activeIframeRequest) {\n                    let _resolve;\n                    // Always set the active request tracker immediately after checking it to prevent races\n                    this.activeIframeRequest = [\n                        new Promise((resolve)=>{\n                            _resolve = resolve;\n                        }),\n                        silentRequest.correlationId\n                    ];\n                    this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", silentRequest.correlationId);\n                    return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenBySilentIframe.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest).then((iframeResult)=>{\n                        _resolve(true);\n                        return iframeResult;\n                    }).catch((e)=>{\n                        _resolve(false);\n                        throw e;\n                    }).finally(()=>{\n                        this.activeIframeRequest = undefined;\n                    });\n                } else if (cacheLookupPolicy !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.Skip) {\n                    const [activePromise, activeCorrelationId] = this.activeIframeRequest;\n                    this.logger.verbose(`Iframe request is already in progress, awaiting resolution for request with correlationId: ${activeCorrelationId}`, silentRequest.correlationId);\n                    const awaitConcurrentIframeMeasure = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AwaitConcurrentIframe, silentRequest.correlationId);\n                    awaitConcurrentIframeMeasure.add({\n                        awaitIframeCorrelationId: activeCorrelationId\n                    });\n                    const activePromiseResult = await activePromise;\n                    awaitConcurrentIframeMeasure.end({\n                        success: activePromiseResult\n                    });\n                    if (activePromiseResult) {\n                        this.logger.verbose(`Parallel iframe request with correlationId: ${activeCorrelationId} succeeded. Retrying cache and/or RT redemption`, silentRequest.correlationId);\n                        // Retry cache lookup and/or RT exchange after iframe completes\n                        return this.acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy);\n                    } else {\n                        this.logger.info(`Iframe request with correlationId: ${activeCorrelationId} failed. Interaction is required.`);\n                        // If previous iframe request failed, it's unlikely to succeed this time. Throw original error.\n                        throw refreshTokenError;\n                    }\n                } else {\n                    // Cache policy set to skip and another iframe request is already in progress\n                    this.logger.warning(\"Another iframe request is currently in progress and CacheLookupPolicy is set to Skip. This may result in degraded performance and/or reliability for both calls. Please consider changing the CacheLookupPolicy to take advantage of request queuing and token cache.\", silentRequest.correlationId);\n                    return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenBySilentIframe.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenBySilentIframe, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n                }\n            } else {\n                // Error cannot be silently resolved or iframe renewal is not allowed, interaction required\n                throw refreshTokenError;\n            }\n        });\n        return result.then((response)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, response);\n            if (request.correlationId) {\n                this.performanceClient.addFields({\n                    fromCache: response.fromCache,\n                    isNativeBroker: response.fromNativeBroker\n                }, request.correlationId);\n            }\n            return response;\n        }).catch((tokenRenewalError)=>{\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, null, tokenRenewalError);\n            throw tokenRenewalError;\n        }).finally(()=>{\n            document.removeEventListener(\"visibilitychange\", trackPageVisibility);\n        });\n    }\n    /**\r\n     * AcquireTokenSilent without the iframe fallback. This is used to enable the correct fallbacks in cases where there's a potential for multiple silent requests to be made in parallel and prevent those requests from making concurrent iframe requests.\r\n     * @param silentRequest\r\n     * @param cacheLookupPolicy\r\n     * @returns\r\n     */ async acquireTokenSilentNoIframe(silentRequest, cacheLookupPolicy) {\n        if (_broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, silentRequest.authenticationScheme) && silentRequest.account.nativeAccountId) {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            return this.acquireTokenNative(silentRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.ApiId.acquireTokenSilent_silentFlow).catch(async (e)=>{\n                // If native token acquisition fails for availability reasons fallback to web flow\n                if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeAuthError && (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.isFatalNativeAuthError)(e)) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\n                    throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired);\n                }\n                throw e;\n            });\n        } else {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenFromCache.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenFromCache, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy).catch((cacheError)=>{\n                if (cacheLookupPolicy === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.CacheLookupPolicy.AccessToken) {\n                    throw cacheError;\n                }\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.ACQUIRE_TOKEN_NETWORK_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.InteractionType.Silent, silentRequest);\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.invokeAsync)(this.acquireTokenByRefreshToken.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.PerformanceEvents.AcquireTokenByRefreshToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest, cacheLookupPolicy);\n            });\n        }\n    }\n}\n/**\r\n * Determines whether an error thrown by the refresh token endpoint can be resolved without interaction\r\n * @param refreshTokenError\r\n * @param silentRequest\r\n * @param cacheLookupPolicy\r\n * @returns\r\n */ function checkIfRefreshTokenErrorCanBeResolvedSilently(refreshTokenError, cacheLookupPolicy) {\n    const noInteractionRequired = !(refreshTokenError instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.InteractionRequiredAuthError && // For refresh token errors, bad_token does not always require interaction (silently resolvable)\n    refreshTokenError.subError !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__.badToken);\n    // Errors that result when the refresh token needs to be replaced\n    const refreshTokenRefreshRequired = refreshTokenError.errorCode === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.BrowserConstants.INVALID_GRANT_ERROR || refreshTokenError.errorCode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.tokenRefreshRequired;\n    // Errors that may be resolved before falling back to interaction (through iframe renewal)\n    const isSilentlyResolvable = noInteractionRequired && refreshTokenRefreshRequired || refreshTokenError.errorCode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__.noTokensFound || refreshTokenError.errorCode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_31__.refreshTokenExpired;\n    // Only these policies allow for an iframe renewal attempt\n    const tryIframeRenewal = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_6__.iFrameRenewalPolicies.includes(cacheLookupPolicy);\n    return isSilentlyResolvable && tryIframeRenewal;\n}\n //# sourceMappingURL=StandardController.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/controllers/StandardController.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNewGuid: () => (/* binding */ createNewGuid),\n/* harmony export */   exportJwk: () => (/* binding */ exportJwk),\n/* harmony export */   generateKeyPair: () => (/* binding */ generateKeyPair),\n/* harmony export */   getRandomValues: () => (/* binding */ getRandomValues),\n/* harmony export */   hashString: () => (/* binding */ hashString),\n/* harmony export */   importJwk: () => (/* binding */ importJwk),\n/* harmony export */   sha256Digest: () => (/* binding */ sha256Digest),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   validateCryptoAvailable: () => (/* binding */ validateCryptoAvailable)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This file defines functions used by the browser library to perform cryptography operations such as\r\n * hashing and encoding. It also has helper functions to validate the availability of specific APIs.\r\n */ /**\r\n * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams\r\n */ // RSA KeyGen Algorithm\nconst PKCS1_V15_KEYGEN_ALG = \"RSASSA-PKCS1-v1_5\";\n// SHA-256 hashing algorithm\nconst S256_HASH_ALG = \"SHA-256\";\n// MOD length for PoP tokens\nconst MODULUS_LENGTH = 2048;\n// Public Exponent\nconst PUBLIC_EXPONENT = new Uint8Array([\n    0x01,\n    0x00,\n    0x01\n]);\n// UUID hex digits\nconst UUID_CHARS = \"0123456789abcdef\";\n// Array to store UINT32 random value\nconst UINT32_ARR = new Uint32Array(1);\nconst SUBTLE_SUBERROR = \"crypto_subtle_undefined\";\nconst keygenAlgorithmOptions = {\n    name: PKCS1_V15_KEYGEN_ALG,\n    hash: S256_HASH_ALG,\n    modulusLength: MODULUS_LENGTH,\n    publicExponent: PUBLIC_EXPONENT\n};\n/**\r\n * Check whether browser crypto is available.\r\n */ function validateCryptoAvailable() {\n    if (!window) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nonBrowserEnvironment);\n    }\n    if (!window.crypto) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.cryptoNonExistent);\n    }\n    if (!window.crypto.subtle) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.cryptoNonExistent, SUBTLE_SUBERROR);\n    }\n}\n/**\r\n * Returns a sha-256 hash of the given dataString as an ArrayBuffer.\r\n * @param dataString {string} data string\r\n * @param performanceClient {?IPerformanceClient}\r\n * @param correlationId {?string} correlation id\r\n */ async function sha256Digest(dataString, performanceClient, correlationId) {\n    performanceClient?.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.Sha256Digest, correlationId);\n    const encoder = new TextEncoder();\n    const data = encoder.encode(dataString);\n    return window.crypto.subtle.digest(S256_HASH_ALG, data);\n}\n/**\r\n * Populates buffer with cryptographically random values.\r\n * @param dataBuffer\r\n */ function getRandomValues(dataBuffer) {\n    return window.crypto.getRandomValues(dataBuffer);\n}\n/**\r\n * Returns random Uint32 value.\r\n * @returns {number}\r\n */ function getRandomUint32() {\n    window.crypto.getRandomValues(UINT32_ARR);\n    return UINT32_ARR[0];\n}\n/**\r\n * Creates a UUID v7 from the current timestamp.\r\n * Implementation relies on the system clock to guarantee increasing order of generated identifiers.\r\n * @returns {number}\r\n */ function createNewGuid() {\n    const currentTimestamp = Date.now();\n    const baseRand = getRandomUint32() * 0x400 + (getRandomUint32() & 0x3ff);\n    // Result byte array\n    const bytes = new Uint8Array(16);\n    // A 12-bit `rand_a` field value\n    const randA = Math.trunc(baseRand / 2 ** 30);\n    // The higher 30 bits of 62-bit `rand_b` field value\n    const randBHi = baseRand & 2 ** 30 - 1;\n    // The lower 32 bits of 62-bit `rand_b` field value\n    const randBLo = getRandomUint32();\n    bytes[0] = currentTimestamp / 2 ** 40;\n    bytes[1] = currentTimestamp / 2 ** 32;\n    bytes[2] = currentTimestamp / 2 ** 24;\n    bytes[3] = currentTimestamp / 2 ** 16;\n    bytes[4] = currentTimestamp / 2 ** 8;\n    bytes[5] = currentTimestamp;\n    bytes[6] = 0x70 | randA >>> 8;\n    bytes[7] = randA;\n    bytes[8] = 0x80 | randBHi >>> 24;\n    bytes[9] = randBHi >>> 16;\n    bytes[10] = randBHi >>> 8;\n    bytes[11] = randBHi;\n    bytes[12] = randBLo >>> 24;\n    bytes[13] = randBLo >>> 16;\n    bytes[14] = randBLo >>> 8;\n    bytes[15] = randBLo;\n    let text = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        text += UUID_CHARS.charAt(bytes[i] >>> 4);\n        text += UUID_CHARS.charAt(bytes[i] & 0xf);\n        if (i === 3 || i === 5 || i === 7 || i === 9) {\n            text += \"-\";\n        }\n    }\n    return text;\n}\n/**\r\n * Generates a keypair based on current keygen algorithm config.\r\n * @param extractable\r\n * @param usages\r\n */ async function generateKeyPair(extractable, usages) {\n    return window.crypto.subtle.generateKey(keygenAlgorithmOptions, extractable, usages);\n}\n/**\r\n * Export key as Json Web Key (JWK)\r\n * @param key\r\n */ async function exportJwk(key) {\n    return window.crypto.subtle.exportKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, key);\n}\n/**\r\n * Imports key as Json Web Key (JWK), can set extractable and usages.\r\n * @param key\r\n * @param extractable\r\n * @param usages\r\n */ async function importJwk(key, extractable, usages) {\n    return window.crypto.subtle.importKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.KEY_FORMAT_JWK, key, keygenAlgorithmOptions, extractable, usages);\n}\n/**\r\n * Signs given data with given key\r\n * @param key\r\n * @param data\r\n */ async function sign(key, data) {\n    return window.crypto.subtle.sign(keygenAlgorithmOptions, key, data);\n}\n/**\r\n * Returns the SHA-256 hash of an input string\r\n * @param plainText\r\n */ async function hashString(plainText) {\n    const hashBuffer = await sha256Digest(plainText);\n    const hashBytes = new Uint8Array(hashBuffer);\n    return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_4__.urlEncodeArr)(hashBytes);\n}\n //# sourceMappingURL=BrowserCrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CryptoOps: () => (/* binding */ CryptoOps)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _cache_AsyncMemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cache/AsyncMemoryStorage.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/cache/AsyncMemoryStorage.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */ class CryptoOps {\n    constructor(logger, performanceClient){\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.validateCryptoAvailable)();\n        this.cache = new _cache_AsyncMemoryStorage_mjs__WEBPACK_IMPORTED_MODULE_1__.AsyncMemoryStorage(this.logger);\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */ createNewGuid() {\n        return (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.createNewGuid)();\n    }\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input\r\n     */ base64Encode(input) {\n        return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.base64Encode)(input);\n    }\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input\r\n     */ base64Decode(input) {\n        return (0,_encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_3__.base64Decode)(input);\n    }\n    /**\r\n     * Encodes input string to base64 URL safe string.\r\n     * @param input\r\n     */ base64UrlEncode(input) {\n        return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(input);\n    }\n    /**\r\n     * Stringifies and base64Url encodes input public key\r\n     * @param inputKid\r\n     * @returns Base64Url encoded public key\r\n     */ encodeKid(inputKid) {\n        return this.base64UrlEncode(JSON.stringify({\n            kid: inputKid\n        }));\n    }\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */ async getPublicKeyThumbprint(request) {\n        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n        // Generate Keypair\n        const keyPair = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.generateKeyPair)(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.exportJwk)(keyPair.publicKey);\n        const pubKeyThumprintObj = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n        const publicJwkString = getSortedObjectString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.exportJwk)(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.importJwk)(privateKeyJwk, false, [\n            \"sign\"\n        ]);\n        // Store Keypair data in keystore\n        await this.cache.setItem(publicJwkHash, {\n            privateKey: unextractablePrivateKey,\n            publicKey: keyPair.publicKey,\n            requestMethod: request.resourceRequestMethod,\n            requestUri: request.resourceRequestUri\n        });\n        if (publicKeyThumbMeasurement) {\n            publicKeyThumbMeasurement.end({\n                success: true\n            });\n        }\n        return publicJwkHash;\n    }\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid\r\n     */ async removeTokenBindingKey(kid) {\n        await this.cache.removeItem(kid);\n        const keyFound = await this.cache.containsKey(kid);\n        return !keyFound;\n    }\n    /**\r\n     * Removes all cryptographic keys from IndexedDB storage\r\n     */ async clearKeystore() {\n        // Delete in-memory keystores\n        this.cache.clearInMemory();\n        /**\r\n         * There is only one database, so calling clearPersistent on asymmetric keystore takes care of\r\n         * every persistent keystore\r\n         */ try {\n            await this.cache.clearPersistent();\n            return true;\n        } catch (e) {\n            if (e instanceof Error) {\n                this.logger.error(`Clearing keystore failed with error: ${e.message}`);\n            } else {\n                this.logger.error(\"Clearing keystore failed with unknown error\");\n            }\n            return false;\n        }\n    }\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload\r\n     * @param kid\r\n     */ async signJwt(payload, kid, shrOptions, correlationId) {\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.CryptoOptsSignJwt, correlationId);\n        const cachedKeyPair = await this.cache.getItem(kid);\n        if (!cachedKeyPair) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cryptoKeyNotFound);\n        }\n        // Get public key as JWK\n        const publicKeyJwk = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.exportJwk)(cachedKeyPair.publicKey);\n        const publicKeyJwkString = getSortedObjectString(publicKeyJwk);\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n        const encodedKeyIdThumbprint = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(JSON.stringify({\n            kid: kid\n        }));\n        // Generate header\n        const shrHeader = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.JoseHeader.getShrHeaderString({\n            ...shrOptions?.header,\n            alg: publicKeyJwk.alg,\n            kid: encodedKeyIdThumbprint\n        });\n        const encodedShrHeader = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(shrHeader);\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncode)(JSON.stringify(payload));\n        // Form token string\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n        // Sign token\n        const encoder = new TextEncoder();\n        const tokenBuffer = encoder.encode(tokenString);\n        const signatureBuffer = await (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.sign)(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_2__.urlEncodeArr)(new Uint8Array(signatureBuffer));\n        const signedJwt = `${tokenString}.${encodedSignature}`;\n        if (signJwtMeasurement) {\n            signJwtMeasurement.end({\n                success: true\n            });\n        }\n        return signedJwt;\n    }\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     * @param plainText\r\n     */ async hashString(plainText) {\n        return (0,_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.hashString)(plainText);\n    }\n}\nCryptoOps.POP_KEY_USAGES = [\n    \"sign\",\n    \"verify\"\n];\nCryptoOps.EXTRACTABLE = true;\nfunction getSortedObjectString(obj) {\n    return JSON.stringify(obj, Object.keys(obj).sort());\n}\n //# sourceMappingURL=CryptoOps.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/crypto/CryptoOps.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generatePkceCodes: () => (/* binding */ generatePkceCodes)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encode/Base64Encode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\");\n/* harmony import */ var _BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Constant byte array length\nconst RANDOM_BYTE_ARR_LENGTH = 32;\n/**\r\n * This file defines APIs to generate PKCE codes and code verifiers.\r\n */ /**\r\n * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636\r\n */ async function generatePkceCodes(performanceClient, logger, correlationId) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GeneratePkceCodes, correlationId);\n    const codeVerifier = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invoke)(generateCodeVerifier, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GenerateCodeVerifier, logger, performanceClient, correlationId)(performanceClient, logger, correlationId);\n    const codeChallenge = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(generateCodeChallengeFromVerifier, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GenerateCodeChallengeFromVerifier, logger, performanceClient, correlationId)(codeVerifier, performanceClient, logger, correlationId);\n    return {\n        verifier: codeVerifier,\n        challenge: codeChallenge\n    };\n}\n/**\r\n * Generates a random 32 byte buffer and returns the base64\r\n * encoded string to be used as a PKCE Code Verifier\r\n */ function generateCodeVerifier(performanceClient, logger, correlationId) {\n    try {\n        // Generate random values as utf-8\n        const buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);\n        (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invoke)(_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.getRandomValues, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GetRandomValues, logger, performanceClient, correlationId)(buffer);\n        // encode verifier as base64\n        const pkceCodeVerifierB64 = (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_3__.urlEncodeArr)(buffer);\n        return pkceCodeVerifierB64;\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.pkceNotCreated);\n    }\n}\n/**\r\n * Creates a base64 encoded PKCE Code Challenge string from the\r\n * hash created from the PKCE Code Verifier supplied\r\n */ async function generateCodeChallengeFromVerifier(pkceCodeVerifier, performanceClient, logger, correlationId) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.GenerateCodeChallengeFromVerifier, correlationId);\n    try {\n        // hashed verifier\n        const pkceHashedCodeVerifier = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_2__.sha256Digest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.Sha256Digest, logger, performanceClient, correlationId)(pkceCodeVerifier, performanceClient, correlationId);\n        // encode hash as base64\n        return (0,_encode_Base64Encode_mjs__WEBPACK_IMPORTED_MODULE_3__.urlEncodeArr)(new Uint8Array(pkceHashedCodeVerifier));\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.pkceNotCreated);\n    }\n}\n //# sourceMappingURL=PkceGenerator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2NyeXB0by9Qa2NlR2VuZXJhdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ29GO0FBQ2I7QUFDYjtBQUNVO0FBQ0E7QUFFcEU7OztDQUdDLEdBQ0QsNkJBQTZCO0FBQzdCLE1BQU1RLHlCQUF5QjtBQUMvQjs7Q0FFQyxHQUNEOztDQUVDLEdBQ0QsZUFBZUMsa0JBQWtCQyxpQkFBaUIsRUFBRUMsTUFBTSxFQUFFQyxhQUFhO0lBQ3JFRixrQkFBa0JHLG1CQUFtQixDQUFDYix5RUFBaUJBLENBQUNjLGlCQUFpQixFQUFFRjtJQUMzRSxNQUFNRyxlQUFlZCxrRUFBTUEsQ0FBQ2Usc0JBQXNCaEIseUVBQWlCQSxDQUFDaUIsb0JBQW9CLEVBQUVOLFFBQVFELG1CQUFtQkUsZUFBZUYsbUJBQW1CQyxRQUFRQztJQUMvSixNQUFNTSxnQkFBZ0IsTUFBTWhCLHVFQUFXQSxDQUFDaUIsbUNBQW1DbkIseUVBQWlCQSxDQUFDb0IsaUNBQWlDLEVBQUVULFFBQVFELG1CQUFtQkUsZUFBZUcsY0FBY0wsbUJBQW1CQyxRQUFRQztJQUNuTixPQUFPO1FBQ0hTLFVBQVVOO1FBQ1ZPLFdBQVdKO0lBQ2Y7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNGLHFCQUFxQk4saUJBQWlCLEVBQUVDLE1BQU0sRUFBRUMsYUFBYTtJQUNsRSxJQUFJO1FBQ0Esa0NBQWtDO1FBQ2xDLE1BQU1XLFNBQVMsSUFBSUMsV0FBV2hCO1FBQzlCUCxrRUFBTUEsQ0FBQ0ksK0RBQWVBLEVBQUVMLHlFQUFpQkEsQ0FBQ3lCLGVBQWUsRUFBRWQsUUFBUUQsbUJBQW1CRSxlQUFlVztRQUNyRyw0QkFBNEI7UUFDNUIsTUFBTUcsc0JBQXNCdEIsc0VBQVlBLENBQUNtQjtRQUN6QyxPQUFPRztJQUNYLEVBQ0EsT0FBT0MsR0FBRztRQUNOLE1BQU14QixtRkFBc0JBLENBQUNJLDRFQUFjQTtJQUMvQztBQUNKO0FBQ0E7OztDQUdDLEdBQ0QsZUFBZVksa0NBQWtDUyxnQkFBZ0IsRUFBRWxCLGlCQUFpQixFQUFFQyxNQUFNLEVBQUVDLGFBQWE7SUFDdkdGLGtCQUFrQkcsbUJBQW1CLENBQUNiLHlFQUFpQkEsQ0FBQ29CLGlDQUFpQyxFQUFFUjtJQUMzRixJQUFJO1FBQ0Esa0JBQWtCO1FBQ2xCLE1BQU1pQix5QkFBeUIsTUFBTTNCLHVFQUFXQSxDQUFDSSw0REFBWUEsRUFBRU4seUVBQWlCQSxDQUFDOEIsWUFBWSxFQUFFbkIsUUFBUUQsbUJBQW1CRSxlQUFlZ0Isa0JBQWtCbEIsbUJBQW1CRTtRQUM5Syx3QkFBd0I7UUFDeEIsT0FBT1Isc0VBQVlBLENBQUMsSUFBSW9CLFdBQVdLO0lBQ3ZDLEVBQ0EsT0FBT0YsR0FBRztRQUNOLE1BQU14QixtRkFBc0JBLENBQUNJLDRFQUFjQTtJQUMvQztBQUNKO0FBRTZCLENBQzdCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvY3J5cHRvL1BrY2VHZW5lcmF0b3IubWpzPzg3ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBQZXJmb3JtYW5jZUV2ZW50cywgaW52b2tlLCBpbnZva2VBc3luYyB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyB1cmxFbmNvZGVBcnIgfSBmcm9tICcuLi9lbmNvZGUvQmFzZTY0RW5jb2RlLm1qcyc7XG5pbXBvcnQgeyBnZXRSYW5kb21WYWx1ZXMsIHNoYTI1NkRpZ2VzdCB9IGZyb20gJy4vQnJvd3NlckNyeXB0by5tanMnO1xuaW1wb3J0IHsgcGtjZU5vdENyZWF0ZWQgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8vIENvbnN0YW50IGJ5dGUgYXJyYXkgbGVuZ3RoXHJcbmNvbnN0IFJBTkRPTV9CWVRFX0FSUl9MRU5HVEggPSAzMjtcclxuLyoqXHJcbiAqIFRoaXMgZmlsZSBkZWZpbmVzIEFQSXMgdG8gZ2VuZXJhdGUgUEtDRSBjb2RlcyBhbmQgY29kZSB2ZXJpZmllcnMuXHJcbiAqL1xyXG4vKipcclxuICogR2VuZXJhdGVzIFBLQ0UgQ29kZXMuIFNlZSB0aGUgUkZDIGZvciBtb3JlIGluZm9ybWF0aW9uOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzYzNlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVQa2NlQ29kZXMocGVyZm9ybWFuY2VDbGllbnQsIGxvZ2dlciwgY29ycmVsYXRpb25JZCkge1xyXG4gICAgcGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5HZW5lcmF0ZVBrY2VDb2RlcywgY29ycmVsYXRpb25JZCk7XHJcbiAgICBjb25zdCBjb2RlVmVyaWZpZXIgPSBpbnZva2UoZ2VuZXJhdGVDb2RlVmVyaWZpZXIsIFBlcmZvcm1hbmNlRXZlbnRzLkdlbmVyYXRlQ29kZVZlcmlmaWVyLCBsb2dnZXIsIHBlcmZvcm1hbmNlQ2xpZW50LCBjb3JyZWxhdGlvbklkKShwZXJmb3JtYW5jZUNsaWVudCwgbG9nZ2VyLCBjb3JyZWxhdGlvbklkKTtcclxuICAgIGNvbnN0IGNvZGVDaGFsbGVuZ2UgPSBhd2FpdCBpbnZva2VBc3luYyhnZW5lcmF0ZUNvZGVDaGFsbGVuZ2VGcm9tVmVyaWZpZXIsIFBlcmZvcm1hbmNlRXZlbnRzLkdlbmVyYXRlQ29kZUNoYWxsZW5nZUZyb21WZXJpZmllciwgbG9nZ2VyLCBwZXJmb3JtYW5jZUNsaWVudCwgY29ycmVsYXRpb25JZCkoY29kZVZlcmlmaWVyLCBwZXJmb3JtYW5jZUNsaWVudCwgbG9nZ2VyLCBjb3JyZWxhdGlvbklkKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmVyaWZpZXI6IGNvZGVWZXJpZmllcixcclxuICAgICAgICBjaGFsbGVuZ2U6IGNvZGVDaGFsbGVuZ2UsXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gMzIgYnl0ZSBidWZmZXIgYW5kIHJldHVybnMgdGhlIGJhc2U2NFxyXG4gKiBlbmNvZGVkIHN0cmluZyB0byBiZSB1c2VkIGFzIGEgUEtDRSBDb2RlIFZlcmlmaWVyXHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVWZXJpZmllcihwZXJmb3JtYW5jZUNsaWVudCwgbG9nZ2VyLCBjb3JyZWxhdGlvbklkKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSB2YWx1ZXMgYXMgdXRmLThcclxuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShSQU5ET01fQllURV9BUlJfTEVOR1RIKTtcclxuICAgICAgICBpbnZva2UoZ2V0UmFuZG9tVmFsdWVzLCBQZXJmb3JtYW5jZUV2ZW50cy5HZXRSYW5kb21WYWx1ZXMsIGxvZ2dlciwgcGVyZm9ybWFuY2VDbGllbnQsIGNvcnJlbGF0aW9uSWQpKGJ1ZmZlcik7XHJcbiAgICAgICAgLy8gZW5jb2RlIHZlcmlmaWVyIGFzIGJhc2U2NFxyXG4gICAgICAgIGNvbnN0IHBrY2VDb2RlVmVyaWZpZXJCNjQgPSB1cmxFbmNvZGVBcnIoYnVmZmVyKTtcclxuICAgICAgICByZXR1cm4gcGtjZUNvZGVWZXJpZmllckI2NDtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcihwa2NlTm90Q3JlYXRlZCk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBiYXNlNjQgZW5jb2RlZCBQS0NFIENvZGUgQ2hhbGxlbmdlIHN0cmluZyBmcm9tIHRoZVxyXG4gKiBoYXNoIGNyZWF0ZWQgZnJvbSB0aGUgUEtDRSBDb2RlIFZlcmlmaWVyIHN1cHBsaWVkXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUNvZGVDaGFsbGVuZ2VGcm9tVmVyaWZpZXIocGtjZUNvZGVWZXJpZmllciwgcGVyZm9ybWFuY2VDbGllbnQsIGxvZ2dlciwgY29ycmVsYXRpb25JZCkge1xyXG4gICAgcGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5HZW5lcmF0ZUNvZGVDaGFsbGVuZ2VGcm9tVmVyaWZpZXIsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBoYXNoZWQgdmVyaWZpZXJcclxuICAgICAgICBjb25zdCBwa2NlSGFzaGVkQ29kZVZlcmlmaWVyID0gYXdhaXQgaW52b2tlQXN5bmMoc2hhMjU2RGlnZXN0LCBQZXJmb3JtYW5jZUV2ZW50cy5TaGEyNTZEaWdlc3QsIGxvZ2dlciwgcGVyZm9ybWFuY2VDbGllbnQsIGNvcnJlbGF0aW9uSWQpKHBrY2VDb2RlVmVyaWZpZXIsIHBlcmZvcm1hbmNlQ2xpZW50LCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICAvLyBlbmNvZGUgaGFzaCBhcyBiYXNlNjRcclxuICAgICAgICByZXR1cm4gdXJsRW5jb2RlQXJyKG5ldyBVaW50OEFycmF5KHBrY2VIYXNoZWRDb2RlVmVyaWZpZXIpKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcihwa2NlTm90Q3JlYXRlZCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVQa2NlQ29kZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBrY2VHZW5lcmF0b3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlBlcmZvcm1hbmNlRXZlbnRzIiwiaW52b2tlIiwiaW52b2tlQXN5bmMiLCJjcmVhdGVCcm93c2VyQXV0aEVycm9yIiwidXJsRW5jb2RlQXJyIiwiZ2V0UmFuZG9tVmFsdWVzIiwic2hhMjU2RGlnZXN0IiwicGtjZU5vdENyZWF0ZWQiLCJSQU5ET01fQllURV9BUlJfTEVOR1RIIiwiZ2VuZXJhdGVQa2NlQ29kZXMiLCJwZXJmb3JtYW5jZUNsaWVudCIsImxvZ2dlciIsImNvcnJlbGF0aW9uSWQiLCJhZGRRdWV1ZU1lYXN1cmVtZW50IiwiR2VuZXJhdGVQa2NlQ29kZXMiLCJjb2RlVmVyaWZpZXIiLCJnZW5lcmF0ZUNvZGVWZXJpZmllciIsIkdlbmVyYXRlQ29kZVZlcmlmaWVyIiwiY29kZUNoYWxsZW5nZSIsImdlbmVyYXRlQ29kZUNoYWxsZW5nZUZyb21WZXJpZmllciIsIkdlbmVyYXRlQ29kZUNoYWxsZW5nZUZyb21WZXJpZmllciIsInZlcmlmaWVyIiwiY2hhbGxlbmdlIiwiYnVmZmVyIiwiVWludDhBcnJheSIsIkdldFJhbmRvbVZhbHVlcyIsInBrY2VDb2RlVmVyaWZpZXJCNjQiLCJlIiwicGtjZUNvZGVWZXJpZmllciIsInBrY2VIYXNoZWRDb2RlVmVyaWZpZXIiLCJTaGEyNTZEaWdlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64Decode: () => (/* binding */ base64Decode)\n/* harmony export */ });\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\r\n */ /**\r\n * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n * @param input\r\n */ function base64Decode(input) {\n    return new TextDecoder().decode(base64DecToArr(input));\n}\n/**\r\n * Decodes base64 into Uint8Array\r\n * @param base64String\r\n */ function base64DecToArr(base64String) {\n    let encodedString = base64String.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch(encodedString.length % 4){\n        case 0:\n            break;\n        case 2:\n            encodedString += \"==\";\n            break;\n        case 3:\n            encodedString += \"=\";\n            break;\n        default:\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidBase64String);\n    }\n    const binString = atob(encodedString);\n    return Uint8Array.from(binString, (m)=>m.codePointAt(0) || 0);\n}\n //# sourceMappingURL=Base64Decode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2VuY29kZS9CYXNlNjREZWNvZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUN1RTtBQUNFO0FBRXpFOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNELFNBQVNFLGFBQWFDLEtBQUs7SUFDdkIsT0FBTyxJQUFJQyxjQUFjQyxNQUFNLENBQUNDLGVBQWVIO0FBQ25EO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0csZUFBZUMsWUFBWTtJQUNoQyxJQUFJQyxnQkFBZ0JELGFBQWFFLE9BQU8sQ0FBQyxNQUFNLEtBQUtBLE9BQU8sQ0FBQyxNQUFNO0lBQ2xFLE9BQVFELGNBQWNFLE1BQU0sR0FBRztRQUMzQixLQUFLO1lBQ0Q7UUFDSixLQUFLO1lBQ0RGLGlCQUFpQjtZQUNqQjtRQUNKLEtBQUs7WUFDREEsaUJBQWlCO1lBQ2pCO1FBQ0o7WUFDSSxNQUFNUixtRkFBc0JBLENBQUNDLGlGQUFtQkE7SUFDeEQ7SUFDQSxNQUFNVSxZQUFZQyxLQUFLSjtJQUN2QixPQUFPSyxXQUFXQyxJQUFJLENBQUNILFdBQVcsQ0FBQ0ksSUFBTUEsRUFBRUMsV0FBVyxDQUFDLE1BQU07QUFDakU7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9lbmNvZGUvQmFzZTY0RGVjb2RlLm1qcz9iYzJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3NlckF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IGludmFsaWRCYXNlNjRTdHJpbmcgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDbGFzcyB3aGljaCBleHBvc2VzIEFQSXMgdG8gZGVjb2RlIGJhc2U2NCBzdHJpbmdzIHRvIHBsYWludGV4dC4gU2VlIGhlcmUgZm9yIGltcGxlbWVudGF0aW9uIGRldGFpbHM6XHJcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2xvc3NhcnkvQmFzZTY0I3RoZV91bmljb2RlX3Byb2JsZW1cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgVVJMLXNhZmUgcGxhaW50ZXh0IGRlY29kZWQgc3RyaW5nIGZyb20gYjY0IGVuY29kZWQgaW5wdXQuXHJcbiAqIEBwYXJhbSBpbnB1dFxyXG4gKi9cclxuZnVuY3Rpb24gYmFzZTY0RGVjb2RlKGlucHV0KSB7XHJcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJhc2U2NERlY1RvQXJyKGlucHV0KSk7XHJcbn1cclxuLyoqXHJcbiAqIERlY29kZXMgYmFzZTY0IGludG8gVWludDhBcnJheVxyXG4gKiBAcGFyYW0gYmFzZTY0U3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBiYXNlNjREZWNUb0FycihiYXNlNjRTdHJpbmcpIHtcclxuICAgIGxldCBlbmNvZGVkU3RyaW5nID0gYmFzZTY0U3RyaW5nLnJlcGxhY2UoLy0vZywgXCIrXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpO1xyXG4gICAgc3dpdGNoIChlbmNvZGVkU3RyaW5nLmxlbmd0aCAlIDQpIHtcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgZW5jb2RlZFN0cmluZyArPSBcIj09XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgZW5jb2RlZFN0cmluZyArPSBcIj1cIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcihpbnZhbGlkQmFzZTY0U3RyaW5nKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJpblN0cmluZyA9IGF0b2IoZW5jb2RlZFN0cmluZyk7XHJcbiAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKGJpblN0cmluZywgKG0pID0+IG0uY29kZVBvaW50QXQoMCkgfHwgMCk7XHJcbn1cblxuZXhwb3J0IHsgYmFzZTY0RGVjb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlNjREZWNvZGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IiLCJpbnZhbGlkQmFzZTY0U3RyaW5nIiwiYmFzZTY0RGVjb2RlIiwiaW5wdXQiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImJhc2U2NERlY1RvQXJyIiwiYmFzZTY0U3RyaW5nIiwiZW5jb2RlZFN0cmluZyIsInJlcGxhY2UiLCJsZW5ndGgiLCJiaW5TdHJpbmciLCJhdG9iIiwiVWludDhBcnJheSIsImZyb20iLCJtIiwiY29kZVBvaW50QXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64Encode: () => (/* binding */ base64Encode),\n/* harmony export */   urlEncode: () => (/* binding */ urlEncode),\n/* harmony export */   urlEncodeArr: () => (/* binding */ urlEncodeArr)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */ /**\r\n * Returns URL Safe b64 encoded string from a plaintext string.\r\n * @param input\r\n */ function urlEncode(input) {\n    return encodeURIComponent(base64Encode(input).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\"));\n}\n/**\r\n * Returns URL Safe b64 encoded string from an int8Array.\r\n * @param inputArr\r\n */ function urlEncodeArr(inputArr) {\n    return base64EncArr(inputArr).replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n/**\r\n * Returns b64 encoded string from plaintext string.\r\n * @param input\r\n */ function base64Encode(input) {\n    return base64EncArr(new TextEncoder().encode(input));\n}\n/**\r\n * Base64 encode byte array\r\n * @param aBytes\r\n */ function base64EncArr(aBytes) {\n    const binString = Array.from(aBytes, (x)=>String.fromCodePoint(x)).join(\"\");\n    return btoa(binString);\n}\n //# sourceMappingURL=Base64Encode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2VuY29kZS9CYXNlNjRFbmNvZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNELFNBQVNBLFVBQVVDLEtBQUs7SUFDcEIsT0FBT0MsbUJBQW1CQyxhQUFhRixPQUNsQ0csT0FBTyxDQUFDLE1BQU0sSUFDZEEsT0FBTyxDQUFDLE9BQU8sS0FDZkEsT0FBTyxDQUFDLE9BQU87QUFDeEI7QUFDQTs7O0NBR0MsR0FDRCxTQUFTQyxhQUFhQyxRQUFRO0lBQzFCLE9BQU9DLGFBQWFELFVBQ2ZGLE9BQU8sQ0FBQyxNQUFNLElBQ2RBLE9BQU8sQ0FBQyxPQUFPLEtBQ2ZBLE9BQU8sQ0FBQyxPQUFPO0FBQ3hCO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0QsYUFBYUYsS0FBSztJQUN2QixPQUFPTSxhQUFhLElBQUlDLGNBQWNDLE1BQU0sQ0FBQ1I7QUFDakQ7QUFDQTs7O0NBR0MsR0FDRCxTQUFTTSxhQUFhRyxNQUFNO0lBQ3hCLE1BQU1DLFlBQVlDLE1BQU1DLElBQUksQ0FBQ0gsUUFBUSxDQUFDSSxJQUFNQyxPQUFPQyxhQUFhLENBQUNGLElBQUlHLElBQUksQ0FBQztJQUMxRSxPQUFPQyxLQUFLUDtBQUNoQjtBQUVpRCxDQUNqRCx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2VuY29kZS9CYXNlNjRFbmNvZGUubWpzPzUwYTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENsYXNzIHdoaWNoIGV4cG9zZXMgQVBJcyB0byBlbmNvZGUgcGxhaW50ZXh0IHRvIGJhc2U2NCBlbmNvZGVkIHN0cmluZy4gU2VlIGhlcmUgZm9yIGltcGxlbWVudGF0aW9uIGRldGFpbHM6XHJcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3dCYXNlNjQvQmFzZTY0X2VuY29kaW5nX2FuZF9kZWNvZGluZyNTb2x1dGlvbl8yXyVFMiU4MCU5M19KYXZhU2NyaXB0J3NfVVRGLTE2XyUzRV9VVEYtOF8lM0VfYmFzZTY0XHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBVUkwgU2FmZSBiNjQgZW5jb2RlZCBzdHJpbmcgZnJvbSBhIHBsYWludGV4dCBzdHJpbmcuXHJcbiAqIEBwYXJhbSBpbnB1dFxyXG4gKi9cclxuZnVuY3Rpb24gdXJsRW5jb2RlKGlucHV0KSB7XHJcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGJhc2U2NEVuY29kZShpbnB1dClcclxuICAgICAgICAucmVwbGFjZSgvPS9nLCBcIlwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgXCItXCIpXHJcbiAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIFVSTCBTYWZlIGI2NCBlbmNvZGVkIHN0cmluZyBmcm9tIGFuIGludDhBcnJheS5cclxuICogQHBhcmFtIGlucHV0QXJyXHJcbiAqL1xyXG5mdW5jdGlvbiB1cmxFbmNvZGVBcnIoaW5wdXRBcnIpIHtcclxuICAgIHJldHVybiBiYXNlNjRFbmNBcnIoaW5wdXRBcnIpXHJcbiAgICAgICAgLnJlcGxhY2UoLz0vZywgXCJcIilcclxuICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXC8vZywgXCJfXCIpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGI2NCBlbmNvZGVkIHN0cmluZyBmcm9tIHBsYWludGV4dCBzdHJpbmcuXHJcbiAqIEBwYXJhbSBpbnB1dFxyXG4gKi9cclxuZnVuY3Rpb24gYmFzZTY0RW5jb2RlKGlucHV0KSB7XHJcbiAgICByZXR1cm4gYmFzZTY0RW5jQXJyKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShpbnB1dCkpO1xyXG59XHJcbi8qKlxyXG4gKiBCYXNlNjQgZW5jb2RlIGJ5dGUgYXJyYXlcclxuICogQHBhcmFtIGFCeXRlc1xyXG4gKi9cclxuZnVuY3Rpb24gYmFzZTY0RW5jQXJyKGFCeXRlcykge1xyXG4gICAgY29uc3QgYmluU3RyaW5nID0gQXJyYXkuZnJvbShhQnl0ZXMsICh4KSA9PiBTdHJpbmcuZnJvbUNvZGVQb2ludCh4KSkuam9pbihcIlwiKTtcclxuICAgIHJldHVybiBidG9hKGJpblN0cmluZyk7XHJcbn1cblxuZXhwb3J0IHsgYmFzZTY0RW5jb2RlLCB1cmxFbmNvZGUsIHVybEVuY29kZUFyciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZTY0RW5jb2RlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1cmxFbmNvZGUiLCJpbnB1dCIsImVuY29kZVVSSUNvbXBvbmVudCIsImJhc2U2NEVuY29kZSIsInJlcGxhY2UiLCJ1cmxFbmNvZGVBcnIiLCJpbnB1dEFyciIsImJhc2U2NEVuY0FyciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiYUJ5dGVzIiwiYmluU3RyaW5nIiwiQXJyYXkiLCJmcm9tIiwieCIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJqb2luIiwiYnRvYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Encode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserAuthError: () => (/* binding */ BrowserAuthError),\n/* harmony export */   BrowserAuthErrorCodes: () => (/* reexport module object */ _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   BrowserAuthErrorMessage: () => (/* binding */ BrowserAuthErrorMessage),\n/* harmony export */   BrowserAuthErrorMessages: () => (/* binding */ BrowserAuthErrorMessages),\n/* harmony export */   createBrowserAuthError: () => (/* binding */ createBrowserAuthError)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const ErrorLink = \"For more visit: aka.ms/msaljs/browser-errors\";\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const BrowserAuthErrorMessages = {\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceNotCreated]: \"The PKCE code challenge and verifier could not be generated.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoNonExistent]: \"The crypto object or function is not available.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyNavigateUri]: \"Navigation URI is empty. Please check stack trace for more info.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashEmptyError]: `Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noStateInHash]: \"Hash does not contain state. Please verify that the request originated from msal.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashDoesNotContainKnownProperties]: `Hash does not contain known properites. Please verify that your redirectUri is not changing the hash.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseState]: \"Unable to parse state. Please verify that the request originated from msal.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateInteractionTypeMismatch]: \"Hash contains state but the interaction type does not match the caller.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionInProgress]: `Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.   ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.popupWindowError]: \"Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyWindowError]: \"window.open returned null or undefined window object.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCancelled]: \"User cancelled the flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorPopupTimeout]: `Token acquisition in popup failed due to timeout.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorWindowTimeout]: `Token acquisition in iframe failed due to timeout.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectInIframe]: \"Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockIframeReload]: `Request was blocked inside an iframe because MSAL detected an authentication response.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNestedPopups]: \"Request was blocked inside a popup because MSAL detected it was running in a popup.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.iframeClosedPrematurely]: \"The iframe being monitored was closed prematurely.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentLogoutUnsupported]: \"Silent logout not supported. Please call logoutRedirect or logoutPopup instead.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountError]: \"No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentPromptValueError]: \"The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokenRequestCacheError]: \"No token request found in cache.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseTokenRequestCacheError]: \"The cached token request could not be parsed.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCachedAuthorityError]: \"No cached authority found.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authRequestNotSetError]: \"Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheType]: \"Invalid cache type\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonBrowserEnvironment]: \"Login and token requests are not supported in non-browser environments.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseNotOpen]: \"Database is not open!\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]: \"Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.getRequestFailed]: \"Network request failed. Please check the network trace to determine root cause.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseResponse]: \"Failed to parse network response. Check network trace.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToLoadToken]: \"Error loading token to cache.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoKeyNotFound]: \"Cryptographic Key or Keypair not found in browser storage.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeRequired]: \"An authorization code must be provided (as the `code` property on the request) to this flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeOrNativeAccountIdRequired]: \"An authorization code or nativeAccountId must be provided to this flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.spaCodeAndNativeAccountIdPresent]: \"Request cannot contain both spa code and native account id.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseUnavailable]: \"IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToAcquireTokenFromNativePlatform]: `Unable to acquire token from native platform.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeHandshakeTimeout]: \"Timed out while attempting to establish connection to browser extension\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeExtensionNotInstalled]: \"Native extension is not installed. If you think this is a mistake call the initialize function.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeConnectionNotEstablished]: `Connection to native platform has not been established. Please install a compatible browser extension and run initialize().  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.uninitializedPublicClientApplication]: `You must call and await the initialize function before attempting to call any other MSAL API.  ${ErrorLink}`,\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativePromptNotSupported]: \"The provided prompt is not supported by the native platform. This request should be routed to the web based flow.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidBase64String]: \"Invalid base64 encoded string.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPopTokenRequest]: \"Invalid PoP token request. The request should not have both a popKid value and signPopToken set to true.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToBuildHeaders]: \"Failed to build request headers object.\",\n    [_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseHeaders]: \"Failed to parse response headers\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use exported BrowserAuthErrorCodes instead.\r\n * In your app you can do :\r\n * ```\r\n * import { BrowserAuthErrorCodes } from \"@azure/msal-browser\";\r\n * ```\r\n */ const BrowserAuthErrorMessage = {\n    pkceNotGenerated: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceNotCreated,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceNotCreated]\n    },\n    cryptoDoesNotExist: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoNonExistent,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoNonExistent]\n    },\n    emptyNavigateUriError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyNavigateUri,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyNavigateUri]\n    },\n    hashEmptyError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashEmptyError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashEmptyError]\n    },\n    hashDoesNotContainStateError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noStateInHash,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noStateInHash]\n    },\n    hashDoesNotContainKnownPropertiesError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashDoesNotContainKnownProperties,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashDoesNotContainKnownProperties]\n    },\n    unableToParseStateError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseState,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseState]\n    },\n    stateInteractionTypeMismatchError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateInteractionTypeMismatch,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateInteractionTypeMismatch]\n    },\n    interactionInProgress: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionInProgress,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionInProgress]\n    },\n    popupWindowError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.popupWindowError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.popupWindowError]\n    },\n    emptyWindowError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyWindowError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyWindowError]\n    },\n    userCancelledError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCancelled,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCancelled]\n    },\n    monitorPopupTimeoutError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorPopupTimeout,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorPopupTimeout]\n    },\n    monitorIframeTimeoutError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorWindowTimeout,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.monitorWindowTimeout]\n    },\n    redirectInIframeError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectInIframe,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectInIframe]\n    },\n    blockTokenRequestsInHiddenIframeError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockIframeReload,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockIframeReload]\n    },\n    blockAcquireTokenInPopupsError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNestedPopups,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.blockNestedPopups]\n    },\n    iframeClosedPrematurelyError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.iframeClosedPrematurely,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.iframeClosedPrematurely]\n    },\n    silentLogoutUnsupportedError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentLogoutUnsupported,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentLogoutUnsupported]\n    },\n    noAccountError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountError]\n    },\n    silentPromptValueError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentPromptValueError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.silentPromptValueError]\n    },\n    noTokenRequestCacheError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokenRequestCacheError]\n    },\n    unableToParseTokenRequestCacheError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseTokenRequestCacheError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToParseTokenRequestCacheError]\n    },\n    noCachedAuthorityError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCachedAuthorityError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCachedAuthorityError]\n    },\n    authRequestNotSet: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authRequestNotSetError,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authRequestNotSetError]\n    },\n    invalidCacheType: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheType,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheType]\n    },\n    notInBrowserEnvironment: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonBrowserEnvironment,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonBrowserEnvironment]\n    },\n    databaseNotOpen: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseNotOpen,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseNotOpen]\n    },\n    noNetworkConnectivity: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]\n    },\n    postRequestFailed: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]\n    },\n    getRequestFailed: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.getRequestFailed,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.getRequestFailed]\n    },\n    failedToParseNetworkResponse: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseResponse,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.failedToParseResponse]\n    },\n    unableToLoadTokenError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToLoadToken,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToLoadToken]\n    },\n    signingKeyNotFoundInStorage: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoKeyNotFound,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cryptoKeyNotFound]\n    },\n    authCodeRequired: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeRequired,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeRequired]\n    },\n    authCodeOrNativeAccountRequired: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeOrNativeAccountIdRequired,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authCodeOrNativeAccountIdRequired]\n    },\n    spaCodeAndNativeAccountPresent: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.spaCodeAndNativeAccountIdPresent,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.spaCodeAndNativeAccountIdPresent]\n    },\n    databaseUnavailable: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseUnavailable,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.databaseUnavailable]\n    },\n    unableToAcquireTokenFromNativePlatform: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToAcquireTokenFromNativePlatform,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToAcquireTokenFromNativePlatform]\n    },\n    nativeHandshakeTimeout: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeHandshakeTimeout,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeHandshakeTimeout]\n    },\n    nativeExtensionNotInstalled: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeExtensionNotInstalled,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeExtensionNotInstalled]\n    },\n    nativeConnectionNotEstablished: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeConnectionNotEstablished,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeConnectionNotEstablished]\n    },\n    uninitializedPublicClientApplication: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.uninitializedPublicClientApplication,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.uninitializedPublicClientApplication]\n    },\n    nativePromptNotSupported: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativePromptNotSupported,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativePromptNotSupported]\n    },\n    invalidBase64StringError: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidBase64String,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidBase64String]\n    },\n    invalidPopTokenRequest: {\n        code: _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPopTokenRequest,\n        desc: BrowserAuthErrorMessages[_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPopTokenRequest]\n    }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */ class BrowserAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, subError){\n        super(errorCode, BrowserAuthErrorMessages[errorCode], subError);\n        Object.setPrototypeOf(this, BrowserAuthError.prototype);\n        this.name = \"BrowserAuthError\";\n    }\n}\nfunction createBrowserAuthError(errorCode, subError) {\n    return new BrowserAuthError(errorCode, subError);\n}\n //# sourceMappingURL=BrowserAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authCodeOrNativeAccountIdRequired: () => (/* binding */ authCodeOrNativeAccountIdRequired),\n/* harmony export */   authCodeRequired: () => (/* binding */ authCodeRequired),\n/* harmony export */   authRequestNotSetError: () => (/* binding */ authRequestNotSetError),\n/* harmony export */   blockIframeReload: () => (/* binding */ blockIframeReload),\n/* harmony export */   blockNestedPopups: () => (/* binding */ blockNestedPopups),\n/* harmony export */   cryptoKeyNotFound: () => (/* binding */ cryptoKeyNotFound),\n/* harmony export */   cryptoNonExistent: () => (/* binding */ cryptoNonExistent),\n/* harmony export */   databaseNotOpen: () => (/* binding */ databaseNotOpen),\n/* harmony export */   databaseUnavailable: () => (/* binding */ databaseUnavailable),\n/* harmony export */   emptyNavigateUri: () => (/* binding */ emptyNavigateUri),\n/* harmony export */   emptyWindowError: () => (/* binding */ emptyWindowError),\n/* harmony export */   failedToBuildHeaders: () => (/* binding */ failedToBuildHeaders),\n/* harmony export */   failedToParseHeaders: () => (/* binding */ failedToParseHeaders),\n/* harmony export */   failedToParseResponse: () => (/* binding */ failedToParseResponse),\n/* harmony export */   getRequestFailed: () => (/* binding */ getRequestFailed),\n/* harmony export */   hashDoesNotContainKnownProperties: () => (/* binding */ hashDoesNotContainKnownProperties),\n/* harmony export */   hashEmptyError: () => (/* binding */ hashEmptyError),\n/* harmony export */   iframeClosedPrematurely: () => (/* binding */ iframeClosedPrematurely),\n/* harmony export */   interactionInProgress: () => (/* binding */ interactionInProgress),\n/* harmony export */   invalidBase64String: () => (/* binding */ invalidBase64String),\n/* harmony export */   invalidCacheType: () => (/* binding */ invalidCacheType),\n/* harmony export */   invalidPopTokenRequest: () => (/* binding */ invalidPopTokenRequest),\n/* harmony export */   monitorPopupTimeout: () => (/* binding */ monitorPopupTimeout),\n/* harmony export */   monitorWindowTimeout: () => (/* binding */ monitorWindowTimeout),\n/* harmony export */   nativeConnectionNotEstablished: () => (/* binding */ nativeConnectionNotEstablished),\n/* harmony export */   nativeExtensionNotInstalled: () => (/* binding */ nativeExtensionNotInstalled),\n/* harmony export */   nativeHandshakeTimeout: () => (/* binding */ nativeHandshakeTimeout),\n/* harmony export */   nativePromptNotSupported: () => (/* binding */ nativePromptNotSupported),\n/* harmony export */   noAccountError: () => (/* binding */ noAccountError),\n/* harmony export */   noCachedAuthorityError: () => (/* binding */ noCachedAuthorityError),\n/* harmony export */   noNetworkConnectivity: () => (/* binding */ noNetworkConnectivity),\n/* harmony export */   noStateInHash: () => (/* binding */ noStateInHash),\n/* harmony export */   noTokenRequestCacheError: () => (/* binding */ noTokenRequestCacheError),\n/* harmony export */   nonBrowserEnvironment: () => (/* binding */ nonBrowserEnvironment),\n/* harmony export */   pkceNotCreated: () => (/* binding */ pkceNotCreated),\n/* harmony export */   popupWindowError: () => (/* binding */ popupWindowError),\n/* harmony export */   postRequestFailed: () => (/* binding */ postRequestFailed),\n/* harmony export */   redirectInIframe: () => (/* binding */ redirectInIframe),\n/* harmony export */   silentLogoutUnsupported: () => (/* binding */ silentLogoutUnsupported),\n/* harmony export */   silentPromptValueError: () => (/* binding */ silentPromptValueError),\n/* harmony export */   spaCodeAndNativeAccountIdPresent: () => (/* binding */ spaCodeAndNativeAccountIdPresent),\n/* harmony export */   stateInteractionTypeMismatch: () => (/* binding */ stateInteractionTypeMismatch),\n/* harmony export */   unableToAcquireTokenFromNativePlatform: () => (/* binding */ unableToAcquireTokenFromNativePlatform),\n/* harmony export */   unableToLoadToken: () => (/* binding */ unableToLoadToken),\n/* harmony export */   unableToParseState: () => (/* binding */ unableToParseState),\n/* harmony export */   unableToParseTokenRequestCacheError: () => (/* binding */ unableToParseTokenRequestCacheError),\n/* harmony export */   uninitializedPublicClientApplication: () => (/* binding */ uninitializedPublicClientApplication),\n/* harmony export */   userCancelled: () => (/* binding */ userCancelled)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const pkceNotCreated = \"pkce_not_created\";\nconst cryptoNonExistent = \"crypto_nonexistent\";\nconst emptyNavigateUri = \"empty_navigate_uri\";\nconst hashEmptyError = \"hash_empty_error\";\nconst noStateInHash = \"no_state_in_hash\";\nconst hashDoesNotContainKnownProperties = \"hash_does_not_contain_known_properties\";\nconst unableToParseState = \"unable_to_parse_state\";\nconst stateInteractionTypeMismatch = \"state_interaction_type_mismatch\";\nconst interactionInProgress = \"interaction_in_progress\";\nconst popupWindowError = \"popup_window_error\";\nconst emptyWindowError = \"empty_window_error\";\nconst userCancelled = \"user_cancelled\";\nconst monitorPopupTimeout = \"monitor_popup_timeout\";\nconst monitorWindowTimeout = \"monitor_window_timeout\";\nconst redirectInIframe = \"redirect_in_iframe\";\nconst blockIframeReload = \"block_iframe_reload\";\nconst blockNestedPopups = \"block_nested_popups\";\nconst iframeClosedPrematurely = \"iframe_closed_prematurely\";\nconst silentLogoutUnsupported = \"silent_logout_unsupported\";\nconst noAccountError = \"no_account_error\";\nconst silentPromptValueError = \"silent_prompt_value_error\";\nconst noTokenRequestCacheError = \"no_token_request_cache_error\";\nconst unableToParseTokenRequestCacheError = \"unable_to_parse_token_request_cache_error\";\nconst noCachedAuthorityError = \"no_cached_authority_error\";\nconst authRequestNotSetError = \"auth_request_not_set_error\";\nconst invalidCacheType = \"invalid_cache_type\";\nconst nonBrowserEnvironment = \"non_browser_environment\";\nconst databaseNotOpen = \"database_not_open\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst postRequestFailed = \"post_request_failed\";\nconst getRequestFailed = \"get_request_failed\";\nconst failedToParseResponse = \"failed_to_parse_response\";\nconst unableToLoadToken = \"unable_to_load_token\";\nconst cryptoKeyNotFound = \"crypto_key_not_found\";\nconst authCodeRequired = \"auth_code_required\";\nconst authCodeOrNativeAccountIdRequired = \"auth_code_or_nativeAccountId_required\";\nconst spaCodeAndNativeAccountIdPresent = \"spa_code_and_nativeAccountId_present\";\nconst databaseUnavailable = \"database_unavailable\";\nconst unableToAcquireTokenFromNativePlatform = \"unable_to_acquire_token_from_native_platform\";\nconst nativeHandshakeTimeout = \"native_handshake_timeout\";\nconst nativeExtensionNotInstalled = \"native_extension_not_installed\";\nconst nativeConnectionNotEstablished = \"native_connection_not_established\";\nconst uninitializedPublicClientApplication = \"uninitialized_public_client_application\";\nconst nativePromptNotSupported = \"native_prompt_not_supported\";\nconst invalidBase64String = \"invalid_base64_string\";\nconst invalidPopTokenRequest = \"invalid_pop_token_request\";\nconst failedToBuildHeaders = \"failed_to_build_headers\";\nconst failedToParseHeaders = \"failed_to_parse_headers\";\n //# sourceMappingURL=BrowserAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BrowserConfigurationAuthError: () => (/* binding */ BrowserConfigurationAuthError),\n/* harmony export */   BrowserConfigurationAuthErrorCodes: () => (/* reexport module object */ _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   BrowserConfigurationAuthErrorMessage: () => (/* binding */ BrowserConfigurationAuthErrorMessage),\n/* harmony export */   BrowserConfigurationAuthErrorMessages: () => (/* binding */ BrowserConfigurationAuthErrorMessages),\n/* harmony export */   createBrowserConfigurationAuthError: () => (/* binding */ createBrowserConfigurationAuthError)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const BrowserConfigurationAuthErrorMessages = {\n    [_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.storageNotSupported]: \"Given storage configuration option was not supported.\",\n    [_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stubbedPublicClientApplicationCalled]: \"Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors\",\n    [_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.inMemRedirectUnavailable]: \"Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true.\"\n};\n/**\r\n * BrowserAuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use BrowserAuthErrorCodes instead\r\n */ const BrowserConfigurationAuthErrorMessage = {\n    storageNotSupportedError: {\n        code: _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.storageNotSupported,\n        desc: BrowserConfigurationAuthErrorMessages[_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.storageNotSupported]\n    },\n    stubPcaInstanceCalled: {\n        code: _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stubbedPublicClientApplicationCalled,\n        desc: BrowserConfigurationAuthErrorMessages[_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stubbedPublicClientApplicationCalled]\n    },\n    inMemRedirectUnavailable: {\n        code: _BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.inMemRedirectUnavailable,\n        desc: BrowserConfigurationAuthErrorMessages[_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.inMemRedirectUnavailable]\n    }\n};\n/**\r\n * Browser library error class thrown by the MSAL.js library for SPAs\r\n */ class BrowserConfigurationAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        this.name = \"BrowserConfigurationAuthError\";\n        Object.setPrototypeOf(this, BrowserConfigurationAuthError.prototype);\n    }\n}\nfunction createBrowserConfigurationAuthError(errorCode) {\n    return new BrowserConfigurationAuthError(errorCode, BrowserConfigurationAuthErrorMessages[errorCode]);\n}\n //# sourceMappingURL=BrowserConfigurationAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL0Jyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3VEO0FBQ3dGO0FBQ2hEO0FBQ2pEO0FBRTlDOzs7Q0FHQyxHQUNELE1BQU1LLHdDQUF3QztJQUMxQyxDQUFDSix3RkFBbUJBLENBQUMsRUFBRTtJQUN2QixDQUFDQyx5R0FBb0NBLENBQUMsRUFBRTtJQUN4QyxDQUFDQyw2RkFBd0JBLENBQUMsRUFBRTtBQUNoQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1HLHVDQUF1QztJQUN6Q0MsMEJBQTBCO1FBQ3RCQyxNQUFNUCx3RkFBbUJBO1FBQ3pCUSxNQUFNSixxQ0FBcUMsQ0FBQ0osd0ZBQW1CQSxDQUFDO0lBQ3BFO0lBQ0FTLHVCQUF1QjtRQUNuQkYsTUFBTU4seUdBQW9DQTtRQUMxQ08sTUFBTUoscUNBQXFDLENBQUNILHlHQUFvQ0EsQ0FBQztJQUNyRjtJQUNBQywwQkFBMEI7UUFDdEJLLE1BQU1MLDZGQUF3QkE7UUFDOUJNLE1BQU1KLHFDQUFxQyxDQUFDRiw2RkFBd0JBLENBQUM7SUFDekU7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTVEsc0NBQXNDWCxpRUFBU0E7SUFDakRZLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxDQUFFO1FBQ2pDLEtBQUssQ0FBQ0QsV0FBV0M7UUFDakIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRU4sOEJBQThCTyxTQUFTO0lBQ3ZFO0FBQ0o7QUFDQSxTQUFTQyxvQ0FBb0NOLFNBQVM7SUFDbEQsT0FBTyxJQUFJRiw4QkFBOEJFLFdBQVdSLHFDQUFxQyxDQUFDUSxVQUFVO0FBQ3hHO0FBRTJKLENBQzNKLDBEQUEwRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvZXJyb3IvQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IubWpzPzg4NzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3IgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5pbXBvcnQgeyBzdG9yYWdlTm90U3VwcG9ydGVkLCBzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWQsIGluTWVtUmVkaXJlY3RVbmF2YWlsYWJsZSB9IGZyb20gJy4vQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JDb2Rlcy5tanMnO1xuaW1wb3J0ICogYXMgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JDb2RlcyBmcm9tICcuL0Jyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yQ29kZXMubWpzJztcbmV4cG9ydCB7IEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yQ29kZXMgfTtcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yTWVzc2FnZXMgPSB7XHJcbiAgICBbc3RvcmFnZU5vdFN1cHBvcnRlZF06IFwiR2l2ZW4gc3RvcmFnZSBjb25maWd1cmF0aW9uIG9wdGlvbiB3YXMgbm90IHN1cHBvcnRlZC5cIixcclxuICAgIFtzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWRdOiBcIlN0dWIgaW5zdGFuY2Ugb2YgUHVibGljIENsaWVudCBBcHBsaWNhdGlvbiB3YXMgY2FsbGVkLiBJZiB1c2luZyBtc2FsLXJlYWN0LCBwbGVhc2UgZW5zdXJlIGNvbnRleHQgaXMgbm90IHVzZWQgd2l0aG91dCBhIHByb3ZpZGVyLiBGb3IgbW9yZSB2aXNpdDogYWthLm1zL21zYWxqcy9icm93c2VyLWVycm9yc1wiLFxyXG4gICAgW2luTWVtUmVkaXJlY3RVbmF2YWlsYWJsZV06IFwiUmVkaXJlY3QgY2Fubm90IGJlIHN1cHBvcnRlZC4gSW4tbWVtb3J5IHN0b3JhZ2Ugd2FzIHNlbGVjdGVkIGFuZCBzdG9yZUF1dGhTdGF0ZUluQ29va2llPWZhbHNlLCB3aGljaCB3b3VsZCBjYXVzZSB0aGUgbGlicmFyeSB0byBiZSB1bmFibGUgdG8gaGFuZGxlIHRoZSBpbmNvbWluZyBoYXNoLiBJZiB5b3Ugd291bGQgbGlrZSB0byB1c2UgdGhlIHJlZGlyZWN0IEFQSSwgcGxlYXNlIHVzZSBzZXNzaW9uL2xvY2FsU3RvcmFnZSBvciBzZXQgc3RvcmVBdXRoU3RhdGVJbkNvb2tpZT10cnVlLlwiLFxyXG59O1xyXG4vKipcclxuICogQnJvd3NlckF1dGhFcnJvck1lc3NhZ2UgY2xhc3MgY29udGFpbmluZyBzdHJpbmcgY29uc3RhbnRzIHVzZWQgYnkgZXJyb3IgY29kZXMgYW5kIG1lc3NhZ2VzLlxyXG4gKiBAZGVwcmVjYXRlZCBVc2UgQnJvd3NlckF1dGhFcnJvckNvZGVzIGluc3RlYWRcclxuICovXHJcbmNvbnN0IEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yTWVzc2FnZSA9IHtcclxuICAgIHN0b3JhZ2VOb3RTdXBwb3J0ZWRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IHN0b3JhZ2VOb3RTdXBwb3J0ZWQsXHJcbiAgICAgICAgZGVzYzogQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlc1tzdG9yYWdlTm90U3VwcG9ydGVkXSxcclxuICAgIH0sXHJcbiAgICBzdHViUGNhSW5zdGFuY2VDYWxsZWQ6IHtcclxuICAgICAgICBjb2RlOiBzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWQsXHJcbiAgICAgICAgZGVzYzogQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlc1tzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWRdLFxyXG4gICAgfSxcclxuICAgIGluTWVtUmVkaXJlY3RVbmF2YWlsYWJsZToge1xyXG4gICAgICAgIGNvZGU6IGluTWVtUmVkaXJlY3RVbmF2YWlsYWJsZSxcclxuICAgICAgICBkZXNjOiBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvck1lc3NhZ2VzW2luTWVtUmVkaXJlY3RVbmF2YWlsYWJsZV0sXHJcbiAgICB9LFxyXG59O1xyXG4vKipcclxuICogQnJvd3NlciBsaWJyYXJ5IGVycm9yIGNsYXNzIHRocm93biBieSB0aGUgTVNBTC5qcyBsaWJyYXJ5IGZvciBTUEFzXHJcbiAqL1xyXG5jbGFzcyBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIHN1cGVyKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIkJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yXCI7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IoZXJyb3JDb2RlKSB7XHJcbiAgICByZXR1cm4gbmV3IEJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yKGVycm9yQ29kZSwgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlc1tlcnJvckNvZGVdKTtcclxufVxuXG5leHBvcnQgeyBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvciwgQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlLCBCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvck1lc3NhZ2VzLCBjcmVhdGVCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhFcnJvciIsInN0b3JhZ2VOb3RTdXBwb3J0ZWQiLCJzdHViYmVkUHVibGljQ2xpZW50QXBwbGljYXRpb25DYWxsZWQiLCJpbk1lbVJlZGlyZWN0VW5hdmFpbGFibGUiLCJCcm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvckNvZGVzIiwiQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JNZXNzYWdlcyIsIkJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yTWVzc2FnZSIsInN0b3JhZ2VOb3RTdXBwb3J0ZWRFcnJvciIsImNvZGUiLCJkZXNjIiwic3R1YlBjYUluc3RhbmNlQ2FsbGVkIiwiQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsIm5hbWUiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImNyZWF0ZUJyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inMemRedirectUnavailable: () => (/* binding */ inMemRedirectUnavailable),\n/* harmony export */   storageNotSupported: () => (/* binding */ storageNotSupported),\n/* harmony export */   stubbedPublicClientApplicationCalled: () => (/* binding */ stubbedPublicClientApplicationCalled)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const storageNotSupported = \"storage_not_supported\";\nconst stubbedPublicClientApplicationCalled = \"stubbed_public_client_application_called\";\nconst inMemRedirectUnavailable = \"in_mem_redirect_unavailable\";\n //# sourceMappingURL=BrowserConfigurationAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL0Jyb3dzZXJDb25maWd1cmF0aW9uQXV0aEVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLHNCQUFzQjtBQUM1QixNQUFNQyx1Q0FBdUM7QUFDN0MsTUFBTUMsMkJBQTJCO0FBRThELENBQy9GLCtEQUErRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvZXJyb3IvQnJvd3NlckNvbmZpZ3VyYXRpb25BdXRoRXJyb3JDb2Rlcy5tanM/ZDAzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBzdG9yYWdlTm90U3VwcG9ydGVkID0gXCJzdG9yYWdlX25vdF9zdXBwb3J0ZWRcIjtcclxuY29uc3Qgc3R1YmJlZFB1YmxpY0NsaWVudEFwcGxpY2F0aW9uQ2FsbGVkID0gXCJzdHViYmVkX3B1YmxpY19jbGllbnRfYXBwbGljYXRpb25fY2FsbGVkXCI7XHJcbmNvbnN0IGluTWVtUmVkaXJlY3RVbmF2YWlsYWJsZSA9IFwiaW5fbWVtX3JlZGlyZWN0X3VuYXZhaWxhYmxlXCI7XG5cbmV4cG9ydCB7IGluTWVtUmVkaXJlY3RVbmF2YWlsYWJsZSwgc3RvcmFnZU5vdFN1cHBvcnRlZCwgc3R1YmJlZFB1YmxpY0NsaWVudEFwcGxpY2F0aW9uQ2FsbGVkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ccm93c2VyQ29uZmlndXJhdGlvbkF1dGhFcnJvckNvZGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJzdG9yYWdlTm90U3VwcG9ydGVkIiwic3R1YmJlZFB1YmxpY0NsaWVudEFwcGxpY2F0aW9uQ2FsbGVkIiwiaW5NZW1SZWRpcmVjdFVuYXZhaWxhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NativeAuthError: () => (/* binding */ NativeAuthError),\n/* harmony export */   NativeAuthErrorMessages: () => (/* binding */ NativeAuthErrorMessages),\n/* harmony export */   createNativeAuthError: () => (/* binding */ createNativeAuthError),\n/* harmony export */   isFatalNativeAuthError: () => (/* binding */ isFatalNativeAuthError)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/* harmony import */ var _BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NativeAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../broker/nativeBroker/NativeStatusCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeStatusCodes.mjs\");\n/* harmony import */ var _BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const INVALID_METHOD_ERROR = -2147186943;\nconst NativeAuthErrorMessages = {\n    [_NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userSwitch]: \"User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again.\"\n};\nclass NativeAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, description, ext){\n        super(errorCode, description);\n        Object.setPrototypeOf(this, NativeAuthError.prototype);\n        this.name = \"NativeAuthError\";\n        this.ext = ext;\n    }\n}\n/**\r\n * These errors should result in a fallback to the 'standard' browser based auth flow.\r\n */ function isFatalNativeAuthError(error) {\n    if (error.ext && error.ext.status && (error.ext.status === _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.PERSISTENT_ERROR || error.ext.status === _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.DISABLED)) {\n        return true;\n    }\n    if (error.ext && error.ext.error && error.ext.error === INVALID_METHOD_ERROR) {\n        return true;\n    }\n    switch(error.errorCode){\n        case _NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.contentError:\n            return true;\n        default:\n            return false;\n    }\n}\n/**\r\n * Create the appropriate error object based on the WAM status code.\r\n * @param code\r\n * @param description\r\n * @param ext\r\n * @returns\r\n */ function createNativeAuthError(code, description, ext) {\n    if (ext && ext.status) {\n        switch(ext.status){\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.ACCOUNT_UNAVAILABLE:\n                return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createInteractionRequiredAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nativeAccountUnavailable);\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.USER_INTERACTION_REQUIRED:\n                return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.InteractionRequiredAuthError(code, description);\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.USER_CANCEL:\n                return (0,_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.userCancelled);\n            case _broker_nativeBroker_NativeStatusCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.NO_NETWORK:\n                return (0,_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.noNetworkConnectivity);\n        }\n    }\n    return new NativeAuthError(code, NativeAuthErrorMessages[code] || description, ext);\n}\n //# sourceMappingURL=NativeAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL05hdGl2ZUF1dGhFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNEo7QUFDNUY7QUFDTTtBQUM2RjtBQUNoRjtBQUVuRjs7O0NBR0MsR0FDRCxNQUFNZSx1QkFBdUIsQ0FBQztBQUM5QixNQUFNQywwQkFBMEI7SUFDNUIsQ0FBQ1YsaUVBQVVBLENBQUMsRUFBRTtBQUNsQjtBQUNBLE1BQU1XLHdCQUF3QmpCLGlFQUFTQTtJQUNuQ2tCLFlBQVlDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxHQUFHLENBQUU7UUFDckMsS0FBSyxDQUFDRixXQUFXQztRQUNqQkUsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRU4sZ0JBQWdCTyxTQUFTO1FBQ3JELElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDSixHQUFHLEdBQUdBO0lBQ2Y7QUFDSjtBQUNBOztDQUVDLEdBQ0QsU0FBU0ssdUJBQXVCQyxLQUFLO0lBQ2pDLElBQUlBLE1BQU1OLEdBQUcsSUFDVE0sTUFBTU4sR0FBRyxDQUFDTyxNQUFNLElBQ2ZELENBQUFBLE1BQU1OLEdBQUcsQ0FBQ08sTUFBTSxLQUFLckIsd0ZBQWdCQSxJQUNsQ29CLE1BQU1OLEdBQUcsQ0FBQ08sTUFBTSxLQUFLcEIsZ0ZBQU8sR0FBSTtRQUNwQyxPQUFPO0lBQ1g7SUFDQSxJQUFJbUIsTUFBTU4sR0FBRyxJQUNUTSxNQUFNTixHQUFHLENBQUNNLEtBQUssSUFDZkEsTUFBTU4sR0FBRyxDQUFDTSxLQUFLLEtBQUtaLHNCQUFzQjtRQUMxQyxPQUFPO0lBQ1g7SUFDQSxPQUFRWSxNQUFNUixTQUFTO1FBQ25CLEtBQUtkLG1FQUFZQTtZQUNiLE9BQU87UUFDWDtZQUNJLE9BQU87SUFDZjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU3dCLHNCQUFzQkMsSUFBSSxFQUFFVixXQUFXLEVBQUVDLEdBQUc7SUFDakQsSUFBSUEsT0FBT0EsSUFBSU8sTUFBTSxFQUFFO1FBQ25CLE9BQVFQLElBQUlPLE1BQU07WUFDZCxLQUFLaEIsMkZBQW1CQTtnQkFDcEIsT0FBT1YsOEZBQWtDQSxDQUFDQyxnRkFBMEQ7WUFDeEcsS0FBS1EsaUdBQXlCQTtnQkFDMUIsT0FBTyxJQUFJVixvRkFBNEJBLENBQUM2QixNQUFNVjtZQUNsRCxLQUFLVixtRkFBV0E7Z0JBQ1osT0FBT04sNkVBQXNCQSxDQUFDVSxxRUFBYUE7WUFDL0MsS0FBS0wsa0ZBQVVBO2dCQUNYLE9BQU9MLDZFQUFzQkEsQ0FBQ1MsNkVBQXFCQTtRQUMzRDtJQUNKO0lBQ0EsT0FBTyxJQUFJSSxnQkFBZ0JhLE1BQU1kLHVCQUF1QixDQUFDYyxLQUFLLElBQUlWLGFBQWFDO0FBQ25GO0FBRW1HLENBQ25HLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvZXJyb3IvTmF0aXZlQXV0aEVycm9yLm1qcz9jYzcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLCBjcmVhdGVJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VyQXV0aEVycm9yIH0gZnJvbSAnLi9Ccm93c2VyQXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBjb250ZW50RXJyb3IsIHVzZXJTd2l0Y2ggfSBmcm9tICcuL05hdGl2ZUF1dGhFcnJvckNvZGVzLm1qcyc7XG5pbXBvcnQgeyBQRVJTSVNURU5UX0VSUk9SLCBESVNBQkxFRCwgTk9fTkVUV09SSywgVVNFUl9DQU5DRUwsIFVTRVJfSU5URVJBQ1RJT05fUkVRVUlSRUQsIEFDQ09VTlRfVU5BVkFJTEFCTEUgfSBmcm9tICcuLi9icm9rZXIvbmF0aXZlQnJva2VyL05hdGl2ZVN0YXR1c0NvZGVzLm1qcyc7XG5pbXBvcnQgeyBub05ldHdvcmtDb25uZWN0aXZpdHksIHVzZXJDYW5jZWxsZWQgfSBmcm9tICcuL0Jyb3dzZXJBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgSU5WQUxJRF9NRVRIT0RfRVJST1IgPSAtMjE0NzE4Njk0MztcclxuY29uc3QgTmF0aXZlQXV0aEVycm9yTWVzc2FnZXMgPSB7XHJcbiAgICBbdXNlclN3aXRjaF06IFwiVXNlciBhdHRlbXB0ZWQgdG8gc3dpdGNoIGFjY291bnRzIGluIHRoZSBuYXRpdmUgYnJva2VyLCB3aGljaCBpcyBub3QgYWxsb3dlZC4gQWxsIG5ldyBhY2NvdW50cyBtdXN0IHNpZ24taW4gdGhyb3VnaCB0aGUgc3RhbmRhcmQgd2ViIGZsb3cgZmlyc3QsIHBsZWFzZSB0cnkgYWdhaW4uXCIsXHJcbn07XHJcbmNsYXNzIE5hdGl2ZUF1dGhFcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihlcnJvckNvZGUsIGRlc2NyaXB0aW9uLCBleHQpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGRlc2NyaXB0aW9uKTtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTmF0aXZlQXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJOYXRpdmVBdXRoRXJyb3JcIjtcclxuICAgICAgICB0aGlzLmV4dCA9IGV4dDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVGhlc2UgZXJyb3JzIHNob3VsZCByZXN1bHQgaW4gYSBmYWxsYmFjayB0byB0aGUgJ3N0YW5kYXJkJyBicm93c2VyIGJhc2VkIGF1dGggZmxvdy5cclxuICovXHJcbmZ1bmN0aW9uIGlzRmF0YWxOYXRpdmVBdXRoRXJyb3IoZXJyb3IpIHtcclxuICAgIGlmIChlcnJvci5leHQgJiZcclxuICAgICAgICBlcnJvci5leHQuc3RhdHVzICYmXHJcbiAgICAgICAgKGVycm9yLmV4dC5zdGF0dXMgPT09IFBFUlNJU1RFTlRfRVJST1IgfHxcclxuICAgICAgICAgICAgZXJyb3IuZXh0LnN0YXR1cyA9PT0gRElTQUJMRUQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IuZXh0ICYmXHJcbiAgICAgICAgZXJyb3IuZXh0LmVycm9yICYmXHJcbiAgICAgICAgZXJyb3IuZXh0LmVycm9yID09PSBJTlZBTElEX01FVEhPRF9FUlJPUikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChlcnJvci5lcnJvckNvZGUpIHtcclxuICAgICAgICBjYXNlIGNvbnRlbnRFcnJvcjpcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGUgdGhlIGFwcHJvcHJpYXRlIGVycm9yIG9iamVjdCBiYXNlZCBvbiB0aGUgV0FNIHN0YXR1cyBjb2RlLlxyXG4gKiBAcGFyYW0gY29kZVxyXG4gKiBAcGFyYW0gZGVzY3JpcHRpb25cclxuICogQHBhcmFtIGV4dFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlTmF0aXZlQXV0aEVycm9yKGNvZGUsIGRlc2NyaXB0aW9uLCBleHQpIHtcclxuICAgIGlmIChleHQgJiYgZXh0LnN0YXR1cykge1xyXG4gICAgICAgIHN3aXRjaCAoZXh0LnN0YXR1cykge1xyXG4gICAgICAgICAgICBjYXNlIEFDQ09VTlRfVU5BVkFJTEFCTEU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvcihJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMubmF0aXZlQWNjb3VudFVuYXZhaWxhYmxlKTtcclxuICAgICAgICAgICAgY2FzZSBVU0VSX0lOVEVSQUNUSU9OX1JFUVVJUkVEOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yKGNvZGUsIGRlc2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgY2FzZSBVU0VSX0NBTkNFTDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCcm93c2VyQXV0aEVycm9yKHVzZXJDYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICBjYXNlIE5PX05FVFdPUks6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQnJvd3NlckF1dGhFcnJvcihub05ldHdvcmtDb25uZWN0aXZpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgTmF0aXZlQXV0aEVycm9yKGNvZGUsIE5hdGl2ZUF1dGhFcnJvck1lc3NhZ2VzW2NvZGVdIHx8IGRlc2NyaXB0aW9uLCBleHQpO1xyXG59XG5cbmV4cG9ydCB7IE5hdGl2ZUF1dGhFcnJvciwgTmF0aXZlQXV0aEVycm9yTWVzc2FnZXMsIGNyZWF0ZU5hdGl2ZUF1dGhFcnJvciwgaXNGYXRhbE5hdGl2ZUF1dGhFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmF0aXZlQXV0aEVycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRoRXJyb3IiLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIiwiY3JlYXRlSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvciIsIkludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2RlcyIsImNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IiLCJjb250ZW50RXJyb3IiLCJ1c2VyU3dpdGNoIiwiUEVSU0lTVEVOVF9FUlJPUiIsIkRJU0FCTEVEIiwiTk9fTkVUV09SSyIsIlVTRVJfQ0FOQ0VMIiwiVVNFUl9JTlRFUkFDVElPTl9SRVFVSVJFRCIsIkFDQ09VTlRfVU5BVkFJTEFCTEUiLCJub05ldHdvcmtDb25uZWN0aXZpdHkiLCJ1c2VyQ2FuY2VsbGVkIiwiSU5WQUxJRF9NRVRIT0RfRVJST1IiLCJOYXRpdmVBdXRoRXJyb3JNZXNzYWdlcyIsIk5hdGl2ZUF1dGhFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JDb2RlIiwiZGVzY3JpcHRpb24iLCJleHQiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIm5hbWUiLCJpc0ZhdGFsTmF0aXZlQXV0aEVycm9yIiwiZXJyb3IiLCJzdGF0dXMiLCJjcmVhdGVOYXRpdmVBdXRoRXJyb3IiLCJjb2RlIiwibmF0aXZlQWNjb3VudFVuYXZhaWxhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentError: () => (/* binding */ contentError),\n/* harmony export */   userSwitch: () => (/* binding */ userSwitch)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const contentError = \"ContentError\";\nconst userSwitch = \"user_switch\";\n //# sourceMappingURL=NativeAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL05hdGl2ZUF1dGhFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLGVBQWU7QUFDckIsTUFBTUMsYUFBYTtBQUVpQixDQUNwQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL05hdGl2ZUF1dGhFcnJvckNvZGVzLm1qcz9mZGEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGNvbnRlbnRFcnJvciA9IFwiQ29udGVudEVycm9yXCI7XHJcbmNvbnN0IHVzZXJTd2l0Y2ggPSBcInVzZXJfc3dpdGNoXCI7XG5cbmV4cG9ydCB7IGNvbnRlbnRFcnJvciwgdXNlclN3aXRjaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmF0aXZlQXV0aEVycm9yQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnRlbnRFcnJvciIsInVzZXJTd2l0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppAuthError: () => (/* binding */ NestedAppAuthError),\n/* harmony export */   NestedAppAuthErrorMessage: () => (/* binding */ NestedAppAuthErrorMessage)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"This method is not supported in nested app environment.\"\n    }\n};\nclass NestedAppAuthError extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n    static createUnsupportedError() {\n        return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code, NestedAppAuthErrorMessage.unsupportedMethod.desc);\n    }\n}\n //# sourceMappingURL=NestedAppAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2Vycm9yL05lc3RlZEFwcEF1dGhFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3VEO0FBRXZEOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUMsNEJBQTRCO0lBQzlCQyxtQkFBbUI7UUFDZkMsTUFBTTtRQUNOQyxNQUFNO0lBQ1Y7QUFDSjtBQUNBLE1BQU1DLDJCQUEyQkwsaUVBQVNBO0lBQ3RDTSxZQUFZQyxTQUFTLEVBQUVDLFlBQVksQ0FBRTtRQUNqQyxLQUFLLENBQUNELFdBQVdDO1FBQ2pCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFTCxtQkFBbUJNLFNBQVM7UUFDeEQsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7SUFDQSxPQUFPQyx5QkFBeUI7UUFDNUIsT0FBTyxJQUFJUixtQkFBbUJKLDBCQUEwQkMsaUJBQWlCLENBQUNDLElBQUksRUFBRUYsMEJBQTBCQyxpQkFBaUIsQ0FBQ0UsSUFBSTtJQUNwSTtBQUNKO0FBRXlELENBQ3pELCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3QvZXJyb3IvTmVzdGVkQXBwQXV0aEVycm9yLm1qcz83OTdmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yIH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL2Jyb3dzZXInO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIE5lc3RlZEFwcEF1dGhFcnJvck1lc3NhZ2UgY2xhc3MgY29udGFpbmluZyBzdHJpbmcgY29uc3RhbnRzIHVzZWQgYnkgZXJyb3IgY29kZXMgYW5kIG1lc3NhZ2VzLlxyXG4gKi9cclxuY29uc3QgTmVzdGVkQXBwQXV0aEVycm9yTWVzc2FnZSA9IHtcclxuICAgIHVuc3VwcG9ydGVkTWV0aG9kOiB7XHJcbiAgICAgICAgY29kZTogXCJ1bnN1cHBvcnRlZF9tZXRob2RcIixcclxuICAgICAgICBkZXNjOiBcIlRoaXMgbWV0aG9kIGlzIG5vdCBzdXBwb3J0ZWQgaW4gbmVzdGVkIGFwcCBlbnZpcm9ubWVudC5cIixcclxuICAgIH0sXHJcbn07XHJcbmNsYXNzIE5lc3RlZEFwcEF1dGhFcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgIHN1cGVyKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgTmVzdGVkQXBwQXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJOZXN0ZWRBcHBBdXRoRXJyb3JcIjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjcmVhdGVVbnN1cHBvcnRlZEVycm9yKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgTmVzdGVkQXBwQXV0aEVycm9yKE5lc3RlZEFwcEF1dGhFcnJvck1lc3NhZ2UudW5zdXBwb3J0ZWRNZXRob2QuY29kZSwgTmVzdGVkQXBwQXV0aEVycm9yTWVzc2FnZS51bnN1cHBvcnRlZE1ldGhvZC5kZXNjKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBOZXN0ZWRBcHBBdXRoRXJyb3IsIE5lc3RlZEFwcEF1dGhFcnJvck1lc3NhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5lc3RlZEFwcEF1dGhFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aEVycm9yIiwiTmVzdGVkQXBwQXV0aEVycm9yTWVzc2FnZSIsInVuc3VwcG9ydGVkTWV0aG9kIiwiY29kZSIsImRlc2MiLCJOZXN0ZWRBcHBBdXRoRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwibmFtZSIsImNyZWF0ZVVuc3VwcG9ydGVkRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventHandler: () => (/* binding */ EventHandler)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class EventHandler {\n    constructor(logger){\n        this.eventCallbacks = new Map();\n        this.logger = logger || new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Logger({});\n    }\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback - callback to be invoked when an event is raised\r\n     * @param eventTypes - list of events that this callback will be invoked for, if not provided callback will be invoked for all events\r\n     * @param callbackId - Identifier for the callback, used to locate and remove the callback when no longer required\r\n     */ addEventCallback(callback, eventTypes, callbackId) {\n        if (false) {}\n        return null;\n    }\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */ removeEventCallback(callbackId) {\n        this.eventCallbacks.delete(callbackId);\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\n    }\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */ emitEvent(eventType, interactionType, payload, error) {\n        if (false) {}\n    }\n}\n //# sourceMappingURL=EventHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2V2ZW50L0V2ZW50SGFuZGxlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDb0Q7QUFDRztBQUV2RDs7O0NBR0MsR0FDRCxNQUFNRTtJQUNGQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSUM7UUFDMUIsSUFBSSxDQUFDRixNQUFNLEdBQUdBLFVBQVUsSUFBSUosOERBQU1BLENBQUMsQ0FBQztJQUN4QztJQUNBOzs7OztLQUtDLEdBQ0RPLGlCQUFpQkMsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLFVBQVUsRUFBRTtRQUMvQyxJQUFJLEtBQTZCLEVBQUUsRUFTbEM7UUFDRCxPQUFPO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRE0sb0JBQW9CTixVQUFVLEVBQUU7UUFDNUIsSUFBSSxDQUFDTCxjQUFjLENBQUNZLE1BQU0sQ0FBQ1A7UUFDM0IsSUFBSSxDQUFDTixNQUFNLENBQUNXLE9BQU8sQ0FBQyxDQUFDLGVBQWUsRUFBRUwsV0FBVyxTQUFTLENBQUM7SUFDL0Q7SUFDQTs7Ozs7O0tBTUMsR0FDRFEsVUFBVUMsU0FBUyxFQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRVIsS0FBSyxFQUFFO1FBQ2xELElBQUksS0FBNkIsRUFBRSxFQWVsQztJQUNMO0FBQ0o7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9ldmVudC9FdmVudEhhbmRsZXIubWpzPzdiNTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5pbXBvcnQgeyBjcmVhdGVHdWlkIH0gZnJvbSAnLi4vdXRpbHMvQnJvd3NlclV0aWxzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBFdmVudEhhbmRsZXIge1xyXG4gICAgY29uc3RydWN0b3IobG9nZ2VyKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudENhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlciB8fCBuZXcgTG9nZ2VyKHt9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBldmVudCBjYWxsYmFja3MgdG8gYXJyYXlcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBhbiBldmVudCBpcyByYWlzZWRcclxuICAgICAqIEBwYXJhbSBldmVudFR5cGVzIC0gbGlzdCBvZiBldmVudHMgdGhhdCB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgaW52b2tlZCBmb3IsIGlmIG5vdCBwcm92aWRlZCBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQgZm9yIGFsbCBldmVudHNcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja0lkIC0gSWRlbnRpZmllciBmb3IgdGhlIGNhbGxiYWNrLCB1c2VkIHRvIGxvY2F0ZSBhbmQgcmVtb3ZlIHRoZSBjYWxsYmFjayB3aGVuIG5vIGxvbmdlciByZXF1aXJlZFxyXG4gICAgICovXHJcbiAgICBhZGRFdmVudENhbGxiYWNrKGNhbGxiYWNrLCBldmVudFR5cGVzLCBjYWxsYmFja0lkKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBjYWxsYmFja0lkIHx8IGNyZWF0ZUd1aWQoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZXZlbnRDYWxsYmFja3MuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEV2ZW50IGNhbGxiYWNrIHdpdGggaWQ6ICR7aWR9IGlzIGFscmVhZHkgcmVnaXN0ZXJlZC4gUGxlYXNlIHByb3ZpZGUgYSB1bmlxdWUgaWQgb3IgcmVtb3ZlIHRoZSBleGlzdGluZyBjYWxsYmFjayBhbmQgdHJ5IGFnYWluLmApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5ldmVudENhbGxiYWNrcy5zZXQoaWQsIFtjYWxsYmFjaywgZXZlbnRUeXBlcyB8fCBbXV0pO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKGBFdmVudCBjYWxsYmFjayByZWdpc3RlcmVkIHdpdGggaWQ6ICR7aWR9YCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgY2FsbGJhY2sgd2l0aCBwcm92aWRlZCBpZCBmcm9tIGNhbGxiYWNrIGFycmF5XHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tJZFxyXG4gICAgICovXHJcbiAgICByZW1vdmVFdmVudENhbGxiYWNrKGNhbGxiYWNrSWQpIHtcclxuICAgICAgICB0aGlzLmV2ZW50Q2FsbGJhY2tzLmRlbGV0ZShjYWxsYmFja0lkKTtcclxuICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKGBFdmVudCBjYWxsYmFjayAke2NhbGxiYWNrSWR9IHJlbW92ZWQuYCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVtaXRzIGV2ZW50cyBieSBjYWxsaW5nIGNhbGxiYWNrIHdpdGggZXZlbnQgbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIGV2ZW50VHlwZVxyXG4gICAgICogQHBhcmFtIGludGVyYWN0aW9uVHlwZVxyXG4gICAgICogQHBhcmFtIHBheWxvYWRcclxuICAgICAqIEBwYXJhbSBlcnJvclxyXG4gICAgICovXHJcbiAgICBlbWl0RXZlbnQoZXZlbnRUeXBlLCBpbnRlcmFjdGlvblR5cGUsIHBheWxvYWQsIGVycm9yKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogZXZlbnRUeXBlLFxyXG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25UeXBlOiBpbnRlcmFjdGlvblR5cGUgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWQgfHwgbnVsbCxcclxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciB8fCBudWxsLFxyXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50Q2FsbGJhY2tzLmZvckVhY2goKFtjYWxsYmFjaywgZXZlbnRUeXBlc10sIGNhbGxiYWNrSWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudFR5cGVzLmxlbmd0aCA9PT0gMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZXMuaW5jbHVkZXMoZXZlbnRUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoYEVtaXR0aW5nIGV2ZW50IHRvIGNhbGxiYWNrICR7Y2FsbGJhY2tJZH06ICR7ZXZlbnRUeXBlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIFttZXNzYWdlXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBFdmVudEhhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV2ZW50SGFuZGxlci5tanMubWFwXG4iXSwibmFtZXMiOlsiTG9nZ2VyIiwiY3JlYXRlR3VpZCIsIkV2ZW50SGFuZGxlciIsImNvbnN0cnVjdG9yIiwibG9nZ2VyIiwiZXZlbnRDYWxsYmFja3MiLCJNYXAiLCJhZGRFdmVudENhbGxiYWNrIiwiY2FsbGJhY2siLCJldmVudFR5cGVzIiwiY2FsbGJhY2tJZCIsImlkIiwiaGFzIiwiZXJyb3IiLCJzZXQiLCJ2ZXJib3NlIiwicmVtb3ZlRXZlbnRDYWxsYmFjayIsImRlbGV0ZSIsImVtaXRFdmVudCIsImV2ZW50VHlwZSIsImludGVyYWN0aW9uVHlwZSIsInBheWxvYWQiLCJtZXNzYWdlIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsImZvckVhY2giLCJsZW5ndGgiLCJpbmNsdWRlcyIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/event/EventHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/event/EventType.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventType: () => (/* binding */ EventType)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const EventType = {\n    INITIALIZE_START: \"msal:initializeStart\",\n    INITIALIZE_END: \"msal:initializeEnd\",\n    ACCOUNT_ADDED: \"msal:accountAdded\",\n    ACCOUNT_REMOVED: \"msal:accountRemoved\",\n    ACTIVE_ACCOUNT_CHANGED: \"msal:activeAccountChanged\",\n    LOGIN_START: \"msal:loginStart\",\n    LOGIN_SUCCESS: \"msal:loginSuccess\",\n    LOGIN_FAILURE: \"msal:loginFailure\",\n    ACQUIRE_TOKEN_START: \"msal:acquireTokenStart\",\n    ACQUIRE_TOKEN_SUCCESS: \"msal:acquireTokenSuccess\",\n    ACQUIRE_TOKEN_FAILURE: \"msal:acquireTokenFailure\",\n    ACQUIRE_TOKEN_NETWORK_START: \"msal:acquireTokenFromNetworkStart\",\n    SSO_SILENT_START: \"msal:ssoSilentStart\",\n    SSO_SILENT_SUCCESS: \"msal:ssoSilentSuccess\",\n    SSO_SILENT_FAILURE: \"msal:ssoSilentFailure\",\n    ACQUIRE_TOKEN_BY_CODE_START: \"msal:acquireTokenByCodeStart\",\n    ACQUIRE_TOKEN_BY_CODE_SUCCESS: \"msal:acquireTokenByCodeSuccess\",\n    ACQUIRE_TOKEN_BY_CODE_FAILURE: \"msal:acquireTokenByCodeFailure\",\n    HANDLE_REDIRECT_START: \"msal:handleRedirectStart\",\n    HANDLE_REDIRECT_END: \"msal:handleRedirectEnd\",\n    POPUP_OPENED: \"msal:popupOpened\",\n    LOGOUT_START: \"msal:logoutStart\",\n    LOGOUT_SUCCESS: \"msal:logoutSuccess\",\n    LOGOUT_FAILURE: \"msal:logoutFailure\",\n    LOGOUT_END: \"msal:logoutEnd\",\n    RESTORE_FROM_BFCACHE: \"msal:restoreFromBFCache\"\n};\n //# sourceMappingURL=EventType.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2V2ZW50L0V2ZW50VHlwZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLFlBQVk7SUFDZEMsa0JBQWtCO0lBQ2xCQyxnQkFBZ0I7SUFDaEJDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyx3QkFBd0I7SUFDeEJDLGFBQWE7SUFDYkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLHFCQUFxQjtJQUNyQkMsdUJBQXVCO0lBQ3ZCQyx1QkFBdUI7SUFDdkJDLDZCQUE2QjtJQUM3QkMsa0JBQWtCO0lBQ2xCQyxvQkFBb0I7SUFDcEJDLG9CQUFvQjtJQUNwQkMsNkJBQTZCO0lBQzdCQywrQkFBK0I7SUFDL0JDLCtCQUErQjtJQUMvQkMsdUJBQXVCO0lBQ3ZCQyxxQkFBcUI7SUFDckJDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxnQkFBZ0I7SUFDaEJDLGdCQUFnQjtJQUNoQkMsWUFBWTtJQUNaQyxzQkFBc0I7QUFDMUI7QUFFcUIsQ0FDckIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9ldmVudC9FdmVudFR5cGUubWpzPzFhMTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgRXZlbnRUeXBlID0ge1xyXG4gICAgSU5JVElBTElaRV9TVEFSVDogXCJtc2FsOmluaXRpYWxpemVTdGFydFwiLFxyXG4gICAgSU5JVElBTElaRV9FTkQ6IFwibXNhbDppbml0aWFsaXplRW5kXCIsXHJcbiAgICBBQ0NPVU5UX0FEREVEOiBcIm1zYWw6YWNjb3VudEFkZGVkXCIsXHJcbiAgICBBQ0NPVU5UX1JFTU9WRUQ6IFwibXNhbDphY2NvdW50UmVtb3ZlZFwiLFxyXG4gICAgQUNUSVZFX0FDQ09VTlRfQ0hBTkdFRDogXCJtc2FsOmFjdGl2ZUFjY291bnRDaGFuZ2VkXCIsXHJcbiAgICBMT0dJTl9TVEFSVDogXCJtc2FsOmxvZ2luU3RhcnRcIixcclxuICAgIExPR0lOX1NVQ0NFU1M6IFwibXNhbDpsb2dpblN1Y2Nlc3NcIixcclxuICAgIExPR0lOX0ZBSUxVUkU6IFwibXNhbDpsb2dpbkZhaWx1cmVcIixcclxuICAgIEFDUVVJUkVfVE9LRU5fU1RBUlQ6IFwibXNhbDphY3F1aXJlVG9rZW5TdGFydFwiLFxyXG4gICAgQUNRVUlSRV9UT0tFTl9TVUNDRVNTOiBcIm1zYWw6YWNxdWlyZVRva2VuU3VjY2Vzc1wiLFxyXG4gICAgQUNRVUlSRV9UT0tFTl9GQUlMVVJFOiBcIm1zYWw6YWNxdWlyZVRva2VuRmFpbHVyZVwiLFxyXG4gICAgQUNRVUlSRV9UT0tFTl9ORVRXT1JLX1NUQVJUOiBcIm1zYWw6YWNxdWlyZVRva2VuRnJvbU5ldHdvcmtTdGFydFwiLFxyXG4gICAgU1NPX1NJTEVOVF9TVEFSVDogXCJtc2FsOnNzb1NpbGVudFN0YXJ0XCIsXHJcbiAgICBTU09fU0lMRU5UX1NVQ0NFU1M6IFwibXNhbDpzc29TaWxlbnRTdWNjZXNzXCIsXHJcbiAgICBTU09fU0lMRU5UX0ZBSUxVUkU6IFwibXNhbDpzc29TaWxlbnRGYWlsdXJlXCIsXHJcbiAgICBBQ1FVSVJFX1RPS0VOX0JZX0NPREVfU1RBUlQ6IFwibXNhbDphY3F1aXJlVG9rZW5CeUNvZGVTdGFydFwiLFxyXG4gICAgQUNRVUlSRV9UT0tFTl9CWV9DT0RFX1NVQ0NFU1M6IFwibXNhbDphY3F1aXJlVG9rZW5CeUNvZGVTdWNjZXNzXCIsXHJcbiAgICBBQ1FVSVJFX1RPS0VOX0JZX0NPREVfRkFJTFVSRTogXCJtc2FsOmFjcXVpcmVUb2tlbkJ5Q29kZUZhaWx1cmVcIixcclxuICAgIEhBTkRMRV9SRURJUkVDVF9TVEFSVDogXCJtc2FsOmhhbmRsZVJlZGlyZWN0U3RhcnRcIixcclxuICAgIEhBTkRMRV9SRURJUkVDVF9FTkQ6IFwibXNhbDpoYW5kbGVSZWRpcmVjdEVuZFwiLFxyXG4gICAgUE9QVVBfT1BFTkVEOiBcIm1zYWw6cG9wdXBPcGVuZWRcIixcclxuICAgIExPR09VVF9TVEFSVDogXCJtc2FsOmxvZ291dFN0YXJ0XCIsXHJcbiAgICBMT0dPVVRfU1VDQ0VTUzogXCJtc2FsOmxvZ291dFN1Y2Nlc3NcIixcclxuICAgIExPR09VVF9GQUlMVVJFOiBcIm1zYWw6bG9nb3V0RmFpbHVyZVwiLFxyXG4gICAgTE9HT1VUX0VORDogXCJtc2FsOmxvZ291dEVuZFwiLFxyXG4gICAgUkVTVE9SRV9GUk9NX0JGQ0FDSEU6IFwibXNhbDpyZXN0b3JlRnJvbUJGQ2FjaGVcIixcclxufTtcblxuZXhwb3J0IHsgRXZlbnRUeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudFR5cGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkV2ZW50VHlwZSIsIklOSVRJQUxJWkVfU1RBUlQiLCJJTklUSUFMSVpFX0VORCIsIkFDQ09VTlRfQURERUQiLCJBQ0NPVU5UX1JFTU9WRUQiLCJBQ1RJVkVfQUNDT1VOVF9DSEFOR0VEIiwiTE9HSU5fU1RBUlQiLCJMT0dJTl9TVUNDRVNTIiwiTE9HSU5fRkFJTFVSRSIsIkFDUVVJUkVfVE9LRU5fU1RBUlQiLCJBQ1FVSVJFX1RPS0VOX1NVQ0NFU1MiLCJBQ1FVSVJFX1RPS0VOX0ZBSUxVUkUiLCJBQ1FVSVJFX1RPS0VOX05FVFdPUktfU1RBUlQiLCJTU09fU0lMRU5UX1NUQVJUIiwiU1NPX1NJTEVOVF9TVUNDRVNTIiwiU1NPX1NJTEVOVF9GQUlMVVJFIiwiQUNRVUlSRV9UT0tFTl9CWV9DT0RFX1NUQVJUIiwiQUNRVUlSRV9UT0tFTl9CWV9DT0RFX1NVQ0NFU1MiLCJBQ1FVSVJFX1RPS0VOX0JZX0NPREVfRkFJTFVSRSIsIkhBTkRMRV9SRURJUkVDVF9TVEFSVCIsIkhBTkRMRV9SRURJUkVDVF9FTkQiLCJQT1BVUF9PUEVORUQiLCJMT0dPVVRfU1RBUlQiLCJMT0dPVVRfU1VDQ0VTUyIsIkxPR09VVF9GQUlMVVJFIiwiTE9HT1VUX0VORCIsIlJFU1RPUkVfRlJPTV9CRkNBQ0hFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseInteractionClient: () => (/* binding */ BaseInteractionClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class BaseInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId){\n        this.config = config;\n        this.browserStorage = storageImpl;\n        this.browserCrypto = browserCrypto;\n        this.networkClient = this.config.system.networkClient;\n        this.eventHandler = eventHandler;\n        this.navigationClient = navigationClient;\n        this.nativeMessageHandler = nativeMessageHandler;\n        this.correlationId = correlationId || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_0__.createNewGuid)();\n        this.logger = logger.clone(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_1__.BrowserConstants.MSAL_SKU, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.version, this.correlationId);\n        this.performanceClient = performanceClient;\n    }\n    async clearCacheOnLogout(account) {\n        if (account) {\n            if (_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {\n                this.logger.verbose(\"Setting active account to null\");\n                this.browserStorage.setActiveAccount(null);\n            }\n            // Clear given account.\n            try {\n                await this.browserStorage.removeAccount(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.generateAccountCacheKey(account));\n                this.logger.verbose(\"Cleared cache items belonging to the account provided in the logout request.\");\n            } catch (error) {\n                this.logger.error(\"Account provided in logout request was not found. Local cache unchanged.\");\n            }\n        } else {\n            try {\n                this.logger.verbose(\"No account provided in logout request, clearing all cache items.\", this.correlationId);\n                // Clear all accounts and tokens\n                await this.browserStorage.clear();\n                // Clear any stray keys from IndexedDB\n                await this.browserCrypto.clearKeystore();\n            } catch (e) {\n                this.logger.error(\"Attempted to clear all MSAL cache items and failed. Local cache unchanged.\");\n            }\n        }\n    }\n    /**\r\n     *\r\n     * Use to get the redirect uri configured in MSAL or null.\r\n     * @param requestRedirectUri\r\n     * @returns Redirect URL\r\n     *\r\n     */ getRedirectUri(requestRedirectUri) {\n        this.logger.verbose(\"getRedirectUri called\");\n        const redirectUri = requestRedirectUri || this.config.auth.redirectUri;\n        return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.UrlString.getAbsoluteUrl(redirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.getCurrentUri)());\n    }\n    /**\r\n     *\r\n     * @param apiId\r\n     * @param correlationId\r\n     * @param forceRefresh\r\n     */ initializeServerTelemetryManager(apiId, forceRefresh) {\n        this.logger.verbose(\"initializeServerTelemetryManager called\");\n        const telemetryPayload = {\n            clientId: this.config.auth.clientId,\n            correlationId: this.correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false,\n            wrapperSKU: this.browserStorage.getWrapperMetadata()[0],\n            wrapperVer: this.browserStorage.getWrapperMetadata()[1]\n        };\n        return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.ServerTelemetryManager(telemetryPayload, this.browserStorage);\n    }\n    /**\r\n     * Used to get a discovered version of the default authority.\r\n     * @param params {\r\n     *         requestAuthority?: string;\r\n     *         requestAzureCloudOptions?: AzureCloudOptions;\r\n     *         requestExtraQueryParameters?: StringDict;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async getDiscoveredAuthority(params) {\n        const { account } = params;\n        const instanceAwareEQ = params.requestExtraQueryParameters && params.requestExtraQueryParameters.hasOwnProperty(\"instance_aware\") ? params.requestExtraQueryParameters[\"instance_aware\"] : undefined;\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);\n        const authorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            OIDCOptions: this.config.auth.OIDCOptions,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n        };\n        // build authority string based on auth params, precedence - azureCloudInstance + tenant >> authority\n        const resolvedAuthority = params.requestAuthority || this.config.auth.authority;\n        const resolvedInstanceAware = instanceAwareEQ?.length ? instanceAwareEQ === \"true\" : this.config.auth.instanceAware;\n        const userAuthority = account && resolvedInstanceAware ? this.config.auth.authority.replace(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.UrlString.getDomainFromUrl(resolvedAuthority), account.environment) : resolvedAuthority;\n        // fall back to the authority from config\n        const builtAuthority = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.Authority.generateAuthority(userAuthority, params.requestAzureCloudOptions || this.config.auth.azureCloudOptions);\n        const discoveredAuthority = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.invokeAsync)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createDiscoveredInstance, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.logger, this.performanceClient, this.correlationId)(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.correlationId, this.performanceClient);\n        if (account && !discoveredAuthority.isAlias(account.environment)) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.authorityMismatch);\n        }\n        return discoveredAuthority;\n    }\n}\n //# sourceMappingURL=BaseInteractionClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HybridSpaAuthorizationCodeClient: () => (/* binding */ HybridSpaAuthorizationCodeClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class HybridSpaAuthorizationCodeClient extends _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.AuthorizationCodeClient {\n    constructor(config){\n        super(config);\n        this.includeRedirectUri = false;\n    }\n}\n //# sourceMappingURL=HybridSpaAuthorizationCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9IeWJyaWRTcGFBdXRob3JpemF0aW9uQ29kZUNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDcUU7QUFFckU7OztDQUdDLEdBQ0QsTUFBTUMseUNBQXlDRCwrRUFBdUJBO0lBQ2xFRSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUc7SUFDOUI7QUFDSjtBQUU0QyxDQUM1Qyw2REFBNkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9IeWJyaWRTcGFBdXRob3JpemF0aW9uQ29kZUNsaWVudC5tanM/MWY3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhvcml6YXRpb25Db2RlQ2xpZW50IH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL2Jyb3dzZXInO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgSHlicmlkU3BhQXV0aG9yaXphdGlvbkNvZGVDbGllbnQgZXh0ZW5kcyBBdXRob3JpemF0aW9uQ29kZUNsaWVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcclxuICAgICAgICBzdXBlcihjb25maWcpO1xyXG4gICAgICAgIHRoaXMuaW5jbHVkZVJlZGlyZWN0VXJpID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgSHlicmlkU3BhQXV0aG9yaXphdGlvbkNvZGVDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh5YnJpZFNwYUF1dGhvcml6YXRpb25Db2RlQ2xpZW50Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRob3JpemF0aW9uQ29kZUNsaWVudCIsIkh5YnJpZFNwYUF1dGhvcml6YXRpb25Db2RlQ2xpZW50IiwiY29uc3RydWN0b3IiLCJjb25maWciLCJpbmNsdWRlUmVkaXJlY3RVcmkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NativeInteractionClient: () => (/* binding */ NativeInteractionClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/NativeAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SilentCacheClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs\");\n/* harmony import */ var _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../encode/Base64Decode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/encode/Base64Decode.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/* harmony import */ var _error_NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../error/NativeAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/NativeAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NativeInteractionClient extends _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseInteractionClient {\n    constructor(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, provider, accountId, nativeStorageImpl, correlationId){\n        super(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);\n        this.apiId = apiId;\n        this.accountId = accountId;\n        this.nativeMessageHandler = provider;\n        this.nativeStorageManager = nativeStorageImpl;\n        this.silentCacheClient = new _SilentCacheClient_mjs__WEBPACK_IMPORTED_MODULE_1__.SilentCacheClient(config, this.nativeStorageManager, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);\n        this.serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n        const extensionName = this.nativeMessageHandler.getExtensionId() === _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeConstants.PREFERRED_EXTENSION_ID ? \"chrome\" : this.nativeMessageHandler.getExtensionId()?.length ? \"unknown\" : undefined;\n        this.skus = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ServerTelemetryManager.makeExtraSkuString({\n            libraryName: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.MSAL_SKU,\n            libraryVersion: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__.version,\n            extensionName: extensionName,\n            extensionVersion: this.nativeMessageHandler.getExtensionVersion()\n        });\n    }\n    /**\r\n     * Adds SKUs to request extra query parameters\r\n     * @param request {NativeTokenRequest}\r\n     * @private\r\n     */ addRequestSKUs(request) {\n        request.extraParameters = {\n            ...request.extraParameters,\n            [_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.X_CLIENT_EXTRA_SKU]: this.skus\n        };\n    }\n    /**\r\n     * Acquire token from native platform via browser extension\r\n     * @param request\r\n     */ async acquireToken(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PerformanceEvents.NativeInteractionClientAcquireToken, request.correlationId);\n        this.logger.trace(\"NativeInteractionClient - acquireToken called.\");\n        // start the perf measurement\n        const nativeATMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PerformanceEvents.NativeInteractionClientAcquireToken, request.correlationId);\n        const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.nowSeconds();\n        try {\n            // initialize native request\n            const nativeRequest = await this.initializeNativeRequest(request);\n            // check if the tokens can be retrieved from internal cache\n            try {\n                const result = await this.acquireTokensFromCache(this.accountId, nativeRequest);\n                nativeATMeasurement.end({\n                    success: true,\n                    isNativeBroker: false,\n                    fromCache: true\n                });\n                return result;\n            } catch (e) {\n                // continue with a native call for any and all errors\n                this.logger.info(\"MSAL internal Cache does not contain tokens, proceed to make a native call\");\n            }\n            const { ...nativeTokenRequest } = nativeRequest;\n            // fall back to native calls\n            const messageBody = {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeExtensionMethod.GetToken,\n                request: nativeTokenRequest\n            };\n            const response = await this.nativeMessageHandler.sendMessage(messageBody);\n            const validatedResponse = this.validateNativeResponse(response);\n            return await this.handleNativeResponse(validatedResponse, nativeRequest, reqTimestamp).then((result)=>{\n                nativeATMeasurement.end({\n                    success: true,\n                    isNativeBroker: true,\n                    requestId: result.requestId\n                });\n                this.serverTelemetryManager.clearNativeBrokerErrorCode();\n                return result;\n            }).catch((error)=>{\n                nativeATMeasurement.end({\n                    success: false,\n                    errorCode: error.errorCode,\n                    subErrorCode: error.subError,\n                    isNativeBroker: true\n                });\n                throw error;\n            });\n        } catch (e) {\n            if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.NativeAuthError) {\n                this.serverTelemetryManager.setNativeBrokerErrorCode(e.errorCode);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     * Creates silent flow request\r\n     * @param request\r\n     * @param cachedAccount\r\n     * @returns CommonSilentFlowRequest\r\n     */ createSilentCacheRequest(request, cachedAccount) {\n        return {\n            authority: request.authority,\n            correlationId: this.correlationId,\n            scopes: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(request.scope).asArray(),\n            account: cachedAccount,\n            forceRefresh: false\n        };\n    }\n    /**\r\n     * Fetches the tokens from the cache if un-expired\r\n     * @param nativeAccountId\r\n     * @param request\r\n     * @returns authenticationResult\r\n     */ async acquireTokensFromCache(nativeAccountId, request) {\n        if (!nativeAccountId) {\n            this.logger.warning(\"NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided\");\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.noAccountFound);\n        }\n        // fetch the account from browser cache\n        const account = this.browserStorage.getBaseAccountInfo({\n            nativeAccountId\n        });\n        if (!account) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.noAccountFound);\n        }\n        // leverage silent flow for cached tokens retrieval\n        try {\n            const silentRequest = this.createSilentCacheRequest(request, account);\n            const result = await this.silentCacheClient.acquireToken(silentRequest);\n            const fullAccount = {\n                ...account,\n                idTokenClaims: result?.idTokenClaims,\n                idToken: result?.idToken\n            };\n            return {\n                ...result,\n                account: fullAccount\n            };\n        } catch (e) {\n            throw e;\n        }\n    }\n    /**\r\n     * Acquires a token from native platform then redirects to the redirectUri instead of returning the response\r\n     * @param {RedirectRequest} request\r\n     * @param {InProgressPerformanceEvent} rootMeasurement\r\n     */ async acquireTokenRedirect(request, rootMeasurement) {\n        this.logger.trace(\"NativeInteractionClient - acquireTokenRedirect called.\");\n        const { ...remainingParameters } = request;\n        delete remainingParameters.onRedirectNavigate;\n        const nativeRequest = await this.initializeNativeRequest(remainingParameters);\n        const messageBody = {\n            method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeExtensionMethod.GetToken,\n            request: nativeRequest\n        };\n        try {\n            const response = await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n        } catch (e) {\n            // Only throw fatal errors here to allow application to fallback to regular redirect. Otherwise proceed and the error will be thrown in handleRedirectPromise\n            if (e instanceof _error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.NativeAuthError) {\n                this.serverTelemetryManager.setNativeBrokerErrorCode(e.errorCode);\n                if ((0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.isFatalNativeAuthError)(e)) {\n                    throw e;\n                }\n            }\n        }\n        this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.NATIVE_REQUEST, JSON.stringify(nativeRequest), true);\n        const navigationOptions = {\n            apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenRedirect,\n            timeout: this.config.system.redirectNavigationTimeout,\n            noHistory: false\n        };\n        const redirectUri = this.config.auth.navigateToLoginRequestUrl ? window.location.href : this.getRedirectUri(request.redirectUri);\n        rootMeasurement.end({\n            success: true\n        });\n        await this.navigationClient.navigateExternal(redirectUri, navigationOptions); // Need to treat this as external to ensure handleRedirectPromise is run again\n    }\n    /**\r\n     * If the previous page called native platform for a token using redirect APIs, send the same request again and return the response\r\n     * @param performanceClient {IPerformanceClient?}\r\n     * @param correlationId {string?} correlation identifier\r\n     */ async handleRedirectPromise(performanceClient, correlationId) {\n        this.logger.trace(\"NativeInteractionClient - handleRedirectPromise called.\");\n        if (!this.browserStorage.isInteractionInProgress(true)) {\n            this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n            return null;\n        }\n        // remove prompt from the request to prevent WAM from prompting twice\n        const cachedRequest = this.browserStorage.getCachedNativeRequest();\n        if (!cachedRequest) {\n            this.logger.verbose(\"NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null.\");\n            if (performanceClient && correlationId) {\n                performanceClient?.addFields({\n                    errorCode: \"no_cached_request\"\n                }, correlationId);\n            }\n            return null;\n        }\n        const { prompt, ...request } = cachedRequest;\n        if (prompt) {\n            this.logger.verbose(\"NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window.\");\n        }\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.TemporaryCacheKeys.NATIVE_REQUEST));\n        const messageBody = {\n            method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeExtensionMethod.GetToken,\n            request: request\n        };\n        const reqTimestamp = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.nowSeconds();\n        try {\n            this.logger.verbose(\"NativeInteractionClient - handleRedirectPromise sending message to native broker.\");\n            const response = await this.nativeMessageHandler.sendMessage(messageBody);\n            this.validateNativeResponse(response);\n            const result = this.handleNativeResponse(response, request, reqTimestamp);\n            this.browserStorage.setInteractionInProgress(false);\n            const res = await result;\n            this.serverTelemetryManager.clearNativeBrokerErrorCode();\n            return res;\n        } catch (e) {\n            this.browserStorage.setInteractionInProgress(false);\n            throw e;\n        }\n    }\n    /**\r\n     * Logout from native platform via browser extension\r\n     * @param request\r\n     */ logout() {\n        this.logger.trace(\"NativeInteractionClient - logout called.\");\n        return Promise.reject(\"Logout not implemented yet\");\n    }\n    /**\r\n     * Transform response from native platform into AuthenticationResult object which will be returned to the end user\r\n     * @param response\r\n     * @param request\r\n     * @param reqTimestamp\r\n     */ async handleNativeResponse(response, request, reqTimestamp) {\n        this.logger.trace(\"NativeInteractionClient - handleNativeResponse called.\");\n        // generate identifiers\n        const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_12__.extractTokenClaims(response.id_token, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__.base64Decode);\n        const homeAccountIdentifier = this.createHomeAccountIdentifier(response, idTokenClaims);\n        const cachedhomeAccountId = this.browserStorage.getAccountInfoFilteredBy({\n            nativeAccountId: request.accountId\n        })?.homeAccountId;\n        if (homeAccountIdentifier !== cachedhomeAccountId && response.account.id !== request.accountId) {\n            // User switch in native broker prompt is not supported. All users must first sign in through web flow to ensure server state is in sync\n            throw (0,_error_NativeAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.createNativeAuthError)(_error_NativeAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.userSwitch);\n        }\n        // Get the preferred_cache domain for the given authority\n        const authority = await this.getDiscoveredAuthority({\n            requestAuthority: request.authority\n        });\n        const baseAccount = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__.buildAccountToCache)(this.browserStorage, authority, homeAccountIdentifier, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__.base64Decode, idTokenClaims, response.client_info, undefined, idTokenClaims.tid, undefined, response.account.id, this.logger);\n        // generate authenticationResult\n        const result = await this.generateAuthenticationResult(response, request, idTokenClaims, baseAccount, authority.canonicalAuthority, reqTimestamp);\n        // cache accounts and tokens in the appropriate storage\n        this.cacheAccount(baseAccount);\n        this.cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, response.access_token, result.tenantId, reqTimestamp);\n        return result;\n    }\n    /**\r\n     * creates an homeAccountIdentifier for the account\r\n     * @param response\r\n     * @param idTokenObj\r\n     * @returns\r\n     */ createHomeAccountIdentifier(response, idTokenClaims) {\n        // Save account in browser storage\n        const homeAccountIdentifier = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__.AccountEntity.generateHomeAccountId(response.client_info || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.EMPTY_STRING, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.AuthorityType.Default, this.logger, this.browserCrypto, idTokenClaims);\n        return homeAccountIdentifier;\n    }\n    /**\r\n     * Helper to generate scopes\r\n     * @param response\r\n     * @param request\r\n     * @returns\r\n     */ generateScopes(response, request) {\n        return response.scope ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(response.scope) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(request.scope);\n    }\n    /**\r\n     * If PoP token is requesred, records the PoP token if returned from the WAM, else generates one in the browser\r\n     * @param request\r\n     * @param response\r\n     */ async generatePopAccessToken(response, request) {\n        if (request.tokenType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP && request.signPopToken) {\n            /**\r\n             * This code prioritizes SHR returned from the native layer. In case of error/SHR not calculated from WAM and the AT\r\n             * is still received, SHR is calculated locally\r\n             */ // Check if native layer returned an SHR token\n            if (response.shr) {\n                this.logger.trace(\"handleNativeServerResponse: SHR is enabled in native layer\");\n                return response.shr;\n            }\n            // Generate SHR in msal js if WAM does not compute it when POP is enabled\n            const popTokenGenerator = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_19__.PopTokenGenerator(this.browserCrypto);\n            const shrParameters = {\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce\n            };\n            /**\r\n             * KeyID must be present in the native request from when the PoP key was generated in order for\r\n             * PopTokenGenerator to query the full key for signing\r\n             */ if (!request.keyId) {\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.keyIdMissing);\n            }\n            return popTokenGenerator.signPopToken(response.access_token, request.keyId, shrParameters);\n        } else {\n            return response.access_token;\n        }\n    }\n    /**\r\n     * Generates authentication result\r\n     * @param response\r\n     * @param request\r\n     * @param idTokenObj\r\n     * @param accountEntity\r\n     * @param authority\r\n     * @param reqTimestamp\r\n     * @returns\r\n     */ async generateAuthenticationResult(response, request, idTokenClaims, accountEntity, authority, reqTimestamp) {\n        // Add Native Broker fields to Telemetry\n        const mats = this.addTelemetryFromNativeResponse(response);\n        // If scopes not returned in server response, use request scopes\n        const responseScopes = response.scope ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(response.scope) : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet.fromString(request.scope);\n        const accountProperties = response.account.properties || {};\n        const uid = accountProperties[\"UID\"] || idTokenClaims.oid || idTokenClaims.sub || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.EMPTY_STRING;\n        const tid = accountProperties[\"TenantId\"] || idTokenClaims.tid || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.EMPTY_STRING;\n        const accountInfo = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_20__.updateAccountTenantProfileData)(accountEntity.getAccountInfo(), undefined, idTokenClaims, response.id_token);\n        /**\r\n         * In pairwise broker flows, this check prevents the broker's native account id\r\n         * from being returned over the embedded app's account id.\r\n         */ if (accountInfo.nativeAccountId !== response.account.id) {\n            accountInfo.nativeAccountId = response.account.id;\n        }\n        // generate PoP token as needed\n        const responseAccessToken = await this.generatePopAccessToken(response, request);\n        const tokenType = request.tokenType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP : _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.BEARER;\n        const result = {\n            authority: authority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes.asArray(),\n            account: accountInfo,\n            idToken: response.id_token,\n            idTokenClaims: idTokenClaims,\n            accessToken: responseAccessToken,\n            fromCache: mats ? this.isResponseFromCache(mats) : false,\n            expiresOn: new Date(Number(reqTimestamp + response.expires_in) * 1000),\n            tokenType: tokenType,\n            correlationId: this.correlationId,\n            state: response.state,\n            fromNativeBroker: true\n        };\n        return result;\n    }\n    /**\r\n     * cache the account entity in browser storage\r\n     * @param accountEntity\r\n     */ cacheAccount(accountEntity) {\n        // Store the account info and hence `nativeAccountId` in browser cache\n        this.browserStorage.setAccount(accountEntity);\n        // Remove any existing cached tokens for this account in browser storage\n        this.browserStorage.removeAccountContext(accountEntity).catch((e)=>{\n            this.logger.error(`Error occurred while removing account context from browser storage. ${e}`);\n        });\n    }\n    /**\r\n     * Stores the access_token and id_token in inmemory storage\r\n     * @param response\r\n     * @param request\r\n     * @param homeAccountIdentifier\r\n     * @param idTokenObj\r\n     * @param responseAccessToken\r\n     * @param tenantId\r\n     * @param reqTimestamp\r\n     */ cacheNativeTokens(response, request, homeAccountIdentifier, idTokenClaims, responseAccessToken, tenantId, reqTimestamp) {\n        const cachedIdToken = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.createIdTokenEntity(homeAccountIdentifier, request.authority, response.id_token || \"\", request.clientId, idTokenClaims.tid || \"\");\n        // cache accessToken in inmemory storage\n        const expiresIn = request.tokenType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.Constants.SHR_NONCE_VALIDITY : (typeof response.expires_in === \"string\" ? parseInt(response.expires_in, 10) : response.expires_in) || 0;\n        const tokenExpirationSeconds = reqTimestamp + expiresIn;\n        const responseScopes = this.generateScopes(response, request);\n        const cachedAccessToken = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_21__.createAccessTokenEntity(homeAccountIdentifier, request.authority, responseAccessToken, request.clientId, idTokenClaims.tid || tenantId, responseScopes.printScopes(), tokenExpirationSeconds, 0, _encode_Base64Decode_mjs__WEBPACK_IMPORTED_MODULE_13__.base64Decode, undefined, request.tokenType, undefined, request.keyId);\n        const nativeCacheRecord = {\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken\n        };\n        void this.nativeStorageManager.saveCacheRecord(nativeCacheRecord, request.storeInCache);\n    }\n    addTelemetryFromNativeResponse(response) {\n        const mats = this.getMATSFromResponse(response);\n        if (!mats) {\n            return null;\n        }\n        this.performanceClient.addFields({\n            extensionId: this.nativeMessageHandler.getExtensionId(),\n            extensionVersion: this.nativeMessageHandler.getExtensionVersion(),\n            matsBrokerVersion: mats.broker_version,\n            matsAccountJoinOnStart: mats.account_join_on_start,\n            matsAccountJoinOnEnd: mats.account_join_on_end,\n            matsDeviceJoin: mats.device_join,\n            matsPromptBehavior: mats.prompt_behavior,\n            matsApiErrorCode: mats.api_error_code,\n            matsUiVisible: mats.ui_visible,\n            matsSilentCode: mats.silent_code,\n            matsSilentBiSubCode: mats.silent_bi_sub_code,\n            matsSilentMessage: mats.silent_message,\n            matsSilentStatus: mats.silent_status,\n            matsHttpStatus: mats.http_status,\n            matsHttpEventCount: mats.http_event_count\n        }, this.correlationId);\n        return mats;\n    }\n    /**\r\n     * Validates native platform response before processing\r\n     * @param response\r\n     */ validateNativeResponse(response) {\n        if (response.hasOwnProperty(\"access_token\") && response.hasOwnProperty(\"id_token\") && response.hasOwnProperty(\"client_info\") && response.hasOwnProperty(\"account\") && response.hasOwnProperty(\"scope\") && response.hasOwnProperty(\"expires_in\")) {\n            return response;\n        } else {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_22__.createAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_23__.unexpectedError, \"Response missing expected properties.\");\n        }\n    }\n    /**\r\n     * Gets MATS telemetry from native response\r\n     * @param response\r\n     * @returns\r\n     */ getMATSFromResponse(response) {\n        if (response.properties.MATS) {\n            try {\n                return JSON.parse(response.properties.MATS);\n            } catch (e) {\n                this.logger.error(\"NativeInteractionClient - Error parsing MATS telemetry, returning null instead\");\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Returns whether or not response came from native cache\r\n     * @param response\r\n     * @returns\r\n     */ isResponseFromCache(mats) {\n        if (typeof mats.is_cached === \"undefined\") {\n            this.logger.verbose(\"NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false.\");\n            return false;\n        }\n        return !!mats.is_cached;\n    }\n    /**\r\n     * Translates developer provided request object into NativeRequest object\r\n     * @param request\r\n     */ async initializeNativeRequest(request) {\n        this.logger.trace(\"NativeInteractionClient - initializeNativeRequest called\");\n        const requestAuthority = request.authority || this.config.auth.authority;\n        if (request.account) {\n            // validate authority\n            await this.getDiscoveredAuthority({\n                requestAuthority,\n                requestAzureCloudOptions: request.azureCloudOptions,\n                account: request.account\n            });\n        }\n        const canonicalAuthority = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_24__.UrlString(requestAuthority);\n        canonicalAuthority.validateAsUri();\n        // scopes are expected to be received by the native broker as \"scope\" and will be added to the request below. Other properties that should be dropped from the request to the native broker can be included in the object destructuring here.\n        const { scopes, ...remainingProperties } = request;\n        const scopeSet = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ScopeSet(scopes || []);\n        scopeSet.appendScopes(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.OIDC_DEFAULT_SCOPES);\n        const getPrompt = ()=>{\n            // If request is silent, prompt is always none\n            switch(this.apiId){\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.ssoSilent:\n                case _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenSilent_silentFlow:\n                    this.logger.trace(\"initializeNativeRequest: silent request sets prompt to none\");\n                    return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.NONE;\n            }\n            // Prompt not provided, request may proceed and native broker decides if it needs to prompt\n            if (!request.prompt) {\n                this.logger.trace(\"initializeNativeRequest: prompt was not provided\");\n                return undefined;\n            }\n            // If request is interactive, check if prompt provided is allowed to go directly to native broker\n            switch(request.prompt){\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.NONE:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.CONSENT:\n                case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.PromptValue.LOGIN:\n                    this.logger.trace(\"initializeNativeRequest: prompt is compatible with native flow\");\n                    return request.prompt;\n                default:\n                    this.logger.trace(`initializeNativeRequest: prompt = ${request.prompt} is not compatible with native flow`);\n                    throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_25__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_26__.nativePromptNotSupported);\n            }\n        };\n        const validatedRequest = {\n            ...remainingProperties,\n            accountId: this.accountId,\n            clientId: this.config.auth.clientId,\n            authority: canonicalAuthority.urlString,\n            scope: scopeSet.printScopes(),\n            redirectUri: this.getRedirectUri(request.redirectUri),\n            prompt: getPrompt(),\n            correlationId: this.correlationId,\n            tokenType: request.authenticationScheme,\n            windowTitleSubstring: document.title,\n            extraParameters: {\n                ...request.extraQueryParameters,\n                ...request.tokenQueryParameters\n            },\n            extendedExpiryToken: false,\n            keyId: request.popKid\n        };\n        // Check for PoP token requests: signPopToken should only be set to true if popKid is not set\n        if (validatedRequest.signPopToken && !!request.popKid) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_25__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_26__.invalidPopTokenRequest);\n        }\n        this.handleExtraBrokerParams(validatedRequest);\n        validatedRequest.extraParameters = validatedRequest.extraParameters || {};\n        validatedRequest.extraParameters.telemetry = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.NativeConstants.MATS_TELEMETRY;\n        if (request.authenticationScheme === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.AuthenticationScheme.POP) {\n            // add POP request type\n            const shrParameters = {\n                resourceRequestUri: request.resourceRequestUri,\n                resourceRequestMethod: request.resourceRequestMethod,\n                shrClaims: request.shrClaims,\n                shrNonce: request.shrNonce\n            };\n            const popTokenGenerator = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_19__.PopTokenGenerator(this.browserCrypto);\n            // generate reqCnf if not provided in the request\n            let reqCnfData;\n            if (!validatedRequest.keyId) {\n                const generatedReqCnfData = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_27__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(shrParameters, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n                validatedRequest.keyId = generatedReqCnfData.kid;\n                validatedRequest.signPopToken = true;\n            } else {\n                reqCnfData = this.browserCrypto.base64UrlEncode(JSON.stringify({\n                    kid: validatedRequest.keyId\n                }));\n                validatedRequest.signPopToken = false;\n            }\n            // SPAs require whole string to be passed to broker\n            validatedRequest.reqCnf = reqCnfData;\n        }\n        this.addRequestSKUs(validatedRequest);\n        return validatedRequest;\n    }\n    /**\r\n     * Handles extra broker request parameters\r\n     * @param request {NativeTokenRequest}\r\n     * @private\r\n     */ handleExtraBrokerParams(request) {\n        const hasExtraBrokerParams = request.extraParameters && request.extraParameters.hasOwnProperty(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.BROKER_CLIENT_ID) && request.extraParameters.hasOwnProperty(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.BROKER_REDIRECT_URI) && request.extraParameters.hasOwnProperty(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CLIENT_ID);\n        if (!request.embeddedClientId && !hasExtraBrokerParams) {\n            return;\n        }\n        let child_client_id = \"\";\n        const child_redirect_uri = request.redirectUri;\n        if (request.embeddedClientId) {\n            request.redirectUri = this.config.auth.redirectUri;\n            child_client_id = request.embeddedClientId;\n        } else if (request.extraParameters) {\n            request.redirectUri = request.extraParameters[_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.BROKER_REDIRECT_URI];\n            child_client_id = request.extraParameters[_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CLIENT_ID];\n        }\n        request.extraParameters = {\n            child_client_id,\n            child_redirect_uri\n        };\n        this.performanceClient?.addFields({\n            embeddedClientId: child_client_id,\n            embeddedRedirectUri: child_redirect_uri\n        }, request.correlationId);\n    }\n}\n //# sourceMappingURL=NativeInteractionClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PopupClient: () => (/* binding */ PopupClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interaction_handler/InteractionHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class PopupClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        // Properly sets this reference for the unload event.\n        this.unloadWindow = this.unloadWindow.bind(this);\n        this.nativeStorage = nativeStorageImpl;\n    }\n    /**\r\n     * Acquires tokens by opening a popup window to the /authorize endpoint of the authority\r\n     * @param request\r\n     */ acquireToken(request) {\n        try {\n            const popupName = this.generatePopupName(request.scopes || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);\n            const popupParams = {\n                popupName,\n                popupWindowAttributes: request.popupWindowAttributes || {},\n                popupWindowParent: request.popupWindowParent ?? window\n            };\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true, acquiring token\");\n                // Passes on popup position and dimensions if in request\n                return this.acquireTokenPopupAsync(request, popupParams);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before acquiring token.\n                this.logger.verbose(\"asyncPopup set to false, opening popup before acquiring token\");\n                popupParams.popup = this.openSizedPopup(\"about:blank\", popupParams);\n                return this.acquireTokenPopupAsync(request, popupParams);\n            }\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    /**\r\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\r\n     * @param logoutRequest\r\n     */ logout(logoutRequest) {\n        try {\n            this.logger.verbose(\"logoutPopup called\");\n            const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n            const popupParams = {\n                popupName: this.generateLogoutPopupName(validLogoutRequest),\n                popupWindowAttributes: logoutRequest?.popupWindowAttributes || {},\n                popupWindowParent: logoutRequest?.popupWindowParent ?? window\n            };\n            const authority = logoutRequest && logoutRequest.authority;\n            const mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;\n            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.\n            if (this.config.system.asyncPopups) {\n                this.logger.verbose(\"asyncPopups set to true\");\n                // Passes on popup position and dimensions if in request\n                return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);\n            } else {\n                // asyncPopups flag is set to false. Opens popup before logging out.\n                this.logger.verbose(\"asyncPopup set to false, opening popup\");\n                popupParams.popup = this.openSizedPopup(\"about:blank\", popupParams);\n                return this.logoutPopupAsync(validLogoutRequest, popupParams, authority, mainWindowRedirectUri);\n            }\n        } catch (e) {\n            // Since this function is synchronous we need to reject\n            return Promise.reject(e);\n        }\n    }\n    /**\r\n     * Helper which obtains an access_token for your API via opening a popup window in the user's browser\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param popup\r\n     * @param popupWindowAttributes\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */ async acquireTokenPopupAsync(request, popupParams) {\n        this.logger.verbose(\"acquireTokenPopupAsync called\");\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenPopup);\n        const validRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.preconnect)(validRequest.authority);\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationCodeRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, this.correlationId)(validRequest);\n            // Initialize the client\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: validRequest.authority,\n                requestAzureCloudOptions: validRequest.azureCloudOptions,\n                requestExtraQueryParameters: validRequest.extraQueryParameters,\n                account: validRequest.account\n            });\n            const isNativeBroker = _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);\n            // Start measurement for server calls with native brokering enabled\n            let fetchNativeAccountIdMeasurement;\n            if (isNativeBroker) {\n                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);\n            }\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: isNativeBroker\n            });\n            // Create popup interaction handler.\n            const interactionHandler = new _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__.InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            // Show the UI once the url has been created. Get the window handle for the popup.\n            const popupWindow = this.initiateAuthRequest(navigateUrl, popupParams);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.POPUP_OPENED, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, {\n                popupWindow\n            }, null);\n            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n            const responseString = await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent);\n            const serverParams = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(_response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_9__.deserializeResponse, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, this.config.auth.OIDCOptions.serverResponseType, this.logger);\n            // Remove throttle if it exists\n            _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);\n            if (serverParams.accountId) {\n                this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n                // end measurement for server call with native brokering enabled\n                if (fetchNativeAccountIdMeasurement) {\n                    fetchNativeAccountIdMeasurement.end({\n                        success: true,\n                        isNativeBroker: true\n                    });\n                }\n                if (!this.nativeMessageHandler) {\n                    throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.nativeConnectionNotEstablished);\n                }\n                const nativeInteractionClient = new _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);\n                const { userRequestState } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.ProtocolUtils.parseRequestState(this.browserCrypto, validRequest.state);\n                return await nativeInteractionClient.acquireToken({\n                    ...validRequest,\n                    state: userRequestState,\n                    prompt: undefined\n                });\n            }\n            // Handle response from hash string.\n            const result = await interactionHandler.handleCodeResponse(serverParams, validRequest);\n            return result;\n        } catch (e) {\n            // Close the synchronous popup if an error is thrown before the window unload event is registered\n            popupParams.popup?.close();\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     *\r\n     * @param validRequest\r\n     * @param popupName\r\n     * @param requestAuthority\r\n     * @param popup\r\n     * @param mainWindowRedirectUri\r\n     * @param popupWindowAttributes\r\n     */ async logoutPopupAsync(validRequest, popupParams, requestAuthority, mainWindowRedirectUri) {\n        this.logger.verbose(\"logoutPopupAsync called\");\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, validRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.logoutPopup);\n        try {\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validRequest.account);\n            // Initialize the client\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: requestAuthority,\n                account: validRequest.account || undefined\n            });\n            try {\n                authClient.authority.endSessionEndpoint;\n            } catch  {\n                if (validRequest.account?.homeAccountId && validRequest.postLogoutRedirectUri && authClient.authority.protocolMode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__.ProtocolMode.OIDC) {\n                    void this.browserStorage.removeAccount(validRequest.account?.homeAccountId);\n                    this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, validRequest);\n                    if (mainWindowRedirectUri) {\n                        const navigationOptions = {\n                            apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.logoutPopup,\n                            timeout: this.config.system.redirectNavigationTimeout,\n                            noHistory: false\n                        };\n                        const absoluteUrl = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.UrlString.getAbsoluteUrl(mainWindowRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.getCurrentUri)());\n                        await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n                    }\n                    popupParams.popup?.close();\n                    return;\n                }\n            }\n            // Create logout string and navigate user window to logout.\n            const logoutUri = authClient.getLogoutUri(validRequest);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, validRequest);\n            // Open the popup window to requestUrl.\n            const popupWindow = this.openPopup(logoutUri, popupParams);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.POPUP_OPENED, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, {\n                popupWindow\n            }, null);\n            await this.monitorPopupForHash(popupWindow, popupParams.popupWindowParent).catch(()=>{\n            // Swallow any errors related to monitoring the window. Server logout is best effort\n            });\n            if (mainWindowRedirectUri) {\n                const navigationOptions = {\n                    apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.logoutPopup,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: false\n                };\n                const absoluteUrl = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.UrlString.getAbsoluteUrl(mainWindowRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.getCurrentUri)());\n                this.logger.verbose(\"Redirecting main window to url specified in the request\");\n                this.logger.verbosePii(`Redirecting main window to: ${absoluteUrl}`);\n                await this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);\n            } else {\n                this.logger.verbose(\"No main window navigation requested\");\n            }\n        } catch (e) {\n            // Close the synchronous popup if an error is thrown before the window unload event is registered\n            popupParams.popup?.close();\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_15__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.setInteractionInProgress(false);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup, null, e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n            throw e;\n        }\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_8__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n    }\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */ initiateAuthRequest(requestUrl, params) {\n        // Check that request url is not empty.\n        if (requestUrl) {\n            this.logger.infoPii(`Navigate to: ${requestUrl}`);\n            // Open the popup window to requestUrl.\n            return this.openPopup(requestUrl, params);\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.error(\"Navigate url is empty\");\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.emptyNavigateUri);\n        }\n    }\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - timeout for processing hash once popup is redirected back to application\r\n     */ monitorPopupForHash(popupWindow, popupWindowParent) {\n        return new Promise((resolve, reject)=>{\n            this.logger.verbose(\"PopupHandler.monitorPopupForHash - polling started\");\n            const intervalId = setInterval(()=>{\n                // Window is closed\n                if (popupWindow.closed) {\n                    this.logger.error(\"PopupHandler.monitorPopupForHash - window closed\");\n                    clearInterval(intervalId);\n                    reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.userCancelled));\n                    return;\n                }\n                let href = \"\";\n                try {\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */ href = popupWindow.location.href;\n                } catch (e) {}\n                // Don't process blank pages or cross domain\n                if (!href || href === \"about:blank\") {\n                    return;\n                }\n                clearInterval(intervalId);\n                let responseString = \"\";\n                const responseType = this.config.auth.OIDCOptions.serverResponseType;\n                if (popupWindow) {\n                    if (responseType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ServerResponseType.QUERY) {\n                        responseString = popupWindow.location.search;\n                    } else {\n                        responseString = popupWindow.location.hash;\n                    }\n                }\n                this.logger.verbose(\"PopupHandler.monitorPopupForHash - popup window is on same origin as caller\");\n                resolve(responseString);\n            }, this.config.system.pollIntervalMilliseconds);\n        }).finally(()=>{\n            this.cleanPopup(popupWindow, popupWindowParent);\n        });\n    }\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @param popupWindowAttributes\r\n     * @ignore\r\n     * @hidden\r\n     */ openPopup(urlNavigate, popupParams) {\n        try {\n            let popupWindow;\n            // Popup window passed in, setting url to navigate to\n            if (popupParams.popup) {\n                popupWindow = popupParams.popup;\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\n                popupWindow.location.assign(urlNavigate);\n            } else if (typeof popupParams.popup === \"undefined\") {\n                // Popup will be undefined if it was not passed in\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\n                popupWindow = this.openSizedPopup(urlNavigate, popupParams);\n            }\n            // Popup will be null if popups are blocked\n            if (!popupWindow) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.emptyWindowError);\n            }\n            if (popupWindow.focus) {\n                popupWindow.focus();\n            }\n            this.currentWindow = popupWindow;\n            popupParams.popupWindowParent.addEventListener(\"beforeunload\", this.unloadWindow);\n            return popupWindow;\n        } catch (e) {\n            this.logger.error(\"error opening popup \" + e.message);\n            this.browserStorage.setInteractionInProgress(false);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.popupWindowError);\n        }\n    }\n    /**\r\n     * Helper function to set popup window dimensions and position\r\n     * @param urlNavigate\r\n     * @param popupName\r\n     * @param popupWindowAttributes\r\n     * @returns\r\n     */ openSizedPopup(urlNavigate, { popupName, popupWindowAttributes, popupWindowParent }) {\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */ const winLeft = popupWindowParent.screenLeft ? popupWindowParent.screenLeft : popupWindowParent.screenX;\n        const winTop = popupWindowParent.screenTop ? popupWindowParent.screenTop : popupWindowParent.screenY;\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */ const winWidth = popupWindowParent.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        const winHeight = popupWindowParent.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        let width = popupWindowAttributes.popupSize?.width;\n        let height = popupWindowAttributes.popupSize?.height;\n        let top = popupWindowAttributes.popupPosition?.top;\n        let left = popupWindowAttributes.popupPosition?.left;\n        if (!width || width < 0 || width > winWidth) {\n            this.logger.verbose(\"Default popup window width used. Window width not configured or invalid.\");\n            width = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_WIDTH;\n        }\n        if (!height || height < 0 || height > winHeight) {\n            this.logger.verbose(\"Default popup window height used. Window height not configured or invalid.\");\n            height = _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_HEIGHT;\n        }\n        if (!top || top < 0 || top > winHeight) {\n            this.logger.verbose(\"Default popup window top position used. Window top not configured or invalid.\");\n            top = Math.max(0, winHeight / 2 - _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n        }\n        if (!left || left < 0 || left > winWidth) {\n            this.logger.verbose(\"Default popup window left position used. Window left not configured or invalid.\");\n            left = Math.max(0, winWidth / 2 - _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n        }\n        return popupWindowParent.open(urlNavigate, popupName, `width=${width}, height=${height}, top=${top}, left=${left}, scrollbars=yes`);\n    }\n    /**\r\n     * Event callback to unload main window.\r\n     */ unloadWindow(e) {\n        this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionType.Popup);\n        if (this.currentWindow) {\n            this.currentWindow.close();\n        }\n        // Guarantees browser unload will happen, so no other errors will be thrown.\n        e.preventDefault();\n    }\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */ cleanPopup(popupWindow, popupWindowParent) {\n        // Close window.\n        popupWindow.close();\n        // Remove window unload function\n        popupWindowParent.removeEventListener(\"beforeunload\", this.unloadWindow);\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n    }\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */ generatePopupName(scopes, authority) {\n        return `${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${scopes.join(\"-\")}.${authority}.${this.correlationId}`;\n    }\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId\r\n     * @param request\r\n     */ generateLogoutPopupName(request) {\n        const homeAccountId = request.account && request.account.homeAccountId;\n        return `${_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserConstants.POPUP_NAME_PREFIX}.${this.config.auth.clientId}.${homeAccountId}.${this.correlationId}`;\n    }\n}\n //# sourceMappingURL=PopupClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/PopupClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedirectClient: () => (/* binding */ RedirectClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _interaction_handler_RedirectHandler_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interaction_handler/RedirectHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../event/EventType.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/event/EventType.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function getNavigationType() {\n    if (true) {\n        return undefined;\n    }\n    const navigationEntries = window.performance.getEntriesByType(\"navigation\");\n    const navigation = navigationEntries.length ? navigationEntries[0] : undefined;\n    return navigation?.type;\n}\nclass RedirectClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.nativeStorage = nativeStorageImpl;\n    }\n    /**\r\n     * Redirects the page to the /authorize endpoint of the IDP\r\n     * @param request\r\n     */ async acquireToken(request) {\n        const validRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, this.correlationId)(request, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n        this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || \"\", validRequest.account || null);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenRedirect);\n        const handleBackButton = (event)=>{\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            if (event.persisted) {\n                this.logger.verbose(\"Page was restored from back/forward cache. Clearing temporary cache.\");\n                this.browserStorage.cleanRequestByState(validRequest.state);\n                this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.RESTORE_FROM_BFCACHE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            }\n        };\n        try {\n            // Create auth code request and generate PKCE params\n            const authCodeRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.initializeAuthorizationCodeRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, this.correlationId)(validRequest);\n            // Initialize the client\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: validRequest.authority,\n                requestAzureCloudOptions: validRequest.azureCloudOptions,\n                requestExtraQueryParameters: validRequest.extraQueryParameters,\n                account: validRequest.account\n            });\n            // Create redirect interaction handler.\n            const interactionHandler = new _interaction_handler_RedirectHandler_mjs__WEBPACK_IMPORTED_MODULE_5__.RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            // Create acquire token url.\n            const navigateUrl = await authClient.getAuthCodeUrl({\n                ...validRequest,\n                nativeBroker: _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_6__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme)\n            });\n            const redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);\n            this.logger.verbosePii(`Redirect start page: ${redirectStartPage}`);\n            // Clear temporary cache if the back button is clicked during the redirect flow.\n            window.addEventListener(\"pageshow\", handleBackButton);\n            // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.\n            return await interactionHandler.initiateAuthRequest(navigateUrl, {\n                navigationClient: this.navigationClient,\n                redirectTimeout: this.config.system.redirectNavigationTimeout,\n                redirectStartPage: redirectStartPage,\n                onRedirectNavigate: request.onRedirectNavigate || this.config.auth.onRedirectNavigate\n            });\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            window.removeEventListener(\"pageshow\", handleBackButton);\n            this.browserStorage.cleanRequestByState(validRequest.state);\n            throw e;\n        }\n    }\n    /**\r\n     * Checks if navigateToLoginRequestUrl is set, and:\r\n     * - if true, performs logic to cache and navigate\r\n     * - if false, handles hash string and parses response\r\n     * @param hash {string} url hash\r\n     * @param parentMeasurement {InProgressPerformanceEvent} parent measurement\r\n     */ async handleRedirectPromise(hash = \"\", parentMeasurement) {\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.handleRedirectPromise);\n        try {\n            if (!this.browserStorage.isInteractionInProgress(true)) {\n                this.logger.info(\"handleRedirectPromise called but there is no interaction in progress, returning null.\");\n                return null;\n            }\n            const [serverParams, responseString] = this.getRedirectResponse(hash || \"\");\n            if (!serverParams) {\n                // Not a recognized server response hash or hash not associated with a redirect request\n                this.logger.info(\"handleRedirectPromise did not detect a response as a result of a redirect. Cleaning temporary cache.\");\n                this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n                // Do not instrument \"no_server_response\" if user clicked back button\n                if (getNavigationType() !== \"back_forward\") {\n                    parentMeasurement.event.errorCode = \"no_server_response\";\n                } else {\n                    this.logger.verbose(\"Back navigation event detected. Muting no_server_response error\");\n                }\n                return null;\n            }\n            // If navigateToLoginRequestUrl is true, get the url where the redirect request was initiated\n            const loginRequestUrl = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.ORIGIN_URI, true) || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.Constants.EMPTY_STRING;\n            const loginRequestUrlNormalized = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.UrlString.removeHashFromUrl(loginRequestUrl);\n            const currentUrlNormalized = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.UrlString.removeHashFromUrl(window.location.href);\n            if (loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl) {\n                // We are on the page we need to navigate to - handle hash\n                this.logger.verbose(\"Current page is loginRequestUrl, handling response\");\n                if (loginRequestUrl.indexOf(\"#\") > -1) {\n                    // Replace current hash with non-msal hash, if present\n                    (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.replaceHash)(loginRequestUrl);\n                }\n                const handleHashResult = await this.handleResponse(serverParams, serverTelemetryManager);\n                return handleHashResult;\n            } else if (!this.config.auth.navigateToLoginRequestUrl) {\n                this.logger.verbose(\"NavigateToLoginRequestUrl set to false, handling response\");\n                return await this.handleResponse(serverParams, serverTelemetryManager);\n            } else if (!(0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.isInIframe)() || this.config.system.allowRedirectInIframe) {\n                /*\r\n                 * Returned from authority using redirect - need to perform navigation before processing response\r\n                 * Cache the hash to be retrieved after the next redirect\r\n                 */ this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH, responseString, true);\n                const navigationOptions = {\n                    apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.handleRedirectPromise,\n                    timeout: this.config.system.redirectNavigationTimeout,\n                    noHistory: true\n                };\n                /**\r\n                 * Default behavior is to redirect to the start page and not process the hash now.\r\n                 * The start page is expected to also call handleRedirectPromise which will process the hash in one of the checks above.\r\n                 */ let processHashOnRedirect = true;\n                if (!loginRequestUrl || loginRequestUrl === \"null\") {\n                    // Redirect to home page if login request url is null (real null or the string null)\n                    const homepage = (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.getHomepage)();\n                    // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage\n                    this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.ORIGIN_URI, homepage, true);\n                    this.logger.warning(\"Unable to get valid login request url from cache, redirecting to home page\");\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(homepage, navigationOptions);\n                } else {\n                    // Navigate to page that initiated the redirect request\n                    this.logger.verbose(`Navigating to loginRequestUrl: ${loginRequestUrl}`);\n                    processHashOnRedirect = await this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions);\n                }\n                // If navigateInternal implementation returns false, handle the hash now\n                if (!processHashOnRedirect) {\n                    return await this.handleResponse(serverParams, serverTelemetryManager);\n                }\n            }\n            return null;\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.browserStorage.cleanRequestByInteractionType(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            throw e;\n        }\n    }\n    /**\r\n     * Gets the response hash for a redirect request\r\n     * Returns null if interactionType in the state value is not \"redirect\" or the hash does not contain known properties\r\n     * @param hash\r\n     */ getRedirectResponse(userProvidedResponse) {\n        this.logger.verbose(\"getRedirectResponseHash called\");\n        // Get current location hash from window or cache.\n        let responseString = userProvidedResponse;\n        if (!responseString) {\n            if (this.config.auth.OIDCOptions.serverResponseType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.ServerResponseType.QUERY) {\n                responseString = window.location.search;\n            } else {\n                responseString = window.location.hash;\n            }\n        }\n        let response = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.getDeserializedResponse(responseString);\n        if (response) {\n            try {\n                (0,_response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__.validateInteractionType)(response, this.browserCrypto, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            } catch (e) {\n                if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                    this.logger.error(`Interaction type validation failed due to ${e.errorCode}: ${e.errorMessage}`);\n                }\n                return [\n                    null,\n                    \"\"\n                ];\n            }\n            (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.clearHash)(window);\n            this.logger.verbose(\"Hash contains known properties, returning response hash\");\n            return [\n                response,\n                responseString\n            ];\n        }\n        const cachedHash = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH, true);\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.TemporaryCacheKeys.URL_HASH));\n        if (cachedHash) {\n            response = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.getDeserializedResponse(cachedHash);\n            if (response) {\n                this.logger.verbose(\"Hash does not contain known properties, returning cached hash\");\n                return [\n                    response,\n                    cachedHash\n                ];\n            }\n        }\n        return [\n            null,\n            \"\"\n        ];\n    }\n    /**\r\n     * Checks if hash exists and handles in window.\r\n     * @param hash\r\n     * @param state\r\n     */ async handleResponse(serverParams, serverTelemetryManager) {\n        const state = serverParams.state;\n        if (!state) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.noStateInHash);\n        }\n        const cachedRequest = this.browserStorage.getCachedRequest(state);\n        this.logger.verbose(\"handleResponse called, retrieved cached request\");\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.nativeConnectionNotEstablished);\n            }\n            const nativeInteractionClient = new _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_15__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, cachedRequest.correlationId);\n            const { userRequestState } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_16__.ProtocolUtils.parseRequestState(this.browserCrypto, state);\n            return nativeInteractionClient.acquireToken({\n                ...cachedRequest,\n                state: userRequestState,\n                prompt: undefined\n            }).finally(()=>{\n                this.browserStorage.cleanRequestByState(state);\n            });\n        }\n        // Hash contains known properties - handle and return in callback\n        const currentAuthority = this.browserStorage.getCachedAuthority(state);\n        if (!currentAuthority) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_13__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_14__.noCachedAuthorityError);\n        }\n        const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n            serverTelemetryManager,\n            requestAuthority: currentAuthority\n        });\n        _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_17__.ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);\n        const interactionHandler = new _interaction_handler_RedirectHandler_mjs__WEBPACK_IMPORTED_MODULE_5__.RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.performanceClient);\n        return interactionHandler.handleCodeResponse(serverParams, state);\n    }\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param logoutRequest\r\n     */ async logout(logoutRequest) {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.logout);\n        try {\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_START, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, logoutRequest);\n            // Clear cache on logout\n            await this.clearCacheOnLogout(validLogoutRequest.account);\n            const navigationOptions = {\n                apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.logout,\n                timeout: this.config.system.redirectNavigationTimeout,\n                noHistory: false\n            };\n            const authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, this.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: logoutRequest && logoutRequest.authority,\n                requestExtraQueryParameters: logoutRequest?.extraQueryParameters,\n                account: logoutRequest && logoutRequest.account || undefined\n            });\n            if (authClient.authority.protocolMode === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_18__.ProtocolMode.OIDC) {\n                try {\n                    authClient.authority.endSessionEndpoint;\n                } catch  {\n                    if (validLogoutRequest.account?.homeAccountId) {\n                        void this.browserStorage.removeAccount(validLogoutRequest.account?.homeAccountId);\n                        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, validLogoutRequest);\n                        return;\n                    }\n                }\n            }\n            // Create logout string and navigate user window to logout.\n            const logoutUri = authClient.getLogoutUri(validLogoutRequest);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_SUCCESS, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, validLogoutRequest);\n            // Check if onRedirectNavigate is implemented, and invoke it if so\n            if (logoutRequest && typeof logoutRequest.onRedirectNavigate === \"function\") {\n                const navigate = logoutRequest.onRedirectNavigate(logoutUri);\n                if (navigate !== false) {\n                    this.logger.verbose(\"Logout onRedirectNavigate did not return false, navigating\");\n                    // Ensure interaction is in progress\n                    if (!this.browserStorage.getInteractionInProgress()) {\n                        this.browserStorage.setInteractionInProgress(true);\n                    }\n                    await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                    return;\n                } else {\n                    // Ensure interaction is not in progress\n                    this.browserStorage.setInteractionInProgress(false);\n                    this.logger.verbose(\"Logout onRedirectNavigate returned false, stopping navigation\");\n                }\n            } else {\n                // Ensure interaction is in progress\n                if (!this.browserStorage.getInteractionInProgress()) {\n                    this.browserStorage.setInteractionInProgress(true);\n                }\n                await this.navigationClient.navigateExternal(logoutUri, navigationOptions);\n                return;\n            }\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_FAILURE, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect, null, e);\n            this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n            throw e;\n        }\n        this.eventHandler.emitEvent(_event_EventType_mjs__WEBPACK_IMPORTED_MODULE_4__.EventType.LOGOUT_END, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_3__.InteractionType.Redirect);\n    }\n    /**\r\n     * Use to get the redirectStartPage either from request or use current window\r\n     * @param requestStartPage\r\n     */ getRedirectStartPage(requestStartPage) {\n        const redirectStartPage = requestStartPage || window.location.href;\n        return _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.UrlString.getAbsoluteUrl(redirectStartPage, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_10__.getCurrentUri)());\n    }\n}\n //# sourceMappingURL=RedirectClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/RedirectClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentAuthCodeClient: () => (/* binding */ SilentAuthCodeClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _HybridSpaAuthorizationCodeClient_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./HybridSpaAuthorizationCodeClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/HybridSpaAuthorizationCodeClient.mjs\");\n/* harmony import */ var _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interaction_handler/InteractionHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentAuthCodeClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n    }\n    /**\r\n     * Acquires a token silently by redeeming an authorization code against the /token endpoint\r\n     * @param request\r\n     */ async acquireToken(request) {\n        // Auth code payload is required\n        if (!request.code) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.authCodeRequired);\n        }\n        // Create silent request\n        const silentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(request, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_5__.InteractionType.Silent);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n        try {\n            // Create auth code request (PKCE not needed)\n            const authCodeRequest = {\n                ...silentRequest,\n                code: request.code\n            };\n            // Initialize the client\n            const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, request.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: silentRequest.authority,\n                requestAzureCloudOptions: silentRequest.azureCloudOptions,\n                requestExtraQueryParameters: silentRequest.extraQueryParameters,\n                account: silentRequest.account\n            });\n            const authClient = new _HybridSpaAuthorizationCodeClient_mjs__WEBPACK_IMPORTED_MODULE_6__.HybridSpaAuthorizationCodeClient(clientConfig);\n            this.logger.verbose(\"Auth code client created\");\n            // Create silent handler\n            const interactionHandler = new _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_7__.InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n            // Handle auth code parameters from request\n            return await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(interactionHandler.handleCodeResponseFromServer.bind(interactionHandler), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.PerformanceEvents.HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)({\n                code: request.code,\n                msgraph_host: request.msGraphHost,\n                cloud_graph_host_name: request.cloudGraphHostName,\n                cloud_instance_host_name: request.cloudInstanceHostName\n            }, silentRequest, false);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     * Currently Unsupported\r\n     */ logout() {\n        // Synchronous so we must reject\n        return Promise.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.silentLogoutUnsupported));\n    }\n}\n //# sourceMappingURL=SilentAuthCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentAuthCodeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentCacheClient: () => (/* binding */ SilentCacheClient)\n/* harmony export */ });\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentCacheClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    /**\r\n     * Returns unexpired tokens from the cache, if available\r\n     * @param silentRequest\r\n     */ async acquireToken(silentRequest) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);\n        // Telemetry manager only used to increment cacheHits here\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenSilent_silentFlow);\n        const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({\n            serverTelemetryManager,\n            requestAuthority: silentRequest.authority,\n            requestAzureCloudOptions: silentRequest.azureCloudOptions,\n            account: silentRequest.account\n        });\n        const silentAuthClient = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.SilentFlowClient(clientConfig, this.performanceClient);\n        this.logger.verbose(\"Silent auth client created\");\n        try {\n            const response = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(silentAuthClient.acquireCachedToken.bind(silentAuthClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentFlowClientAcquireCachedToken, this.logger, this.performanceClient, silentRequest.correlationId)(silentRequest);\n            const authResponse = response[0];\n            this.performanceClient.addFields({\n                fromCache: true\n            }, silentRequest.correlationId);\n            return authResponse;\n        } catch (error) {\n            if (error instanceof _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.BrowserAuthError && error.errorCode === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cryptoKeyNotFound) {\n                this.logger.verbose(\"Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.\");\n            }\n            throw error;\n        }\n    }\n    /**\r\n     * API to silenty clear the browser cache.\r\n     * @param logoutRequest\r\n     */ logout(logoutRequest) {\n        this.logger.verbose(\"logoutRedirect called\");\n        const validLogoutRequest = this.initializeLogoutRequest(logoutRequest);\n        return this.clearCacheOnLogout(validLogoutRequest?.account);\n    }\n}\n //# sourceMappingURL=SilentCacheClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9TaWxlbnRDYWNoZUNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNEU7QUFDa0I7QUFDeEM7QUFDVztBQUNNO0FBRXZFOzs7Q0FHQyxHQUNELE1BQU1PLDBCQUEwQlAscUZBQXlCQTtJQUNyRDs7O0tBR0MsR0FDRCxNQUFNUSxhQUFhQyxhQUFhLEVBQUU7UUFDOUIsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0MsbUJBQW1CLENBQUNWLHlFQUFpQkEsQ0FBQ1csNkJBQTZCLEVBQUVILGNBQWNJLGFBQWE7UUFDdkgsMERBQTBEO1FBQzFELE1BQU1DLHlCQUF5QixJQUFJLENBQUNDLGdDQUFnQyxDQUFDWCw4REFBS0EsQ0FBQ1ksNkJBQTZCO1FBQ3hHLE1BQU1DLGVBQWUsTUFBTWYsdUVBQVdBLENBQUMsSUFBSSxDQUFDZ0Isc0JBQXNCLENBQUNDLElBQUksQ0FBQyxJQUFJLEdBQUdsQix5RUFBaUJBLENBQUNtQiwrQ0FBK0MsRUFBRSxJQUFJLENBQUNDLE1BQU0sRUFBRSxJQUFJLENBQUNYLGlCQUFpQixFQUFFLElBQUksQ0FBQ0csYUFBYSxFQUFFO1lBQ3ZNQztZQUNBUSxrQkFBa0JiLGNBQWNjLFNBQVM7WUFDekNDLDBCQUEwQmYsY0FBY2dCLGlCQUFpQjtZQUN6REMsU0FBU2pCLGNBQWNpQixPQUFPO1FBQ2xDO1FBQ0EsTUFBTUMsbUJBQW1CLElBQUl4Qix3RUFBZ0JBLENBQUNjLGNBQWMsSUFBSSxDQUFDUCxpQkFBaUI7UUFDbEYsSUFBSSxDQUFDVyxNQUFNLENBQUNPLE9BQU8sQ0FBQztRQUNwQixJQUFJO1lBQ0EsTUFBTUMsV0FBVyxNQUFNM0IsdUVBQVdBLENBQUN5QixpQkFBaUJHLGtCQUFrQixDQUFDWCxJQUFJLENBQUNRLG1CQUFtQjFCLHlFQUFpQkEsQ0FBQzhCLGtDQUFrQyxFQUFFLElBQUksQ0FBQ1YsTUFBTSxFQUFFLElBQUksQ0FBQ1gsaUJBQWlCLEVBQUVELGNBQWNJLGFBQWEsRUFBRUo7WUFDdk4sTUFBTXVCLGVBQWVILFFBQVEsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQ25CLGlCQUFpQixDQUFDdUIsU0FBUyxDQUFDO2dCQUM3QkMsV0FBVztZQUNmLEdBQUd6QixjQUFjSSxhQUFhO1lBQzlCLE9BQU9tQjtRQUNYLEVBQ0EsT0FBT0csT0FBTztZQUNWLElBQUlBLGlCQUFpQjlCLHlFQUFnQkEsSUFDakM4QixNQUFNQyxTQUFTLEtBQUs5QiwrRUFBaUJBLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQ2UsTUFBTSxDQUFDTyxPQUFPLENBQUM7WUFDeEI7WUFDQSxNQUFNTztRQUNWO0lBQ0o7SUFDQTs7O0tBR0MsR0FDREUsT0FBT0MsYUFBYSxFQUFFO1FBQ2xCLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ08sT0FBTyxDQUFDO1FBQ3BCLE1BQU1XLHFCQUFxQixJQUFJLENBQUNDLHVCQUF1QixDQUFDRjtRQUN4RCxPQUFPLElBQUksQ0FBQ0csa0JBQWtCLENBQUNGLG9CQUFvQmI7SUFDdkQ7QUFDSjtBQUU2QixDQUM3Qiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9TaWxlbnRDYWNoZUNsaWVudC5tanM/NTU2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IFN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnQgfSBmcm9tICcuL1N0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnQubWpzJztcbmltcG9ydCB7IFBlcmZvcm1hbmNlRXZlbnRzLCBpbnZva2VBc3luYywgU2lsZW50Rmxvd0NsaWVudCB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IEFwaUlkIH0gZnJvbSAnLi4vdXRpbHMvQnJvd3NlckNvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgQnJvd3NlckF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0Jyb3dzZXJBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IGNyeXB0b0tleU5vdEZvdW5kIH0gZnJvbSAnLi4vZXJyb3IvQnJvd3NlckF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBTaWxlbnRDYWNoZUNsaWVudCBleHRlbmRzIFN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHVuZXhwaXJlZCB0b2tlbnMgZnJvbSB0aGUgY2FjaGUsIGlmIGF2YWlsYWJsZVxyXG4gICAgICogQHBhcmFtIHNpbGVudFJlcXVlc3RcclxuICAgICAqL1xyXG4gICAgYXN5bmMgYWNxdWlyZVRva2VuKHNpbGVudFJlcXVlc3QpIHtcclxuICAgICAgICB0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LmFkZFF1ZXVlTWVhc3VyZW1lbnQoUGVyZm9ybWFuY2VFdmVudHMuU2lsZW50Q2FjaGVDbGllbnRBY3F1aXJlVG9rZW4sIHNpbGVudFJlcXVlc3QuY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgLy8gVGVsZW1ldHJ5IG1hbmFnZXIgb25seSB1c2VkIHRvIGluY3JlbWVudCBjYWNoZUhpdHMgaGVyZVxyXG4gICAgICAgIGNvbnN0IHNlcnZlclRlbGVtZXRyeU1hbmFnZXIgPSB0aGlzLmluaXRpYWxpemVTZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyKEFwaUlkLmFjcXVpcmVUb2tlblNpbGVudF9zaWxlbnRGbG93KTtcclxuICAgICAgICBjb25zdCBjbGllbnRDb25maWcgPSBhd2FpdCBpbnZva2VBc3luYyh0aGlzLmdldENsaWVudENvbmZpZ3VyYXRpb24uYmluZCh0aGlzKSwgUGVyZm9ybWFuY2VFdmVudHMuU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudEdldENsaWVudENvbmZpZ3VyYXRpb24sIHRoaXMubG9nZ2VyLCB0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LCB0aGlzLmNvcnJlbGF0aW9uSWQpKHtcclxuICAgICAgICAgICAgc2VydmVyVGVsZW1ldHJ5TWFuYWdlcixcclxuICAgICAgICAgICAgcmVxdWVzdEF1dGhvcml0eTogc2lsZW50UmVxdWVzdC5hdXRob3JpdHksXHJcbiAgICAgICAgICAgIHJlcXVlc3RBenVyZUNsb3VkT3B0aW9uczogc2lsZW50UmVxdWVzdC5henVyZUNsb3VkT3B0aW9ucyxcclxuICAgICAgICAgICAgYWNjb3VudDogc2lsZW50UmVxdWVzdC5hY2NvdW50LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHNpbGVudEF1dGhDbGllbnQgPSBuZXcgU2lsZW50Rmxvd0NsaWVudChjbGllbnRDb25maWcsIHRoaXMucGVyZm9ybWFuY2VDbGllbnQpO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJTaWxlbnQgYXV0aCBjbGllbnQgY3JlYXRlZFwiKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGludm9rZUFzeW5jKHNpbGVudEF1dGhDbGllbnQuYWNxdWlyZUNhY2hlZFRva2VuLmJpbmQoc2lsZW50QXV0aENsaWVudCksIFBlcmZvcm1hbmNlRXZlbnRzLlNpbGVudEZsb3dDbGllbnRBY3F1aXJlQ2FjaGVkVG9rZW4sIHRoaXMubG9nZ2VyLCB0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LCBzaWxlbnRSZXF1ZXN0LmNvcnJlbGF0aW9uSWQpKHNpbGVudFJlcXVlc3QpO1xyXG4gICAgICAgICAgICBjb25zdCBhdXRoUmVzcG9uc2UgPSByZXNwb25zZVswXTtcclxuICAgICAgICAgICAgdGhpcy5wZXJmb3JtYW5jZUNsaWVudC5hZGRGaWVsZHMoe1xyXG4gICAgICAgICAgICAgICAgZnJvbUNhY2hlOiB0cnVlLFxyXG4gICAgICAgICAgICB9LCBzaWxlbnRSZXF1ZXN0LmNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gYXV0aFJlc3BvbnNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQnJvd3NlckF1dGhFcnJvciAmJlxyXG4gICAgICAgICAgICAgICAgZXJyb3IuZXJyb3JDb2RlID09PSBjcnlwdG9LZXlOb3RGb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlNpZ25pbmcga2V5cGFpciBmb3IgYm91bmQgYWNjZXNzIHRva2VuIG5vdCBmb3VuZC4gUmVmcmVzaGluZyBib3VuZCBhY2Nlc3MgdG9rZW4gYW5kIGdlbmVyYXRpbmcgYSBuZXcgY3J5cHRvIGtleXBhaXIuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQVBJIHRvIHNpbGVudHkgY2xlYXIgdGhlIGJyb3dzZXIgY2FjaGUuXHJcbiAgICAgKiBAcGFyYW0gbG9nb3V0UmVxdWVzdFxyXG4gICAgICovXHJcbiAgICBsb2dvdXQobG9nb3V0UmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJsb2dvdXRSZWRpcmVjdCBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgdmFsaWRMb2dvdXRSZXF1ZXN0ID0gdGhpcy5pbml0aWFsaXplTG9nb3V0UmVxdWVzdChsb2dvdXRSZXF1ZXN0KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbGVhckNhY2hlT25Mb2dvdXQodmFsaWRMb2dvdXRSZXF1ZXN0Py5hY2NvdW50KTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBTaWxlbnRDYWNoZUNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2lsZW50Q2FjaGVDbGllbnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnQiLCJQZXJmb3JtYW5jZUV2ZW50cyIsImludm9rZUFzeW5jIiwiU2lsZW50Rmxvd0NsaWVudCIsIkFwaUlkIiwiQnJvd3NlckF1dGhFcnJvciIsImNyeXB0b0tleU5vdEZvdW5kIiwiU2lsZW50Q2FjaGVDbGllbnQiLCJhY3F1aXJlVG9rZW4iLCJzaWxlbnRSZXF1ZXN0IiwicGVyZm9ybWFuY2VDbGllbnQiLCJhZGRRdWV1ZU1lYXN1cmVtZW50IiwiU2lsZW50Q2FjaGVDbGllbnRBY3F1aXJlVG9rZW4iLCJjb3JyZWxhdGlvbklkIiwic2VydmVyVGVsZW1ldHJ5TWFuYWdlciIsImluaXRpYWxpemVTZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyIiwiYWNxdWlyZVRva2VuU2lsZW50X3NpbGVudEZsb3ciLCJjbGllbnRDb25maWciLCJnZXRDbGllbnRDb25maWd1cmF0aW9uIiwiYmluZCIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXRDbGllbnRDb25maWd1cmF0aW9uIiwibG9nZ2VyIiwicmVxdWVzdEF1dGhvcml0eSIsImF1dGhvcml0eSIsInJlcXVlc3RBenVyZUNsb3VkT3B0aW9ucyIsImF6dXJlQ2xvdWRPcHRpb25zIiwiYWNjb3VudCIsInNpbGVudEF1dGhDbGllbnQiLCJ2ZXJib3NlIiwicmVzcG9uc2UiLCJhY3F1aXJlQ2FjaGVkVG9rZW4iLCJTaWxlbnRGbG93Q2xpZW50QWNxdWlyZUNhY2hlZFRva2VuIiwiYXV0aFJlc3BvbnNlIiwiYWRkRmllbGRzIiwiZnJvbUNhY2hlIiwiZXJyb3IiLCJlcnJvckNvZGUiLCJsb2dvdXQiLCJsb2dvdXRSZXF1ZXN0IiwidmFsaWRMb2dvdXRSZXF1ZXN0IiwiaW5pdGlhbGl6ZUxvZ291dFJlcXVlc3QiLCJjbGVhckNhY2hlT25Mb2dvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentCacheClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentIframeClient: () => (/* binding */ SilentIframeClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _interaction_handler_SilentHandler_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../interaction_handler/SilentHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs\");\n/* harmony import */ var _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../broker/nativeBroker/NativeMessageHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/broker/nativeBroker/NativeMessageHandler.mjs\");\n/* harmony import */ var _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./NativeInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/NativeInteractionClient.mjs\");\n/* harmony import */ var _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../interaction_handler/InteractionHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentIframeClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId){\n        super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n    /**\r\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n     * @param request\r\n     */ async acquireToken(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n        // Check that we have some SSO data\n        if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {\n            this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n        }\n        // Check the prompt value\n        const inputRequest = {\n            ...request\n        };\n        if (inputRequest.prompt) {\n            if (inputRequest.prompt !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE && inputRequest.prompt !== _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NO_SESSION) {\n                this.logger.warning(`SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE}`);\n                inputRequest.prompt = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE;\n            }\n        } else {\n            inputRequest.prompt = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE;\n        }\n        // Create silent request\n        const silentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.InteractionType.Silent);\n        (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_5__.preconnect)(silentRequest.authority);\n        const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n        let authClient;\n        try {\n            // Initialize the client\n            authClient = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createAuthCodeClient.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)({\n                serverTelemetryManager,\n                requestAuthority: silentRequest.authority,\n                requestAzureCloudOptions: silentRequest.azureCloudOptions,\n                requestExtraQueryParameters: silentRequest.extraQueryParameters,\n                account: silentRequest.account\n            });\n            return await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.silentTokenHelper.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, silentRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AuthError) {\n                e.setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n            if (!authClient || !(e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.AuthError) || e.errorCode !== _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserConstants.INVALID_GRANT_ERROR) {\n                throw e;\n            }\n            this.performanceClient.addFields({\n                retryError: e.errorCode\n            }, this.correlationId);\n            const retrySilentRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.InteractionType.Silent);\n            return await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.silentTokenHelper.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, this.correlationId)(authClient, retrySilentRequest);\n        }\n    }\n    /**\r\n     * Currently Unsupported\r\n     */ logout() {\n        // Synchronous so we must reject\n        return Promise.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_8__.silentLogoutUnsupported));\n    }\n    /**\r\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n     * @param navigateUrl\r\n     * @param userRequestScopes\r\n     */ async silentTokenHelper(authClient, silentRequest) {\n        const correlationId = silentRequest.correlationId;\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentIframeClientTokenHelper, correlationId);\n        // Create auth code request and generate PKCE params\n        const authCodeRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.initializeAuthorizationCodeRequest.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.logger, this.performanceClient, correlationId)(silentRequest);\n        // Create authorize request url\n        const navigateUrl = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(authClient.getAuthCodeUrl.bind(authClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)({\n            ...silentRequest,\n            nativeBroker: _broker_nativeBroker_NativeMessageHandler_mjs__WEBPACK_IMPORTED_MODULE_9__.NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme)\n        });\n        // Create silent handler\n        const interactionHandler = new _interaction_handler_InteractionHandler_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);\n        // Get the frame handle for the silent request\n        const msalFrame = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(_interaction_handler_SilentHandler_mjs__WEBPACK_IMPORTED_MODULE_11__.initiateAuthRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(navigateUrl, this.performanceClient, this.logger, correlationId, this.config.system.navigateFrameWait);\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(_interaction_handler_SilentHandler_mjs__WEBPACK_IMPORTED_MODULE_11__.monitorIframeForHash, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);\n        const serverParams = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(_response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_12__.deserializeResponse, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, this.correlationId)(responseString, responseType, this.logger);\n        if (serverParams.accountId) {\n            this.logger.verbose(\"Account id found in hash, calling WAM for token\");\n            if (!this.nativeMessageHandler) {\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_8__.nativeConnectionNotEstablished);\n            }\n            const nativeInteractionClient = new _NativeInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_13__.NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, correlationId);\n            const { userRequestState } = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_14__.ProtocolUtils.parseRequestState(this.browserCrypto, silentRequest.state);\n            return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(nativeInteractionClient.acquireToken.bind(nativeInteractionClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.NativeInteractionClientAcquireToken, this.logger, this.performanceClient, correlationId)({\n                ...silentRequest,\n                state: userRequestState,\n                prompt: silentRequest.prompt || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.PromptValue.NONE\n            });\n        }\n        // Handle response from hash string\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(interactionHandler.handleCodeResponse.bind(interactionHandler), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleCodeResponse, this.logger, this.performanceClient, correlationId)(serverParams, silentRequest);\n    }\n}\n //# sourceMappingURL=SilentIframeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentIframeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentRefreshClient: () => (/* binding */ SilentRefreshClient)\n/* harmony export */ });\n/* harmony import */ var _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StandardInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../request/RequestHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class SilentRefreshClient extends _StandardInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.StandardInteractionClient {\n    /**\r\n     * Exchanges the refresh token for new tokens\r\n     * @param request\r\n     */ async acquireToken(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);\n        const baseRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(_request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_3__.initializeBaseRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, request.correlationId)(request, this.config, this.performanceClient, this.logger);\n        const silentRequest = {\n            ...request,\n            ...baseRequest\n        };\n        if (request.redirectUri) {\n            // Make sure any passed redirectUri is converted to an absolute URL - redirectUri is not a required parameter for refresh token redemption so only include if explicitly provided\n            silentRequest.redirectUri = this.getRedirectUri(request.redirectUri);\n        }\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.ApiId.acquireTokenSilent_silentFlow);\n        const refreshTokenClient = await this.createRefreshTokenClient({\n            serverTelemetryManager,\n            authorityUrl: silentRequest.authority,\n            azureCloudOptions: silentRequest.azureCloudOptions,\n            account: silentRequest.account\n        });\n        // Send request to renew token. Auth module will throw errors if token cannot be renewed.\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(refreshTokenClient.acquireTokenByRefreshToken.bind(refreshTokenClient), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, this.logger, this.performanceClient, request.correlationId)(silentRequest).catch((e)=>{\n            e.setCorrelationId(this.correlationId);\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        });\n    }\n    /**\r\n     * Currently Unsupported\r\n     */ logout() {\n        // Synchronous so we must reject\n        return Promise.reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.silentLogoutUnsupported));\n    }\n    /**\r\n     * Creates a Refresh Client with the given authority, or the default authority.\r\n     * @param params {\r\n     *         serverTelemetryManager: ServerTelemetryManager;\r\n     *         authorityUrl?: string;\r\n     *         azureCloudOptions?: AzureCloudOptions;\r\n     *         extraQueryParams?: StringDict;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async createRefreshTokenClient(params) {\n        // Create auth module.\n        const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)({\n            serverTelemetryManager: params.serverTelemetryManager,\n            requestAuthority: params.authorityUrl,\n            requestAzureCloudOptions: params.azureCloudOptions,\n            requestExtraQueryParameters: params.extraQueryParameters,\n            account: params.account\n        });\n        return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.RefreshTokenClient(clientConfig, this.performanceClient);\n    }\n}\n //# sourceMappingURL=SilentRefreshClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/SilentRefreshClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardInteractionClient: () => (/* binding */ StandardInteractionClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseInteractionClient.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/BaseInteractionClient.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/BrowserUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\");\n/* harmony import */ var _crypto_PkceGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../crypto/PkceGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/PkceGenerator.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../request/RequestHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Defines the class structure and helper functions used by the \"standard\", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))\r\n */ class StandardInteractionClient extends _BaseInteractionClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseInteractionClient {\n    /**\r\n     * Generates an auth code request tied to the url request.\r\n     * @param request\r\n     */ async initializeAuthorizationCodeRequest(request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, this.correlationId);\n        const generatedPkceParams = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(_crypto_PkceGenerator_mjs__WEBPACK_IMPORTED_MODULE_3__.generatePkceCodes, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.GeneratePkceCodes, this.logger, this.performanceClient, this.correlationId)(this.performanceClient, this.logger, this.correlationId);\n        const authCodeRequest = {\n            ...request,\n            redirectUri: request.redirectUri,\n            code: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            codeVerifier: generatedPkceParams.verifier\n        };\n        request.codeChallenge = generatedPkceParams.challenge;\n        request.codeChallengeMethod = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.S256_CODE_CHALLENGE_METHOD;\n        return authCodeRequest;\n    }\n    /**\r\n     * Initializer for the logout request.\r\n     * @param logoutRequest\r\n     */ initializeLogoutRequest(logoutRequest) {\n        this.logger.verbose(\"initializeLogoutRequest called\", logoutRequest?.correlationId);\n        const validLogoutRequest = {\n            correlationId: this.correlationId || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.createNewGuid)(),\n            ...logoutRequest\n        };\n        /**\r\n         * Set logout_hint to be login_hint from ID Token Claims if present\r\n         * and logoutHint attribute wasn't manually set in logout request\r\n         */ if (logoutRequest) {\n            // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims\n            if (!logoutRequest.logoutHint) {\n                if (logoutRequest.account) {\n                    const logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);\n                    if (logoutHint) {\n                        this.logger.verbose(\"Setting logoutHint to login_hint ID Token Claim value for the account provided\");\n                        validLogoutRequest.logoutHint = logoutHint;\n                    }\n                } else {\n                    this.logger.verbose(\"logoutHint was not set and account was not passed into logout request, logoutHint will not be set\");\n                }\n            } else {\n                this.logger.verbose(\"logoutHint has already been set in logoutRequest\");\n            }\n        } else {\n            this.logger.verbose(\"logoutHint will not be set since no logout request was configured\");\n        }\n        /*\r\n         * Only set redirect uri if logout request isn't provided or the set uri isn't null.\r\n         * Otherwise, use passed uri, config, or current page.\r\n         */ if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {\n            if (logoutRequest && logoutRequest.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to uri set on logout request\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)());\n            } else if (this.config.auth.postLogoutRedirectUri === null) {\n                this.logger.verbose(\"postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect\", validLogoutRequest.correlationId);\n            } else if (this.config.auth.postLogoutRedirectUri) {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to configured uri\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)());\n            } else {\n                this.logger.verbose(\"Setting postLogoutRedirectUri to current page\", validLogoutRequest.correlationId);\n                validLogoutRequest.postLogoutRedirectUri = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.UrlString.getAbsoluteUrl((0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)(), (0,_utils_BrowserUtils_mjs__WEBPACK_IMPORTED_MODULE_7__.getCurrentUri)());\n            }\n        } else {\n            this.logger.verbose(\"postLogoutRedirectUri passed as null, not setting post logout redirect uri\", validLogoutRequest.correlationId);\n        }\n        return validLogoutRequest;\n    }\n    /**\r\n     * Parses login_hint ID Token Claim out of AccountInfo object to be used as\r\n     * logout_hint in end session request.\r\n     * @param account\r\n     */ getLogoutHintFromIdTokenClaims(account) {\n        const idTokenClaims = account.idTokenClaims;\n        if (idTokenClaims) {\n            if (idTokenClaims.login_hint) {\n                return idTokenClaims.login_hint;\n            } else {\n                this.logger.verbose(\"The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request\");\n            }\n        } else {\n            this.logger.verbose(\"The provided account does not contain ID Token Claims, logoutHint will not be added to logout request\");\n        }\n        return null;\n    }\n    /**\r\n     * Creates an Authorization Code Client with the given authority, or the default authority.\r\n     * @param params {\r\n     *         serverTelemetryManager: ServerTelemetryManager;\r\n     *         authorityUrl?: string;\r\n     *         requestAzureCloudOptions?: AzureCloudOptions;\r\n     *         requestExtraQueryParameters?: StringDict;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async createAuthCodeClient(params) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);\n        // Create auth module.\n        const clientConfig = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.getClientConfiguration.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.logger, this.performanceClient, this.correlationId)(params);\n        return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_8__.AuthorizationCodeClient(clientConfig, this.performanceClient);\n    }\n    /**\r\n     * Creates a Client Configuration object with the given request authority, or the default authority.\r\n     * @param params {\r\n     *         serverTelemetryManager: ServerTelemetryManager;\r\n     *         requestAuthority?: string;\r\n     *         requestAzureCloudOptions?: AzureCloudOptions;\r\n     *         requestExtraQueryParameters?: boolean;\r\n     *         account?: AccountInfo;\r\n     *        }\r\n     */ async getClientConfiguration(params) {\n        const { serverTelemetryManager, requestAuthority, requestAzureCloudOptions, requestExtraQueryParameters, account } = params;\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);\n        const discoveredAuthority = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.getDiscoveredAuthority.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, this.correlationId)({\n            requestAuthority,\n            requestAzureCloudOptions,\n            requestExtraQueryParameters,\n            account\n        });\n        const logger = this.config.system.loggerOptions;\n        return {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n                redirectUri: this.config.auth.redirectUri\n            },\n            systemOptions: {\n                tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,\n                preventCorsPreflight: true\n            },\n            loggerOptions: {\n                loggerCallback: logger.loggerCallback,\n                piiLoggingEnabled: logger.piiLoggingEnabled,\n                logLevel: logger.logLevel,\n                correlationId: this.correlationId\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n            },\n            cryptoInterface: this.browserCrypto,\n            networkInterface: this.networkClient,\n            storageInterface: this.browserStorage,\n            serverTelemetryManager: serverTelemetryManager,\n            libraryInfo: {\n                sku: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_9__.BrowserConstants.MSAL_SKU,\n                version: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_10__.version,\n                cpu: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n                os: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING\n            },\n            telemetry: this.config.telemetry\n        };\n    }\n    /**\r\n     * Helper to initialize required request parameters for interactive APIs and ssoSilent()\r\n     * @param request\r\n     * @param interactionType\r\n     */ async initializeAuthorizationRequest(request, interactionType) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);\n        const redirectUri = this.getRedirectUri(request.redirectUri);\n        const browserState = {\n            interactionType: interactionType\n        };\n        const state = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.ProtocolUtils.setRequestState(this.browserCrypto, request && request.state || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, browserState);\n        const baseRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(_request_RequestHelpers_mjs__WEBPACK_IMPORTED_MODULE_12__.initializeBaseRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.InitializeBaseRequest, this.logger, this.performanceClient, this.correlationId)({\n            ...request,\n            correlationId: this.correlationId\n        }, this.config, this.performanceClient, this.logger);\n        const validatedRequest = {\n            ...baseRequest,\n            redirectUri: redirectUri,\n            state: state,\n            nonce: request.nonce || (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.createNewGuid)(),\n            responseMode: this.config.auth.OIDCOptions.serverResponseType\n        };\n        // Skip active account lookup if either login hint or session id is set\n        if (request.loginHint || request.sid) {\n            return validatedRequest;\n        }\n        const account = request.account || this.browserStorage.getActiveAccount();\n        if (account) {\n            this.logger.verbose(\"Setting validated request account\", this.correlationId);\n            this.logger.verbosePii(`Setting validated request account: ${account.homeAccountId}`, this.correlationId);\n            validatedRequest.account = account;\n        }\n        // Check for ADAL/MSAL v1 SSO\n        if (!validatedRequest.loginHint && !account) {\n            const legacyLoginHint = this.browserStorage.getLegacyLoginHint();\n            if (legacyLoginHint) {\n                validatedRequest.loginHint = legacyLoginHint;\n            }\n        }\n        return validatedRequest;\n    }\n}\n //# sourceMappingURL=StandardInteractionClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L2ludGVyYWN0aW9uX2NsaWVudC9TdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUMwSTtBQUN0RTtBQUNIO0FBQ2hCO0FBQ1M7QUFDTTtBQUNKO0FBQ1U7QUFFdEU7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNYSxrQ0FBa0NQLDZFQUFxQkE7SUFDekQ7OztLQUdDLEdBQ0QsTUFBTVEsbUNBQW1DQyxPQUFPLEVBQUU7UUFDOUMsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0MsbUJBQW1CLENBQUNqQix5RUFBaUJBLENBQUNrQiwyREFBMkQsRUFBRSxJQUFJLENBQUNDLGFBQWE7UUFDNUksTUFBTUMsc0JBQXNCLE1BQU1uQix1RUFBV0EsQ0FBQ1Msd0VBQWlCQSxFQUFFVix5RUFBaUJBLENBQUNxQixpQkFBaUIsRUFBRSxJQUFJLENBQUNDLE1BQU0sRUFBRSxJQUFJLENBQUNOLGlCQUFpQixFQUFFLElBQUksQ0FBQ0csYUFBYSxFQUFFLElBQUksQ0FBQ0gsaUJBQWlCLEVBQUUsSUFBSSxDQUFDTSxNQUFNLEVBQUUsSUFBSSxDQUFDSCxhQUFhO1FBQ3ROLE1BQU1JLGtCQUFrQjtZQUNwQixHQUFHUixPQUFPO1lBQ1ZTLGFBQWFULFFBQVFTLFdBQVc7WUFDaENDLE1BQU12QixpRUFBU0EsQ0FBQ3dCLFlBQVk7WUFDNUJDLGNBQWNQLG9CQUFvQlEsUUFBUTtRQUM5QztRQUNBYixRQUFRYyxhQUFhLEdBQUdULG9CQUFvQlUsU0FBUztRQUNyRGYsUUFBUWdCLG1CQUFtQixHQUFHN0IsaUVBQVNBLENBQUM4QiwwQkFBMEI7UUFDbEUsT0FBT1Q7SUFDWDtJQUNBOzs7S0FHQyxHQUNEVSx3QkFBd0JDLGFBQWEsRUFBRTtRQUNuQyxJQUFJLENBQUNaLE1BQU0sQ0FBQ2EsT0FBTyxDQUFDLGtDQUFrQ0QsZUFBZWY7UUFDckUsTUFBTWlCLHFCQUFxQjtZQUN2QmpCLGVBQWUsSUFBSSxDQUFDQSxhQUFhLElBQUlSLHdFQUFhQTtZQUNsRCxHQUFHdUIsYUFBYTtRQUNwQjtRQUNBOzs7U0FHQyxHQUNELElBQUlBLGVBQWU7WUFDZix1R0FBdUc7WUFDdkcsSUFBSSxDQUFDQSxjQUFjRyxVQUFVLEVBQUU7Z0JBQzNCLElBQUlILGNBQWNJLE9BQU8sRUFBRTtvQkFDdkIsTUFBTUQsYUFBYSxJQUFJLENBQUNFLDhCQUE4QixDQUFDTCxjQUFjSSxPQUFPO29CQUM1RSxJQUFJRCxZQUFZO3dCQUNaLElBQUksQ0FBQ2YsTUFBTSxDQUFDYSxPQUFPLENBQUM7d0JBQ3BCQyxtQkFBbUJDLFVBQVUsR0FBR0E7b0JBQ3BDO2dCQUNKLE9BQ0s7b0JBQ0QsSUFBSSxDQUFDZixNQUFNLENBQUNhLE9BQU8sQ0FBQztnQkFDeEI7WUFDSixPQUNLO2dCQUNELElBQUksQ0FBQ2IsTUFBTSxDQUFDYSxPQUFPLENBQUM7WUFDeEI7UUFDSixPQUNLO1lBQ0QsSUFBSSxDQUFDYixNQUFNLENBQUNhLE9BQU8sQ0FBQztRQUN4QjtRQUNBOzs7U0FHQyxHQUNELElBQUksQ0FBQ0QsaUJBQWlCQSxjQUFjTSxxQkFBcUIsS0FBSyxNQUFNO1lBQ2hFLElBQUlOLGlCQUFpQkEsY0FBY00scUJBQXFCLEVBQUU7Z0JBQ3RELElBQUksQ0FBQ2xCLE1BQU0sQ0FBQ2EsT0FBTyxDQUFDLDhEQUE4REMsbUJBQW1CakIsYUFBYTtnQkFDbEhpQixtQkFBbUJJLHFCQUFxQixHQUNwQ3JDLGlFQUFTQSxDQUFDc0MsY0FBYyxDQUFDUCxjQUFjTSxxQkFBcUIsRUFBRS9CLHNFQUFhQTtZQUNuRixPQUNLLElBQUksSUFBSSxDQUFDaUMsTUFBTSxDQUFDQyxJQUFJLENBQUNILHFCQUFxQixLQUFLLE1BQU07Z0JBQ3RELElBQUksQ0FBQ2xCLE1BQU0sQ0FBQ2EsT0FBTyxDQUFDLHdHQUF3R0MsbUJBQW1CakIsYUFBYTtZQUNoSyxPQUNLLElBQUksSUFBSSxDQUFDdUIsTUFBTSxDQUFDQyxJQUFJLENBQUNILHFCQUFxQixFQUFFO2dCQUM3QyxJQUFJLENBQUNsQixNQUFNLENBQUNhLE9BQU8sQ0FBQyxtREFBbURDLG1CQUFtQmpCLGFBQWE7Z0JBQ3ZHaUIsbUJBQW1CSSxxQkFBcUIsR0FDcENyQyxpRUFBU0EsQ0FBQ3NDLGNBQWMsQ0FBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxxQkFBcUIsRUFBRS9CLHNFQUFhQTtZQUN0RixPQUNLO2dCQUNELElBQUksQ0FBQ2EsTUFBTSxDQUFDYSxPQUFPLENBQUMsaURBQWlEQyxtQkFBbUJqQixhQUFhO2dCQUNyR2lCLG1CQUFtQkkscUJBQXFCLEdBQ3BDckMsaUVBQVNBLENBQUNzQyxjQUFjLENBQUNoQyxzRUFBYUEsSUFBSUEsc0VBQWFBO1lBQy9EO1FBQ0osT0FDSztZQUNELElBQUksQ0FBQ2EsTUFBTSxDQUFDYSxPQUFPLENBQUMsOEVBQThFQyxtQkFBbUJqQixhQUFhO1FBQ3RJO1FBQ0EsT0FBT2lCO0lBQ1g7SUFDQTs7OztLQUlDLEdBQ0RHLCtCQUErQkQsT0FBTyxFQUFFO1FBQ3BDLE1BQU1NLGdCQUFnQk4sUUFBUU0sYUFBYTtRQUMzQyxJQUFJQSxlQUFlO1lBQ2YsSUFBSUEsY0FBY0MsVUFBVSxFQUFFO2dCQUMxQixPQUFPRCxjQUFjQyxVQUFVO1lBQ25DLE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDdkIsTUFBTSxDQUFDYSxPQUFPLENBQUM7WUFDeEI7UUFDSixPQUNLO1lBQ0QsSUFBSSxDQUFDYixNQUFNLENBQUNhLE9BQU8sQ0FBQztRQUN4QjtRQUNBLE9BQU87SUFDWDtJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNELE1BQU1XLHFCQUFxQkMsTUFBTSxFQUFFO1FBQy9CLElBQUksQ0FBQy9CLGlCQUFpQixDQUFDQyxtQkFBbUIsQ0FBQ2pCLHlFQUFpQkEsQ0FBQ2dELDZDQUE2QyxFQUFFLElBQUksQ0FBQzdCLGFBQWE7UUFDOUgsc0JBQXNCO1FBQ3RCLE1BQU04QixlQUFlLE1BQU1oRCx1RUFBV0EsQ0FBQyxJQUFJLENBQUNpRCxzQkFBc0IsQ0FBQ0MsSUFBSSxDQUFDLElBQUksR0FBR25ELHlFQUFpQkEsQ0FBQ29ELCtDQUErQyxFQUFFLElBQUksQ0FBQzlCLE1BQU0sRUFBRSxJQUFJLENBQUNOLGlCQUFpQixFQUFFLElBQUksQ0FBQ0csYUFBYSxFQUFFNEI7UUFDM00sT0FBTyxJQUFJM0MsK0VBQXVCQSxDQUFDNkMsY0FBYyxJQUFJLENBQUNqQyxpQkFBaUI7SUFDM0U7SUFDQTs7Ozs7Ozs7O0tBU0MsR0FDRCxNQUFNa0MsdUJBQXVCSCxNQUFNLEVBQUU7UUFDakMsTUFBTSxFQUFFTSxzQkFBc0IsRUFBRUMsZ0JBQWdCLEVBQUVDLHdCQUF3QixFQUFFQywyQkFBMkIsRUFBRWxCLE9BQU8sRUFBRyxHQUFHUztRQUN0SCxJQUFJLENBQUMvQixpQkFBaUIsQ0FBQ0MsbUJBQW1CLENBQUNqQix5RUFBaUJBLENBQUNvRCwrQ0FBK0MsRUFBRSxJQUFJLENBQUNqQyxhQUFhO1FBQ2hJLE1BQU1zQyxzQkFBc0IsTUFBTXhELHVFQUFXQSxDQUFDLElBQUksQ0FBQ3lELHNCQUFzQixDQUFDUCxJQUFJLENBQUMsSUFBSSxHQUFHbkQseUVBQWlCQSxDQUFDMkQsK0NBQStDLEVBQUUsSUFBSSxDQUFDckMsTUFBTSxFQUFFLElBQUksQ0FBQ04saUJBQWlCLEVBQUUsSUFBSSxDQUFDRyxhQUFhLEVBQUU7WUFDOU1tQztZQUNBQztZQUNBQztZQUNBbEI7UUFDSjtRQUNBLE1BQU1oQixTQUFTLElBQUksQ0FBQ29CLE1BQU0sQ0FBQ2tCLE1BQU0sQ0FBQ0MsYUFBYTtRQUMvQyxPQUFPO1lBQ0hDLGFBQWE7Z0JBQ1RDLFVBQVUsSUFBSSxDQUFDckIsTUFBTSxDQUFDQyxJQUFJLENBQUNvQixRQUFRO2dCQUNuQ0MsV0FBV1A7Z0JBQ1hRLG9CQUFvQixJQUFJLENBQUN2QixNQUFNLENBQUNDLElBQUksQ0FBQ3NCLGtCQUFrQjtnQkFDdkR6QyxhQUFhLElBQUksQ0FBQ2tCLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDbkIsV0FBVztZQUM3QztZQUNBMEMsZUFBZTtnQkFDWEMsMkJBQTJCLElBQUksQ0FBQ3pCLE1BQU0sQ0FBQ2tCLE1BQU0sQ0FBQ08seUJBQXlCO2dCQUN2RUMsc0JBQXNCO1lBQzFCO1lBQ0FQLGVBQWU7Z0JBQ1hRLGdCQUFnQi9DLE9BQU8rQyxjQUFjO2dCQUNyQ0MsbUJBQW1CaEQsT0FBT2dELGlCQUFpQjtnQkFDM0NDLFVBQVVqRCxPQUFPaUQsUUFBUTtnQkFDekJwRCxlQUFlLElBQUksQ0FBQ0EsYUFBYTtZQUNyQztZQUNBcUQsY0FBYztnQkFDVkMsMkJBQTJCLElBQUksQ0FBQy9CLE1BQU0sQ0FBQ2dDLEtBQUssQ0FBQ0QseUJBQXlCO1lBQzFFO1lBQ0FFLGlCQUFpQixJQUFJLENBQUNDLGFBQWE7WUFDbkNDLGtCQUFrQixJQUFJLENBQUNDLGFBQWE7WUFDcENDLGtCQUFrQixJQUFJLENBQUNDLGNBQWM7WUFDckMzQix3QkFBd0JBO1lBQ3hCNEIsYUFBYTtnQkFDVEMsS0FBSzNFLHlFQUFnQkEsQ0FBQzRFLFFBQVE7Z0JBQzlCM0UsU0FBU0EsMERBQU9BO2dCQUNoQjRFLEtBQUtsRixpRUFBU0EsQ0FBQ3dCLFlBQVk7Z0JBQzNCMkQsSUFBSW5GLGlFQUFTQSxDQUFDd0IsWUFBWTtZQUM5QjtZQUNBNEQsV0FBVyxJQUFJLENBQUM1QyxNQUFNLENBQUM0QyxTQUFTO1FBQ3BDO0lBQ0o7SUFDQTs7OztLQUlDLEdBQ0QsTUFBTUMsK0JBQStCeEUsT0FBTyxFQUFFeUUsZUFBZSxFQUFFO1FBQzNELElBQUksQ0FBQ3hFLGlCQUFpQixDQUFDQyxtQkFBbUIsQ0FBQ2pCLHlFQUFpQkEsQ0FBQ3lGLHVEQUF1RCxFQUFFLElBQUksQ0FBQ3RFLGFBQWE7UUFDeEksTUFBTUssY0FBYyxJQUFJLENBQUNrRSxjQUFjLENBQUMzRSxRQUFRUyxXQUFXO1FBQzNELE1BQU1tRSxlQUFlO1lBQ2pCSCxpQkFBaUJBO1FBQ3JCO1FBQ0EsTUFBTUksUUFBUXZGLHNFQUFhQSxDQUFDd0YsZUFBZSxDQUFDLElBQUksQ0FBQ2pCLGFBQWEsRUFBRSxXQUFZN0QsUUFBUTZFLEtBQUssSUFBSzFGLGlFQUFTQSxDQUFDd0IsWUFBWSxFQUFFaUU7UUFDdEgsTUFBTUcsY0FBYyxNQUFNN0YsdUVBQVdBLENBQUNXLCtFQUFxQkEsRUFBRVoseUVBQWlCQSxDQUFDK0YscUJBQXFCLEVBQUUsSUFBSSxDQUFDekUsTUFBTSxFQUFFLElBQUksQ0FBQ04saUJBQWlCLEVBQUUsSUFBSSxDQUFDRyxhQUFhLEVBQUU7WUFBRSxHQUFHSixPQUFPO1lBQUVJLGVBQWUsSUFBSSxDQUFDQSxhQUFhO1FBQUMsR0FBRyxJQUFJLENBQUN1QixNQUFNLEVBQUUsSUFBSSxDQUFDMUIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDTSxNQUFNO1FBQ2xRLE1BQU0wRSxtQkFBbUI7WUFDckIsR0FBR0YsV0FBVztZQUNkdEUsYUFBYUE7WUFDYm9FLE9BQU9BO1lBQ1BLLE9BQU9sRixRQUFRa0YsS0FBSyxJQUFJdEYsd0VBQWFBO1lBQ3JDdUYsY0FBYyxJQUFJLENBQUN4RCxNQUFNLENBQUNDLElBQUksQ0FBQ3dELFdBQVcsQ0FDckNDLGtCQUFrQjtRQUMzQjtRQUNBLHVFQUF1RTtRQUN2RSxJQUFJckYsUUFBUXNGLFNBQVMsSUFBSXRGLFFBQVF1RixHQUFHLEVBQUU7WUFDbEMsT0FBT047UUFDWDtRQUNBLE1BQU0xRCxVQUFVdkIsUUFBUXVCLE9BQU8sSUFBSSxJQUFJLENBQUMwQyxjQUFjLENBQUN1QixnQkFBZ0I7UUFDdkUsSUFBSWpFLFNBQVM7WUFDVCxJQUFJLENBQUNoQixNQUFNLENBQUNhLE9BQU8sQ0FBQyxxQ0FBcUMsSUFBSSxDQUFDaEIsYUFBYTtZQUMzRSxJQUFJLENBQUNHLE1BQU0sQ0FBQ2tGLFVBQVUsQ0FBQyxDQUFDLG1DQUFtQyxFQUFFbEUsUUFBUW1FLGFBQWEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDdEYsYUFBYTtZQUN4RzZFLGlCQUFpQjFELE9BQU8sR0FBR0E7UUFDL0I7UUFDQSw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDMEQsaUJBQWlCSyxTQUFTLElBQUksQ0FBQy9ELFNBQVM7WUFDekMsTUFBTW9FLGtCQUFrQixJQUFJLENBQUMxQixjQUFjLENBQUMyQixrQkFBa0I7WUFDOUQsSUFBSUQsaUJBQWlCO2dCQUNqQlYsaUJBQWlCSyxTQUFTLEdBQUdLO1lBQ2pDO1FBQ0o7UUFDQSxPQUFPVjtJQUNYO0FBQ0o7QUFFcUMsQ0FDckMsc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9pbnRlcmFjdGlvbl9jbGllbnQvU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudC5tanM/MmI5YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IFBlcmZvcm1hbmNlRXZlbnRzLCBpbnZva2VBc3luYywgQ29uc3RhbnRzLCBVcmxTdHJpbmcsIEF1dGhvcml6YXRpb25Db2RlQ2xpZW50LCBQcm90b2NvbFV0aWxzIH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL2Jyb3dzZXInO1xuaW1wb3J0IHsgQmFzZUludGVyYWN0aW9uQ2xpZW50IH0gZnJvbSAnLi9CYXNlSW50ZXJhY3Rpb25DbGllbnQubWpzJztcbmltcG9ydCB7IEJyb3dzZXJDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9Ccm93c2VyQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZU1ldGFkYXRhLm1qcyc7XG5pbXBvcnQgeyBnZXRDdXJyZW50VXJpIH0gZnJvbSAnLi4vdXRpbHMvQnJvd3NlclV0aWxzLm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVBrY2VDb2RlcyB9IGZyb20gJy4uL2NyeXB0by9Qa2NlR2VuZXJhdG9yLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVOZXdHdWlkIH0gZnJvbSAnLi4vY3J5cHRvL0Jyb3dzZXJDcnlwdG8ubWpzJztcbmltcG9ydCB7IGluaXRpYWxpemVCYXNlUmVxdWVzdCB9IGZyb20gJy4uL3JlcXVlc3QvUmVxdWVzdEhlbHBlcnMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHRoZSBjbGFzcyBzdHJ1Y3R1cmUgYW5kIGhlbHBlciBmdW5jdGlvbnMgdXNlZCBieSB0aGUgXCJzdGFuZGFyZFwiLCBub24tYnJva2VyZWQgYXV0aCBmbG93cyAocG9wdXAsIHJlZGlyZWN0LCBzaWxlbnQgKFJUKSwgc2lsZW50IChpZnJhbWUpKVxyXG4gKi9cclxuY2xhc3MgU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudCBleHRlbmRzIEJhc2VJbnRlcmFjdGlvbkNsaWVudCB7XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhbiBhdXRoIGNvZGUgcmVxdWVzdCB0aWVkIHRvIHRoZSB1cmwgcmVxdWVzdC5cclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGluaXRpYWxpemVBdXRob3JpemF0aW9uQ29kZVJlcXVlc3QocmVxdWVzdCkge1xyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5TdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50SW5pdGlhbGl6ZUF1dGhvcml6YXRpb25Db2RlUmVxdWVzdCwgdGhpcy5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICBjb25zdCBnZW5lcmF0ZWRQa2NlUGFyYW1zID0gYXdhaXQgaW52b2tlQXN5bmMoZ2VuZXJhdGVQa2NlQ29kZXMsIFBlcmZvcm1hbmNlRXZlbnRzLkdlbmVyYXRlUGtjZUNvZGVzLCB0aGlzLmxvZ2dlciwgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCwgdGhpcy5jb3JyZWxhdGlvbklkKSh0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LCB0aGlzLmxvZ2dlciwgdGhpcy5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICBjb25zdCBhdXRoQ29kZVJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgIC4uLnJlcXVlc3QsXHJcbiAgICAgICAgICAgIHJlZGlyZWN0VXJpOiByZXF1ZXN0LnJlZGlyZWN0VXJpLFxyXG4gICAgICAgICAgICBjb2RlOiBDb25zdGFudHMuRU1QVFlfU1RSSU5HLFxyXG4gICAgICAgICAgICBjb2RlVmVyaWZpZXI6IGdlbmVyYXRlZFBrY2VQYXJhbXMudmVyaWZpZXIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXF1ZXN0LmNvZGVDaGFsbGVuZ2UgPSBnZW5lcmF0ZWRQa2NlUGFyYW1zLmNoYWxsZW5nZTtcclxuICAgICAgICByZXF1ZXN0LmNvZGVDaGFsbGVuZ2VNZXRob2QgPSBDb25zdGFudHMuUzI1Nl9DT0RFX0NIQUxMRU5HRV9NRVRIT0Q7XHJcbiAgICAgICAgcmV0dXJuIGF1dGhDb2RlUmVxdWVzdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6ZXIgZm9yIHRoZSBsb2dvdXQgcmVxdWVzdC5cclxuICAgICAqIEBwYXJhbSBsb2dvdXRSZXF1ZXN0XHJcbiAgICAgKi9cclxuICAgIGluaXRpYWxpemVMb2dvdXRSZXF1ZXN0KGxvZ291dFJlcXVlc3QpIHtcclxuICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiaW5pdGlhbGl6ZUxvZ291dFJlcXVlc3QgY2FsbGVkXCIsIGxvZ291dFJlcXVlc3Q/LmNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIGNvbnN0IHZhbGlkTG9nb3V0UmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgY29ycmVsYXRpb25JZDogdGhpcy5jb3JyZWxhdGlvbklkIHx8IGNyZWF0ZU5ld0d1aWQoKSxcclxuICAgICAgICAgICAgLi4ubG9nb3V0UmVxdWVzdCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldCBsb2dvdXRfaGludCB0byBiZSBsb2dpbl9oaW50IGZyb20gSUQgVG9rZW4gQ2xhaW1zIGlmIHByZXNlbnRcclxuICAgICAgICAgKiBhbmQgbG9nb3V0SGludCBhdHRyaWJ1dGUgd2Fzbid0IG1hbnVhbGx5IHNldCBpbiBsb2dvdXQgcmVxdWVzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChsb2dvdXRSZXF1ZXN0KSB7XHJcbiAgICAgICAgICAgIC8vIElmIGxvZ291dEhpbnQgaXNuJ3Qgc2V0IGFuZCBhbiBhY2NvdW50IHdhcyBwYXNzZWQgaW4sIHRyeSB0byBleHRyYWN0IGxvZ291dEhpbnQgZnJvbSBJRCBUb2tlbiBDbGFpbXNcclxuICAgICAgICAgICAgaWYgKCFsb2dvdXRSZXF1ZXN0LmxvZ291dEhpbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsb2dvdXRSZXF1ZXN0LmFjY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2dvdXRIaW50ID0gdGhpcy5nZXRMb2dvdXRIaW50RnJvbUlkVG9rZW5DbGFpbXMobG9nb3V0UmVxdWVzdC5hY2NvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobG9nb3V0SGludCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiU2V0dGluZyBsb2dvdXRIaW50IHRvIGxvZ2luX2hpbnQgSUQgVG9rZW4gQ2xhaW0gdmFsdWUgZm9yIHRoZSBhY2NvdW50IHByb3ZpZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZExvZ291dFJlcXVlc3QubG9nb3V0SGludCA9IGxvZ291dEhpbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcImxvZ291dEhpbnQgd2FzIG5vdCBzZXQgYW5kIGFjY291bnQgd2FzIG5vdCBwYXNzZWQgaW50byBsb2dvdXQgcmVxdWVzdCwgbG9nb3V0SGludCB3aWxsIG5vdCBiZSBzZXRcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwibG9nb3V0SGludCBoYXMgYWxyZWFkeSBiZWVuIHNldCBpbiBsb2dvdXRSZXF1ZXN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwibG9nb3V0SGludCB3aWxsIG5vdCBiZSBzZXQgc2luY2Ugbm8gbG9nb3V0IHJlcXVlc3Qgd2FzIGNvbmZpZ3VyZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogT25seSBzZXQgcmVkaXJlY3QgdXJpIGlmIGxvZ291dCByZXF1ZXN0IGlzbid0IHByb3ZpZGVkIG9yIHRoZSBzZXQgdXJpIGlzbid0IG51bGwuXHJcbiAgICAgICAgICogT3RoZXJ3aXNlLCB1c2UgcGFzc2VkIHVyaSwgY29uZmlnLCBvciBjdXJyZW50IHBhZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKCFsb2dvdXRSZXF1ZXN0IHx8IGxvZ291dFJlcXVlc3QucG9zdExvZ291dFJlZGlyZWN0VXJpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChsb2dvdXRSZXF1ZXN0ICYmIGxvZ291dFJlcXVlc3QucG9zdExvZ291dFJlZGlyZWN0VXJpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiU2V0dGluZyBwb3N0TG9nb3V0UmVkaXJlY3RVcmkgdG8gdXJpIHNldCBvbiBsb2dvdXQgcmVxdWVzdFwiLCB2YWxpZExvZ291dFJlcXVlc3QuY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgICAgICAgICB2YWxpZExvZ291dFJlcXVlc3QucG9zdExvZ291dFJlZGlyZWN0VXJpID1cclxuICAgICAgICAgICAgICAgICAgICBVcmxTdHJpbmcuZ2V0QWJzb2x1dGVVcmwobG9nb3V0UmVxdWVzdC5wb3N0TG9nb3V0UmVkaXJlY3RVcmksIGdldEN1cnJlbnRVcmkoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb25maWcuYXV0aC5wb3N0TG9nb3V0UmVkaXJlY3RVcmkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJwb3N0TG9nb3V0UmVkaXJlY3RVcmkgY29uZmlndXJlZCBhcyBudWxsIGFuZCBubyB1cmkgc2V0IG9uIHJlcXVlc3QsIG5vdCBwYXNzaW5nIHBvc3QgbG9nb3V0IHJlZGlyZWN0XCIsIHZhbGlkTG9nb3V0UmVxdWVzdC5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNvbmZpZy5hdXRoLnBvc3RMb2dvdXRSZWRpcmVjdFVyaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlNldHRpbmcgcG9zdExvZ291dFJlZGlyZWN0VXJpIHRvIGNvbmZpZ3VyZWQgdXJpXCIsIHZhbGlkTG9nb3V0UmVxdWVzdC5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICAgICAgICAgIHZhbGlkTG9nb3V0UmVxdWVzdC5wb3N0TG9nb3V0UmVkaXJlY3RVcmkgPVxyXG4gICAgICAgICAgICAgICAgICAgIFVybFN0cmluZy5nZXRBYnNvbHV0ZVVybCh0aGlzLmNvbmZpZy5hdXRoLnBvc3RMb2dvdXRSZWRpcmVjdFVyaSwgZ2V0Q3VycmVudFVyaSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJTZXR0aW5nIHBvc3RMb2dvdXRSZWRpcmVjdFVyaSB0byBjdXJyZW50IHBhZ2VcIiwgdmFsaWRMb2dvdXRSZXF1ZXN0LmNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgdmFsaWRMb2dvdXRSZXF1ZXN0LnBvc3RMb2dvdXRSZWRpcmVjdFVyaSA9XHJcbiAgICAgICAgICAgICAgICAgICAgVXJsU3RyaW5nLmdldEFic29sdXRlVXJsKGdldEN1cnJlbnRVcmkoKSwgZ2V0Q3VycmVudFVyaSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcInBvc3RMb2dvdXRSZWRpcmVjdFVyaSBwYXNzZWQgYXMgbnVsbCwgbm90IHNldHRpbmcgcG9zdCBsb2dvdXQgcmVkaXJlY3QgdXJpXCIsIHZhbGlkTG9nb3V0UmVxdWVzdC5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkTG9nb3V0UmVxdWVzdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIGxvZ2luX2hpbnQgSUQgVG9rZW4gQ2xhaW0gb3V0IG9mIEFjY291bnRJbmZvIG9iamVjdCB0byBiZSB1c2VkIGFzXHJcbiAgICAgKiBsb2dvdXRfaGludCBpbiBlbmQgc2Vzc2lvbiByZXF1ZXN0LlxyXG4gICAgICogQHBhcmFtIGFjY291bnRcclxuICAgICAqL1xyXG4gICAgZ2V0TG9nb3V0SGludEZyb21JZFRva2VuQ2xhaW1zKGFjY291bnQpIHtcclxuICAgICAgICBjb25zdCBpZFRva2VuQ2xhaW1zID0gYWNjb3VudC5pZFRva2VuQ2xhaW1zO1xyXG4gICAgICAgIGlmIChpZFRva2VuQ2xhaW1zKSB7XHJcbiAgICAgICAgICAgIGlmIChpZFRva2VuQ2xhaW1zLmxvZ2luX2hpbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpZFRva2VuQ2xhaW1zLmxvZ2luX2hpbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci52ZXJib3NlKFwiVGhlIElEIFRva2VuIENsYWltcyB0aWVkIHRvIHRoZSBwcm92aWRlZCBhY2NvdW50IGRvIG5vdCBjb250YWluIGEgbG9naW5faGludCBjbGFpbSwgbG9nb3V0SGludCB3aWxsIG5vdCBiZSBhZGRlZCB0byBsb2dvdXQgcmVxdWVzdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZShcIlRoZSBwcm92aWRlZCBhY2NvdW50IGRvZXMgbm90IGNvbnRhaW4gSUQgVG9rZW4gQ2xhaW1zLCBsb2dvdXRIaW50IHdpbGwgbm90IGJlIGFkZGVkIHRvIGxvZ291dCByZXF1ZXN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBBdXRob3JpemF0aW9uIENvZGUgQ2xpZW50IHdpdGggdGhlIGdpdmVuIGF1dGhvcml0eSwgb3IgdGhlIGRlZmF1bHQgYXV0aG9yaXR5LlxyXG4gICAgICogQHBhcmFtIHBhcmFtcyB7XHJcbiAgICAgKiAgICAgICAgIHNlcnZlclRlbGVtZXRyeU1hbmFnZXI6IFNlcnZlclRlbGVtZXRyeU1hbmFnZXI7XHJcbiAgICAgKiAgICAgICAgIGF1dGhvcml0eVVybD86IHN0cmluZztcclxuICAgICAqICAgICAgICAgcmVxdWVzdEF6dXJlQ2xvdWRPcHRpb25zPzogQXp1cmVDbG91ZE9wdGlvbnM7XHJcbiAgICAgKiAgICAgICAgIHJlcXVlc3RFeHRyYVF1ZXJ5UGFyYW1ldGVycz86IFN0cmluZ0RpY3Q7XHJcbiAgICAgKiAgICAgICAgIGFjY291bnQ/OiBBY2NvdW50SW5mbztcclxuICAgICAqICAgICAgICB9XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGNyZWF0ZUF1dGhDb2RlQ2xpZW50KHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5TdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50Q3JlYXRlQXV0aENvZGVDbGllbnQsIHRoaXMuY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGF1dGggbW9kdWxlLlxyXG4gICAgICAgIGNvbnN0IGNsaWVudENvbmZpZyA9IGF3YWl0IGludm9rZUFzeW5jKHRoaXMuZ2V0Q2xpZW50Q29uZmlndXJhdGlvbi5iaW5kKHRoaXMpLCBQZXJmb3JtYW5jZUV2ZW50cy5TdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50R2V0Q2xpZW50Q29uZmlndXJhdGlvbiwgdGhpcy5sb2dnZXIsIHRoaXMucGVyZm9ybWFuY2VDbGllbnQsIHRoaXMuY29ycmVsYXRpb25JZCkocGFyYW1zKTtcclxuICAgICAgICByZXR1cm4gbmV3IEF1dGhvcml6YXRpb25Db2RlQ2xpZW50KGNsaWVudENvbmZpZywgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBDbGllbnQgQ29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gcmVxdWVzdCBhdXRob3JpdHksIG9yIHRoZSBkZWZhdWx0IGF1dGhvcml0eS5cclxuICAgICAqIEBwYXJhbSBwYXJhbXMge1xyXG4gICAgICogICAgICAgICBzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyOiBTZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyO1xyXG4gICAgICogICAgICAgICByZXF1ZXN0QXV0aG9yaXR5Pzogc3RyaW5nO1xyXG4gICAgICogICAgICAgICByZXF1ZXN0QXp1cmVDbG91ZE9wdGlvbnM/OiBBenVyZUNsb3VkT3B0aW9ucztcclxuICAgICAqICAgICAgICAgcmVxdWVzdEV4dHJhUXVlcnlQYXJhbWV0ZXJzPzogYm9vbGVhbjtcclxuICAgICAqICAgICAgICAgYWNjb3VudD86IEFjY291bnRJbmZvO1xyXG4gICAgICogICAgICAgIH1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0Q2xpZW50Q29uZmlndXJhdGlvbihwYXJhbXMpIHtcclxuICAgICAgICBjb25zdCB7IHNlcnZlclRlbGVtZXRyeU1hbmFnZXIsIHJlcXVlc3RBdXRob3JpdHksIHJlcXVlc3RBenVyZUNsb3VkT3B0aW9ucywgcmVxdWVzdEV4dHJhUXVlcnlQYXJhbWV0ZXJzLCBhY2NvdW50LCB9ID0gcGFyYW1zO1xyXG4gICAgICAgIHRoaXMucGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5TdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50R2V0Q2xpZW50Q29uZmlndXJhdGlvbiwgdGhpcy5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICBjb25zdCBkaXNjb3ZlcmVkQXV0aG9yaXR5ID0gYXdhaXQgaW52b2tlQXN5bmModGhpcy5nZXREaXNjb3ZlcmVkQXV0aG9yaXR5LmJpbmQodGhpcyksIFBlcmZvcm1hbmNlRXZlbnRzLlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXREaXNjb3ZlcmVkQXV0aG9yaXR5LCB0aGlzLmxvZ2dlciwgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCwgdGhpcy5jb3JyZWxhdGlvbklkKSh7XHJcbiAgICAgICAgICAgIHJlcXVlc3RBdXRob3JpdHksXHJcbiAgICAgICAgICAgIHJlcXVlc3RBenVyZUNsb3VkT3B0aW9ucyxcclxuICAgICAgICAgICAgcmVxdWVzdEV4dHJhUXVlcnlQYXJhbWV0ZXJzLFxyXG4gICAgICAgICAgICBhY2NvdW50LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGxvZ2dlciA9IHRoaXMuY29uZmlnLnN5c3RlbS5sb2dnZXJPcHRpb25zO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGF1dGhPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnRJZDogdGhpcy5jb25maWcuYXV0aC5jbGllbnRJZCxcclxuICAgICAgICAgICAgICAgIGF1dGhvcml0eTogZGlzY292ZXJlZEF1dGhvcml0eSxcclxuICAgICAgICAgICAgICAgIGNsaWVudENhcGFiaWxpdGllczogdGhpcy5jb25maWcuYXV0aC5jbGllbnRDYXBhYmlsaXRpZXMsXHJcbiAgICAgICAgICAgICAgICByZWRpcmVjdFVyaTogdGhpcy5jb25maWcuYXV0aC5yZWRpcmVjdFVyaSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3lzdGVtT3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgdG9rZW5SZW5ld2FsT2Zmc2V0U2Vjb25kczogdGhpcy5jb25maWcuc3lzdGVtLnRva2VuUmVuZXdhbE9mZnNldFNlY29uZHMsXHJcbiAgICAgICAgICAgICAgICBwcmV2ZW50Q29yc1ByZWZsaWdodDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9nZ2VyT3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyQ2FsbGJhY2s6IGxvZ2dlci5sb2dnZXJDYWxsYmFjayxcclxuICAgICAgICAgICAgICAgIHBpaUxvZ2dpbmdFbmFibGVkOiBsb2dnZXIucGlpTG9nZ2luZ0VuYWJsZWQsXHJcbiAgICAgICAgICAgICAgICBsb2dMZXZlbDogbG9nZ2VyLmxvZ0xldmVsLFxyXG4gICAgICAgICAgICAgICAgY29ycmVsYXRpb25JZDogdGhpcy5jb3JyZWxhdGlvbklkLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjYWNoZU9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGNsYWltc0Jhc2VkQ2FjaGluZ0VuYWJsZWQ6IHRoaXMuY29uZmlnLmNhY2hlLmNsYWltc0Jhc2VkQ2FjaGluZ0VuYWJsZWQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNyeXB0b0ludGVyZmFjZTogdGhpcy5icm93c2VyQ3J5cHRvLFxyXG4gICAgICAgICAgICBuZXR3b3JrSW50ZXJmYWNlOiB0aGlzLm5ldHdvcmtDbGllbnQsXHJcbiAgICAgICAgICAgIHN0b3JhZ2VJbnRlcmZhY2U6IHRoaXMuYnJvd3NlclN0b3JhZ2UsXHJcbiAgICAgICAgICAgIHNlcnZlclRlbGVtZXRyeU1hbmFnZXI6IHNlcnZlclRlbGVtZXRyeU1hbmFnZXIsXHJcbiAgICAgICAgICAgIGxpYnJhcnlJbmZvOiB7XHJcbiAgICAgICAgICAgICAgICBza3U6IEJyb3dzZXJDb25zdGFudHMuTVNBTF9TS1UsXHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgY3B1OiBDb25zdGFudHMuRU1QVFlfU1RSSU5HLFxyXG4gICAgICAgICAgICAgICAgb3M6IENvbnN0YW50cy5FTVBUWV9TVFJJTkcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRlbGVtZXRyeTogdGhpcy5jb25maWcudGVsZW1ldHJ5LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhlbHBlciB0byBpbml0aWFsaXplIHJlcXVpcmVkIHJlcXVlc3QgcGFyYW1ldGVycyBmb3IgaW50ZXJhY3RpdmUgQVBJcyBhbmQgc3NvU2lsZW50KClcclxuICAgICAqIEBwYXJhbSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gaW50ZXJhY3Rpb25UeXBlXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGluaXRpYWxpemVBdXRob3JpemF0aW9uUmVxdWVzdChyZXF1ZXN0LCBpbnRlcmFjdGlvblR5cGUpIHtcclxuICAgICAgICB0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LmFkZFF1ZXVlTWVhc3VyZW1lbnQoUGVyZm9ybWFuY2VFdmVudHMuU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudEluaXRpYWxpemVBdXRob3JpemF0aW9uUmVxdWVzdCwgdGhpcy5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICBjb25zdCByZWRpcmVjdFVyaSA9IHRoaXMuZ2V0UmVkaXJlY3RVcmkocmVxdWVzdC5yZWRpcmVjdFVyaSk7XHJcbiAgICAgICAgY29uc3QgYnJvd3NlclN0YXRlID0ge1xyXG4gICAgICAgICAgICBpbnRlcmFjdGlvblR5cGU6IGludGVyYWN0aW9uVHlwZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gUHJvdG9jb2xVdGlscy5zZXRSZXF1ZXN0U3RhdGUodGhpcy5icm93c2VyQ3J5cHRvLCAocmVxdWVzdCAmJiByZXF1ZXN0LnN0YXRlKSB8fCBDb25zdGFudHMuRU1QVFlfU1RSSU5HLCBicm93c2VyU3RhdGUpO1xyXG4gICAgICAgIGNvbnN0IGJhc2VSZXF1ZXN0ID0gYXdhaXQgaW52b2tlQXN5bmMoaW5pdGlhbGl6ZUJhc2VSZXF1ZXN0LCBQZXJmb3JtYW5jZUV2ZW50cy5Jbml0aWFsaXplQmFzZVJlcXVlc3QsIHRoaXMubG9nZ2VyLCB0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LCB0aGlzLmNvcnJlbGF0aW9uSWQpKHsgLi4ucmVxdWVzdCwgY29ycmVsYXRpb25JZDogdGhpcy5jb3JyZWxhdGlvbklkIH0sIHRoaXMuY29uZmlnLCB0aGlzLnBlcmZvcm1hbmNlQ2xpZW50LCB0aGlzLmxvZ2dlcik7XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkUmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgLi4uYmFzZVJlcXVlc3QsXHJcbiAgICAgICAgICAgIHJlZGlyZWN0VXJpOiByZWRpcmVjdFVyaSxcclxuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxyXG4gICAgICAgICAgICBub25jZTogcmVxdWVzdC5ub25jZSB8fCBjcmVhdGVOZXdHdWlkKCksXHJcbiAgICAgICAgICAgIHJlc3BvbnNlTW9kZTogdGhpcy5jb25maWcuYXV0aC5PSURDT3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgLnNlcnZlclJlc3BvbnNlVHlwZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFNraXAgYWN0aXZlIGFjY291bnQgbG9va3VwIGlmIGVpdGhlciBsb2dpbiBoaW50IG9yIHNlc3Npb24gaWQgaXMgc2V0XHJcbiAgICAgICAgaWYgKHJlcXVlc3QubG9naW5IaW50IHx8IHJlcXVlc3Quc2lkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZWRSZXF1ZXN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhY2NvdW50ID0gcmVxdWVzdC5hY2NvdW50IHx8IHRoaXMuYnJvd3NlclN0b3JhZ2UuZ2V0QWN0aXZlQWNjb3VudCgpO1xyXG4gICAgICAgIGlmIChhY2NvdW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLnZlcmJvc2UoXCJTZXR0aW5nIHZhbGlkYXRlZCByZXF1ZXN0IGFjY291bnRcIiwgdGhpcy5jb3JyZWxhdGlvbklkKTtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIudmVyYm9zZVBpaShgU2V0dGluZyB2YWxpZGF0ZWQgcmVxdWVzdCBhY2NvdW50OiAke2FjY291bnQuaG9tZUFjY291bnRJZH1gLCB0aGlzLmNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LmFjY291bnQgPSBhY2NvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDaGVjayBmb3IgQURBTC9NU0FMIHYxIFNTT1xyXG4gICAgICAgIGlmICghdmFsaWRhdGVkUmVxdWVzdC5sb2dpbkhpbnQgJiYgIWFjY291bnQpIHtcclxuICAgICAgICAgICAgY29uc3QgbGVnYWN5TG9naW5IaW50ID0gdGhpcy5icm93c2VyU3RvcmFnZS5nZXRMZWdhY3lMb2dpbkhpbnQoKTtcclxuICAgICAgICAgICAgaWYgKGxlZ2FjeUxvZ2luSGludCkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVkUmVxdWVzdC5sb2dpbkhpbnQgPSBsZWdhY3lMb2dpbkhpbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZFJlcXVlc3Q7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudC5tanMubWFwXG4iXSwibmFtZXMiOlsiUGVyZm9ybWFuY2VFdmVudHMiLCJpbnZva2VBc3luYyIsIkNvbnN0YW50cyIsIlVybFN0cmluZyIsIkF1dGhvcml6YXRpb25Db2RlQ2xpZW50IiwiUHJvdG9jb2xVdGlscyIsIkJhc2VJbnRlcmFjdGlvbkNsaWVudCIsIkJyb3dzZXJDb25zdGFudHMiLCJ2ZXJzaW9uIiwiZ2V0Q3VycmVudFVyaSIsImdlbmVyYXRlUGtjZUNvZGVzIiwiY3JlYXRlTmV3R3VpZCIsImluaXRpYWxpemVCYXNlUmVxdWVzdCIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnQiLCJpbml0aWFsaXplQXV0aG9yaXphdGlvbkNvZGVSZXF1ZXN0IiwicmVxdWVzdCIsInBlcmZvcm1hbmNlQ2xpZW50IiwiYWRkUXVldWVNZWFzdXJlbWVudCIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRJbml0aWFsaXplQXV0aG9yaXphdGlvbkNvZGVSZXF1ZXN0IiwiY29ycmVsYXRpb25JZCIsImdlbmVyYXRlZFBrY2VQYXJhbXMiLCJHZW5lcmF0ZVBrY2VDb2RlcyIsImxvZ2dlciIsImF1dGhDb2RlUmVxdWVzdCIsInJlZGlyZWN0VXJpIiwiY29kZSIsIkVNUFRZX1NUUklORyIsImNvZGVWZXJpZmllciIsInZlcmlmaWVyIiwiY29kZUNoYWxsZW5nZSIsImNoYWxsZW5nZSIsImNvZGVDaGFsbGVuZ2VNZXRob2QiLCJTMjU2X0NPREVfQ0hBTExFTkdFX01FVEhPRCIsImluaXRpYWxpemVMb2dvdXRSZXF1ZXN0IiwibG9nb3V0UmVxdWVzdCIsInZlcmJvc2UiLCJ2YWxpZExvZ291dFJlcXVlc3QiLCJsb2dvdXRIaW50IiwiYWNjb3VudCIsImdldExvZ291dEhpbnRGcm9tSWRUb2tlbkNsYWltcyIsInBvc3RMb2dvdXRSZWRpcmVjdFVyaSIsImdldEFic29sdXRlVXJsIiwiY29uZmlnIiwiYXV0aCIsImlkVG9rZW5DbGFpbXMiLCJsb2dpbl9oaW50IiwiY3JlYXRlQXV0aENvZGVDbGllbnQiLCJwYXJhbXMiLCJTdGFuZGFyZEludGVyYWN0aW9uQ2xpZW50Q3JlYXRlQXV0aENvZGVDbGllbnQiLCJjbGllbnRDb25maWciLCJnZXRDbGllbnRDb25maWd1cmF0aW9uIiwiYmluZCIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXRDbGllbnRDb25maWd1cmF0aW9uIiwic2VydmVyVGVsZW1ldHJ5TWFuYWdlciIsInJlcXVlc3RBdXRob3JpdHkiLCJyZXF1ZXN0QXp1cmVDbG91ZE9wdGlvbnMiLCJyZXF1ZXN0RXh0cmFRdWVyeVBhcmFtZXRlcnMiLCJkaXNjb3ZlcmVkQXV0aG9yaXR5IiwiZ2V0RGlzY292ZXJlZEF1dGhvcml0eSIsIlN0YW5kYXJkSW50ZXJhY3Rpb25DbGllbnRHZXREaXNjb3ZlcmVkQXV0aG9yaXR5Iiwic3lzdGVtIiwibG9nZ2VyT3B0aW9ucyIsImF1dGhPcHRpb25zIiwiY2xpZW50SWQiLCJhdXRob3JpdHkiLCJjbGllbnRDYXBhYmlsaXRpZXMiLCJzeXN0ZW1PcHRpb25zIiwidG9rZW5SZW5ld2FsT2Zmc2V0U2Vjb25kcyIsInByZXZlbnRDb3JzUHJlZmxpZ2h0IiwibG9nZ2VyQ2FsbGJhY2siLCJwaWlMb2dnaW5nRW5hYmxlZCIsImxvZ0xldmVsIiwiY2FjaGVPcHRpb25zIiwiY2xhaW1zQmFzZWRDYWNoaW5nRW5hYmxlZCIsImNhY2hlIiwiY3J5cHRvSW50ZXJmYWNlIiwiYnJvd3NlckNyeXB0byIsIm5ldHdvcmtJbnRlcmZhY2UiLCJuZXR3b3JrQ2xpZW50Iiwic3RvcmFnZUludGVyZmFjZSIsImJyb3dzZXJTdG9yYWdlIiwibGlicmFyeUluZm8iLCJza3UiLCJNU0FMX1NLVSIsImNwdSIsIm9zIiwidGVsZW1ldHJ5IiwiaW5pdGlhbGl6ZUF1dGhvcml6YXRpb25SZXF1ZXN0IiwiaW50ZXJhY3Rpb25UeXBlIiwiU3RhbmRhcmRJbnRlcmFjdGlvbkNsaWVudEluaXRpYWxpemVBdXRob3JpemF0aW9uUmVxdWVzdCIsImdldFJlZGlyZWN0VXJpIiwiYnJvd3NlclN0YXRlIiwic3RhdGUiLCJzZXRSZXF1ZXN0U3RhdGUiLCJiYXNlUmVxdWVzdCIsIkluaXRpYWxpemVCYXNlUmVxdWVzdCIsInZhbGlkYXRlZFJlcXVlc3QiLCJub25jZSIsInJlc3BvbnNlTW9kZSIsIk9JRENPcHRpb25zIiwic2VydmVyUmVzcG9uc2VUeXBlIiwibG9naW5IaW50Iiwic2lkIiwiZ2V0QWN0aXZlQWNjb3VudCIsInZlcmJvc2VQaWkiLCJob21lQWNjb3VudElkIiwibGVnYWN5TG9naW5IaW50IiwiZ2V0TGVnYWN5TG9naW5IaW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_client/StandardInteractionClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractionHandler: () => (/* binding */ InteractionHandler)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */ class InteractionHandler {\n    constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient){\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */ async handleCodeResponse(response, request) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.HandleCodeResponse, request.correlationId);\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(response, request.state);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.ServerError && e.subError === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled);\n            } else {\n                throw e;\n            }\n        }\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.invokeAsync)(this.handleCodeResponseFromServer.bind(this), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.HandleCodeResponseFromServer, this.logger, this.performanceClient, request.correlationId)(authCodeResponse, request);\n    }\n    /**\r\n     * Process auth code response from AAD\r\n     * @param authCodeResponse\r\n     * @param state\r\n     * @param authority\r\n     * @param networkModule\r\n     * @returns\r\n     */ async handleCodeResponseFromServer(authCodeResponse, request, validateNonce = true) {\n        this.performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.HandleCodeResponseFromServer, request.correlationId);\n        this.logger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.invokeAsync)(this.authModule.updateAuthority.bind(this.authModule), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.UpdateTokenEndpointAuthority, this.logger, this.performanceClient, request.correlationId)(authCodeResponse.cloud_instance_host_name, request.correlationId);\n        }\n        // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n        if (validateNonce) {\n            // TODO: Assigning \"response nonce\" to \"request nonce\" is confusing. Refactor the function doing validation to accept request nonce directly\n            authCodeResponse.nonce = request.nonce || undefined;\n        }\n        authCodeResponse.state = request.state;\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const ccsCred = this.createCcsCredentials(request);\n            if (ccsCred) {\n                this.authCodeRequest.ccsCredential = ccsCred;\n            }\n        }\n        // Acquire token with retrieved code.\n        const tokenResponse = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.invokeAsync)(this.authModule.acquireToken.bind(this.authModule), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(this.authCodeRequest, authCodeResponse);\n        return tokenResponse;\n    }\n    /**\r\n     * Build ccs creds if available\r\n     */ createCcsCredentials(request) {\n        if (request.account) {\n            return {\n                credential: request.account.homeAccountId,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CcsCredentialType.HOME_ACCOUNT_ID\n            };\n        } else if (request.loginHint) {\n            return {\n                credential: request.loginHint,\n                type: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.CcsCredentialType.UPN\n            };\n        }\n        return null;\n    }\n}\n //# sourceMappingURL=InteractionHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/InteractionHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedirectHandler: () => (/* binding */ RedirectHandler)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class RedirectHandler {\n    constructor(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient){\n        this.authModule = authCodeModule;\n        this.browserStorage = storageImpl;\n        this.authCodeRequest = authCodeRequest;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Redirects window to given URL.\r\n     * @param urlNavigate\r\n     */ async initiateAuthRequest(requestUrl, params) {\n        this.logger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n        // Navigate if valid URL\n        if (requestUrl) {\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n                this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest);\n            this.logger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\n            const navigationOptions = {\n                apiId: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.ApiId.acquireTokenRedirect,\n                timeout: params.redirectTimeout,\n                noHistory: false\n            };\n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\n            if (typeof params.onRedirectNavigate === \"function\") {\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n                const navigate = params.onRedirectNavigate(requestUrl);\n                // Returning false from onRedirectNavigate will stop navigation\n                if (navigate !== false) {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                    return;\n                } else {\n                    this.logger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n                    return;\n                }\n            } else {\n                // Navigate window to request URL\n                this.logger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\n                return;\n            }\n        } else {\n            // Throw error if request URL is empty.\n            this.logger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.emptyNavigateUri);\n        }\n    }\n    /**\r\n     * Handle authorization code response in the window.\r\n     * @param hash\r\n     */ async handleCodeResponse(response, state) {\n        this.logger.verbose(\"RedirectHandler.handleCodeResponse called\");\n        // Interaction is completed - remove interaction status.\n        this.browserStorage.setInteractionInProgress(false);\n        // Handle code response.\n        const stateKey = this.browserStorage.generateStateKey(state);\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\n        if (!requestState) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.stateNotFound, \"Cached State\");\n        }\n        let authCodeResponse;\n        try {\n            authCodeResponse = this.authModule.handleFragmentResponse(response, requestState);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.ServerError && e.subError === _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled) {\n                // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n                throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.userCancelled);\n            } else {\n                throw e;\n            }\n        }\n        // Get cached items\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n        // Assign code to request\n        this.authCodeRequest.code = authCodeResponse.code;\n        // Check for new cloud instance\n        if (authCodeResponse.cloud_instance_host_name) {\n            await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.invokeAsync)(this.authModule.updateAuthority.bind(this.authModule), _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.UpdateTokenEndpointAuthority, this.logger, this.performanceClient, this.authCodeRequest.correlationId)(authCodeResponse.cloud_instance_host_name, this.authCodeRequest.correlationId);\n        }\n        authCodeResponse.nonce = cachedNonce || undefined;\n        authCodeResponse.state = requestState;\n        // Add CCS parameters if available\n        if (authCodeResponse.client_info) {\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n        } else {\n            const cachedCcsCred = this.checkCcsCredentials();\n            if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n            }\n        }\n        // Acquire token with retrieved code.\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\n        this.browserStorage.cleanRequestByState(state);\n        return tokenResponse;\n    }\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */ checkCcsCredentials() {\n        // Look up ccs credential in temp cache\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.TemporaryCacheKeys.CCS_CREDENTIAL, true);\n        if (cachedCcsCred) {\n            try {\n                return JSON.parse(cachedCcsCred);\n            } catch (e) {\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\n            }\n        }\n        return null;\n    }\n}\n //# sourceMappingURL=RedirectHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/RedirectHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initiateAuthRequest: () => (/* binding */ initiateAuthRequest),\n/* harmony export */   monitorIframeForHash: () => (/* binding */ monitorIframeForHash)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/Configuration.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Creates a hidden iframe to given URL using user-requested scopes as an id.\r\n * @param urlNavigate\r\n * @param userRequestScopes\r\n */ async function initiateAuthRequest(requestUrl, performanceClient, logger, correlationId, navigateFrameWait) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerInitiateAuthRequest, correlationId);\n    if (!requestUrl) {\n        // Throw error if request URL is empty.\n        logger.info(\"Navigate url is empty\");\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.emptyNavigateUri);\n    }\n    if (navigateFrameWait) {\n        return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(loadFrame, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerLoadFrame, logger, performanceClient, correlationId)(requestUrl, navigateFrameWait, performanceClient, correlationId);\n    }\n    return (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(loadFrameSync, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerLoadFrameSync, logger, performanceClient, correlationId)(requestUrl);\n}\n/**\r\n * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.\r\n * @param iframe\r\n * @param timeout\r\n */ async function monitorIframeForHash(iframe, timeout, pollIntervalMilliseconds, performanceClient, logger, correlationId, responseType) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerMonitorIframeForHash, correlationId);\n    return new Promise((resolve, reject)=>{\n        if (timeout < _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_IFRAME_TIMEOUT_MS) {\n            logger.warning(`system.loadFrameTimeout or system.iframeHashTimeout set to lower (${timeout}ms) than the default (${_config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_IFRAME_TIMEOUT_MS}ms). This may result in timeouts.`);\n        }\n        /*\r\n         * Polling for iframes can be purely timing based,\r\n         * since we don't need to account for interaction.\r\n         */ const timeoutId = window.setTimeout(()=>{\n            window.clearInterval(intervalId);\n            reject((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.monitorWindowTimeout));\n        }, timeout);\n        const intervalId = window.setInterval(()=>{\n            let href = \"\";\n            const contentWindow = iframe.contentWindow;\n            try {\n                /*\r\n                 * Will throw if cross origin,\r\n                 * which should be caught and ignored\r\n                 * since we need the interval to keep running while on STS UI.\r\n                 */ href = contentWindow ? contentWindow.location.href : \"\";\n            } catch (e) {}\n            if (!href || href === \"about:blank\") {\n                return;\n            }\n            let responseString = \"\";\n            if (contentWindow) {\n                if (responseType === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.ServerResponseType.QUERY) {\n                    responseString = contentWindow.location.search;\n                } else {\n                    responseString = contentWindow.location.hash;\n                }\n            }\n            window.clearTimeout(timeoutId);\n            window.clearInterval(intervalId);\n            resolve(responseString);\n        }, pollIntervalMilliseconds);\n    }).finally(()=>{\n        (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.invoke)(removeHiddenIframe, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RemoveHiddenIframe, logger, performanceClient, correlationId)(iframe);\n    });\n}\n/**\r\n * @hidden\r\n * Loads iframe with authorization endpoint URL\r\n * @ignore\r\n * @deprecated\r\n */ function loadFrame(urlNavigate, navigateFrameWait, performanceClient, correlationId) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.SilentHandlerLoadFrame, correlationId);\n    /*\r\n     * This trick overcomes iframe navigation in IE\r\n     * IE does not load the page consistently in iframe\r\n     */ return new Promise((resolve, reject)=>{\n        const frameHandle = createHiddenIframe();\n        window.setTimeout(()=>{\n            if (!frameHandle) {\n                reject(\"Unable to load iframe\");\n                return;\n            }\n            frameHandle.src = urlNavigate;\n            resolve(frameHandle);\n        }, navigateFrameWait);\n    });\n}\n/**\r\n * @hidden\r\n * Loads the iframe synchronously when the navigateTimeFrame is set to `0`\r\n * @param urlNavigate\r\n * @param frameName\r\n * @param logger\r\n */ function loadFrameSync(urlNavigate) {\n    const frameHandle = createHiddenIframe();\n    frameHandle.src = urlNavigate;\n    return frameHandle;\n}\n/**\r\n * @hidden\r\n * Creates a new hidden iframe or gets an existing one for silent token renewal.\r\n * @ignore\r\n */ function createHiddenIframe() {\n    const authFrame = document.createElement(\"iframe\");\n    authFrame.className = \"msalSilentIframe\";\n    authFrame.style.visibility = \"hidden\";\n    authFrame.style.position = \"absolute\";\n    authFrame.style.width = authFrame.style.height = \"0\";\n    authFrame.style.border = \"0\";\n    authFrame.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n    document.body.appendChild(authFrame);\n    return authFrame;\n}\n/**\r\n * @hidden\r\n * Removes a hidden iframe from the page.\r\n * @ignore\r\n */ function removeHiddenIframe(iframe) {\n    if (document.body === iframe.parentNode) {\n        document.body.removeChild(iframe);\n    }\n}\n //# sourceMappingURL=SilentHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/interaction_handler/SilentHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBridgeError: () => (/* binding */ isBridgeError)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isBridgeError(error) {\n    return error.status !== undefined;\n}\n //# sourceMappingURL=BridgeError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hYS9CcmlkZ2VFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELFNBQVNBLGNBQWNDLEtBQUs7SUFDeEIsT0FBT0EsTUFBTUMsTUFBTSxLQUFLQztBQUM1QjtBQUV5QixDQUN6Qix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hYS9CcmlkZ2VFcnJvci5tanM/NWJkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0JyaWRnZUVycm9yKGVycm9yKSB7XHJcbiAgICByZXR1cm4gZXJyb3Iuc3RhdHVzICE9PSB1bmRlZmluZWQ7XHJcbn1cblxuZXhwb3J0IHsgaXNCcmlkZ2VFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnJpZGdlRXJyb3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbImlzQnJpZGdlRXJyb3IiLCJlcnJvciIsInN0YXR1cyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BridgeStatusCode: () => (/* binding */ BridgeStatusCode)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const BridgeStatusCode = {\n    UserInteractionRequired: \"USER_INTERACTION_REQUIRED\",\n    UserCancel: \"USER_CANCEL\",\n    NoNetwork: \"NO_NETWORK\",\n    TransientError: \"TRANSIENT_ERROR\",\n    PersistentError: \"PERSISTENT_ERROR\",\n    Disabled: \"DISABLED\",\n    AccountUnavailable: \"ACCOUNT_UNAVAILABLE\",\n    NestedAppAuthUnavailable: \"NESTED_APP_AUTH_UNAVAILABLE\"\n};\n //# sourceMappingURL=BridgeStatusCode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hYS9CcmlkZ2VTdGF0dXNDb2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUEsbUJBQW1CO0lBQ3JCQyx5QkFBeUI7SUFDekJDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxnQkFBZ0I7SUFDaEJDLGlCQUFpQjtJQUNqQkMsVUFBVTtJQUNWQyxvQkFBb0I7SUFDcEJDLDBCQUEwQjtBQUM5QjtBQUU0QixDQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hYS9CcmlkZ2VTdGF0dXNDb2RlLm1qcz8wMGQyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEJyaWRnZVN0YXR1c0NvZGUgPSB7XHJcbiAgICBVc2VySW50ZXJhY3Rpb25SZXF1aXJlZDogXCJVU0VSX0lOVEVSQUNUSU9OX1JFUVVJUkVEXCIsXHJcbiAgICBVc2VyQ2FuY2VsOiBcIlVTRVJfQ0FOQ0VMXCIsXHJcbiAgICBOb05ldHdvcms6IFwiTk9fTkVUV09SS1wiLFxyXG4gICAgVHJhbnNpZW50RXJyb3I6IFwiVFJBTlNJRU5UX0VSUk9SXCIsXHJcbiAgICBQZXJzaXN0ZW50RXJyb3I6IFwiUEVSU0lTVEVOVF9FUlJPUlwiLFxyXG4gICAgRGlzYWJsZWQ6IFwiRElTQUJMRURcIixcclxuICAgIEFjY291bnRVbmF2YWlsYWJsZTogXCJBQ0NPVU5UX1VOQVZBSUxBQkxFXCIsXHJcbiAgICBOZXN0ZWRBcHBBdXRoVW5hdmFpbGFibGU6IFwiTkVTVEVEX0FQUF9BVVRIX1VOQVZBSUxBQkxFXCIsIC8vIE5BQSBpcyB1bmF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBjb250ZXh0LCBjYW4gcmV0cnkgd2l0aCBzdGFuZGFyZCBicm93c2VyIGJhc2VkIGF1dGhcclxufTtcblxuZXhwb3J0IHsgQnJpZGdlU3RhdHVzQ29kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnJpZGdlU3RhdHVzQ29kZS5tanMubWFwXG4iXSwibmFtZXMiOlsiQnJpZGdlU3RhdHVzQ29kZSIsIlVzZXJJbnRlcmFjdGlvblJlcXVpcmVkIiwiVXNlckNhbmNlbCIsIk5vTmV0d29yayIsIlRyYW5zaWVudEVycm9yIiwiUGVyc2lzdGVudEVycm9yIiwiRGlzYWJsZWQiLCJBY2NvdW50VW5hdmFpbGFibGUiLCJOZXN0ZWRBcHBBdXRoVW5hdmFpbGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppAuthAdapter: () => (/* binding */ NestedAppAuthAdapter)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _BridgeError_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../BridgeError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs\");\n/* harmony import */ var _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../BridgeStatusCode.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/naa/BridgeStatusCode.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NestedAppAuthAdapter {\n    constructor(clientId, clientCapabilities, crypto, logger){\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n    toNaaTokenRequest(request) {\n        let extraParams;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map();\n        } else {\n            extraParams = new Map(Object.entries(request.extraQueryParameters));\n        }\n        const correlationId = request.correlationId || this.crypto.createNewGuid();\n        const requestBuilder = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.RequestParameterBuilder(correlationId);\n        const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n        const scopes = request.scopes || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES;\n        const tokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: scopes.join(\" \"),\n            correlationId,\n            claims: !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme: request.authenticationScheme || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER,\n            extraParameters: extraParams\n        };\n        return tokenRequest;\n    }\n    fromNaaTokenResponse(request, response, reqTimestamp) {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nullOrEmptyToken);\n        }\n        const expiresOn = new Date((reqTimestamp + (response.token.expires_in || 0)) * 1000);\n        const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.extractTokenClaims(response.token.id_token, this.crypto.base64Decode);\n        const account = this.fromNaaAccountInfo(response.account, response.token.id_token, idTokenClaims);\n        const scopes = response.token.scope || request.scope;\n        const authenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: false,\n            expiresOn: expiresOn,\n            tokenType: request.authenticationScheme || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state\n        };\n        return authenticationResult;\n    }\n    /*\r\n     *  export type AccountInfo = {\r\n     *     homeAccountId: string;\r\n     *     environment: string;\r\n     *     tenantId: string;\r\n     *     username: string;\r\n     *     localAccountId: string;\r\n     *     name?: string;\r\n     *     idToken?: string;\r\n     *     idTokenClaims?: TokenClaims & {\r\n     *         [key: string]:\r\n     *             | string\r\n     *             | number\r\n     *             | string[]\r\n     *             | object\r\n     *             | undefined\r\n     *             | unknown;\r\n     *     };\r\n     *     nativeAccountId?: string;\r\n     *     authorityType?: string;\r\n     * };\r\n     */ fromNaaAccountInfo(fromAccount, idToken, idTokenClaims) {\n        const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n        const localAccountId = fromAccount.localAccountId || effectiveIdTokenClaims?.oid || effectiveIdTokenClaims?.sub || \"\";\n        const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n        const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n        const username = fromAccount.username || effectiveIdTokenClaims?.preferred_username || \"\";\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n        const tenantProfiles = new Map();\n        const tenantProfile = (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.buildTenantProfile)(homeAccountId, localAccountId, tenantId, effectiveIdTokenClaims);\n        tenantProfiles.set(tenantId, tenantProfile);\n        const account = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n            tenantProfiles\n        };\n        return account;\n    }\n    /**\r\n     *\r\n     * @param error BridgeError\r\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\r\n     */ fromBridgeError(error) {\n        if ((0,_BridgeError_mjs__WEBPACK_IMPORTED_MODULE_7__.isBridgeError)(error)) {\n            switch(error.status){\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.UserCancel:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.userCanceled);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.NoNetwork:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.noNetworkConnectivity);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.AccountUnavailable:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.noAccountFound);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.Disabled:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nestedAppAuthBridgeDisabled);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError(error.code || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nestedAppAuthBridgeDisabled, error.description);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.TransientError:\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.PersistentError:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_9__.ServerError(error.code, error.description);\n                case _BridgeStatusCode_mjs__WEBPACK_IMPORTED_MODULE_8__.BridgeStatusCode.UserInteractionRequired:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError(error.code, error.description);\n                default:\n                    return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.AuthError(error.code, error.description);\n            }\n        } else {\n            return new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_11__.AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n    /**\r\n     * Returns an AuthenticationResult from the given cache items\r\n     *\r\n     * @param account\r\n     * @param idToken\r\n     * @param accessToken\r\n     * @param reqTimestamp\r\n     * @returns\r\n     */ toAuthenticationResultFromCache(account, idToken, accessToken, request, correlationId) {\n        if (!idToken || !accessToken) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.nullOrEmptyToken);\n        }\n        const idTokenClaims = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_5__.extractTokenClaims(idToken.secret, this.crypto.base64Decode);\n        const scopes = accessToken.target || request.scopes.join(\" \");\n        const authenticationResult = {\n            authority: accessToken.environment || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: idToken.secret,\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken.secret,\n            fromCache: true,\n            expiresOn: new Date(Number(accessToken.expiresOn) * 1000),\n            tokenType: request.authenticationScheme || _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER,\n            correlationId,\n            extExpiresOn: new Date(Number(accessToken.extendedExpiresOn) * 1000),\n            state: request.state\n        };\n        return authenticationResult;\n    }\n}\n //# sourceMappingURL=NestedAppAuthAdapter.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigationClient: () => (/* binding */ NavigationClient)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NavigationClient {\n    /**\r\n     * Navigates to other pages within the same web application\r\n     * @param url\r\n     * @param options\r\n     */ navigateInternal(url, options) {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n    /**\r\n     * Navigates to other pages outside the web application i.e. the Identity Provider\r\n     * @param url\r\n     * @param options\r\n     */ navigateExternal(url, options) {\n        return NavigationClient.defaultNavigateWindow(url, options);\n    }\n    /**\r\n     * Default navigation implementation invoked by the internal and external functions\r\n     * @param url\r\n     * @param options\r\n     */ static defaultNavigateWindow(url, options) {\n        if (options.noHistory) {\n            window.location.replace(url);\n        } else {\n            window.location.assign(url);\n        }\n        return new Promise((resolve)=>{\n            setTimeout(()=>{\n                resolve(true);\n            }, options.timeout);\n        });\n    }\n}\n //# sourceMappingURL=NavigationClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hdmlnYXRpb24vTmF2aWdhdGlvbkNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BO0lBQ0Y7Ozs7S0FJQyxHQUNEQyxpQkFBaUJDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE9BQU9ILGlCQUFpQkkscUJBQXFCLENBQUNGLEtBQUtDO0lBQ3ZEO0lBQ0E7Ozs7S0FJQyxHQUNERSxpQkFBaUJILEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQzNCLE9BQU9ILGlCQUFpQkkscUJBQXFCLENBQUNGLEtBQUtDO0lBQ3ZEO0lBQ0E7Ozs7S0FJQyxHQUNELE9BQU9DLHNCQUFzQkYsR0FBRyxFQUFFQyxPQUFPLEVBQUU7UUFDdkMsSUFBSUEsUUFBUUcsU0FBUyxFQUFFO1lBQ25CQyxPQUFPQyxRQUFRLENBQUNDLE9BQU8sQ0FBQ1A7UUFDNUIsT0FDSztZQUNESyxPQUFPQyxRQUFRLENBQUNFLE1BQU0sQ0FBQ1I7UUFDM0I7UUFDQSxPQUFPLElBQUlTLFFBQVEsQ0FBQ0M7WUFDaEJDLFdBQVc7Z0JBQ1BELFFBQVE7WUFDWixHQUFHVCxRQUFRVyxPQUFPO1FBQ3RCO0lBQ0o7QUFDSjtBQUU0QixDQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L25hdmlnYXRpb24vTmF2aWdhdGlvbkNsaWVudC5tanM/NWQ0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBOYXZpZ2F0aW9uQ2xpZW50IHtcclxuICAgIC8qKlxyXG4gICAgICogTmF2aWdhdGVzIHRvIG90aGVyIHBhZ2VzIHdpdGhpbiB0aGUgc2FtZSB3ZWIgYXBwbGljYXRpb25cclxuICAgICAqIEBwYXJhbSB1cmxcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIG5hdmlnYXRlSW50ZXJuYWwodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIE5hdmlnYXRpb25DbGllbnQuZGVmYXVsdE5hdmlnYXRlV2luZG93KHVybCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE5hdmlnYXRlcyB0byBvdGhlciBwYWdlcyBvdXRzaWRlIHRoZSB3ZWIgYXBwbGljYXRpb24gaS5lLiB0aGUgSWRlbnRpdHkgUHJvdmlkZXJcclxuICAgICAqIEBwYXJhbSB1cmxcclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIG5hdmlnYXRlRXh0ZXJuYWwodXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIE5hdmlnYXRpb25DbGllbnQuZGVmYXVsdE5hdmlnYXRlV2luZG93KHVybCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgbmF2aWdhdGlvbiBpbXBsZW1lbnRhdGlvbiBpbnZva2VkIGJ5IHRoZSBpbnRlcm5hbCBhbmQgZXh0ZXJuYWwgZnVuY3Rpb25zXHJcbiAgICAgKiBAcGFyYW0gdXJsXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZGVmYXVsdE5hdmlnYXRlV2luZG93KHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChvcHRpb25zLm5vSGlzdG9yeSkge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9LCBvcHRpb25zLnRpbWVvdXQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IE5hdmlnYXRpb25DbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5hdmlnYXRpb25DbGllbnQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIk5hdmlnYXRpb25DbGllbnQiLCJuYXZpZ2F0ZUludGVybmFsIiwidXJsIiwib3B0aW9ucyIsImRlZmF1bHROYXZpZ2F0ZVdpbmRvdyIsIm5hdmlnYXRlRXh0ZXJuYWwiLCJub0hpc3RvcnkiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcGxhY2UiLCJhc3NpZ24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJ0aW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/navigation/NavigationClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchClient: () => (/* binding */ FetchClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */ class FetchClient {\n    /**\r\n     * Fetch Client for REST endpoints - Get request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */ async sendGetRequestAsync(url, options) {\n        let response;\n        let responseHeaders = {};\n        let responseStatus = 0;\n        const reqHeaders = getFetchHeaders(options);\n        try {\n            response = await fetch(url, {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.HTTP_REQUEST_TYPE.GET,\n                headers: reqHeaders\n            });\n        } catch (e) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(window.navigator.onLine ? _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.getRequestFailed : _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noNetworkConnectivity);\n        }\n        responseHeaders = getHeaderDict(response.headers);\n        try {\n            responseStatus = response.status;\n            return {\n                headers: responseHeaders,\n                body: await response.json(),\n                status: responseStatus\n            };\n        } catch (e) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createNetworkError)((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToParseResponse), responseStatus, responseHeaders);\n        }\n    }\n    /**\r\n     * Fetch Client for REST endpoints - Post request\r\n     * @param url\r\n     * @param headers\r\n     * @param body\r\n     */ async sendPostRequestAsync(url, options) {\n        const reqBody = options && options.body || \"\";\n        const reqHeaders = getFetchHeaders(options);\n        let response;\n        let responseStatus = 0;\n        let responseHeaders = {};\n        try {\n            response = await fetch(url, {\n                method: _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_0__.HTTP_REQUEST_TYPE.POST,\n                headers: reqHeaders,\n                body: reqBody\n            });\n        } catch (e) {\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(window.navigator.onLine ? _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.postRequestFailed : _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noNetworkConnectivity);\n        }\n        responseHeaders = getHeaderDict(response.headers);\n        try {\n            responseStatus = response.status;\n            return {\n                headers: responseHeaders,\n                body: await response.json(),\n                status: responseStatus\n            };\n        } catch (e) {\n            throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.createNetworkError)((0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToParseResponse), responseStatus, responseHeaders);\n        }\n    }\n}\n/**\r\n * Get Fetch API Headers object from string map\r\n * @param inputHeaders\r\n */ function getFetchHeaders(options) {\n    try {\n        const headers = new Headers();\n        if (!(options && options.headers)) {\n            return headers;\n        }\n        const optionsHeaders = options.headers;\n        Object.entries(optionsHeaders).forEach(([key, value])=>{\n            headers.append(key, value);\n        });\n        return headers;\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToBuildHeaders);\n    }\n}\n/**\r\n * Returns object representing response headers\r\n * @param headers\r\n * @returns\r\n */ function getHeaderDict(headers) {\n    try {\n        const headerDict = {};\n        headers.forEach((value, key)=>{\n            headerDict[key] = value;\n        });\n        return headerDict;\n    } catch (e) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.failedToParseHeaders);\n    }\n}\n //# sourceMappingURL=FetchClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/network/FetchClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseOperatingContext: () => (/* binding */ BaseOperatingContext)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/Configuration.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/config/Configuration.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\");\n/* harmony import */ var _utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Base class for operating context\r\n * Operating contexts are contexts in which MSAL.js is being run\r\n * More than one operating context may be available at a time\r\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\r\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\r\n */ class BaseOperatingContext {\n    static loggerCallback(level, message) {\n        switch(level){\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error:\n                // eslint-disable-next-line no-console\n                console.error(message);\n                return;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Info:\n                // eslint-disable-next-line no-console\n                console.info(message);\n                return;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Verbose:\n                // eslint-disable-next-line no-console\n                console.debug(message);\n                return;\n            case _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning:\n                // eslint-disable-next-line no-console\n                console.warn(message);\n                return;\n            default:\n                // eslint-disable-next-line no-console\n                console.log(message);\n                return;\n        }\n    }\n    constructor(config){\n        /*\r\n         * If loaded in an environment where window is not available,\r\n         * set internal flag to false so that further requests fail.\r\n         * This is to support server-side rendering environments.\r\n         */ this.browserEnvironment = \"undefined\" !== \"undefined\";\n        this.config = (0,_config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_1__.buildConfiguration)(config, this.browserEnvironment);\n        let sessionStorage;\n        try {\n            sessionStorage = window[_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.BrowserCacheLocation.SessionStorage];\n        // Mute errors if it's a non-browser environment or cookies are blocked.\n        } catch (e) {}\n        const logLevelKey = sessionStorage?.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.LOG_LEVEL_CACHE_KEY);\n        const piiLoggingKey = sessionStorage?.getItem(_utils_BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_2__.LOG_PII_CACHE_KEY)?.toLowerCase();\n        const piiLoggingEnabled = piiLoggingKey === \"true\" ? true : piiLoggingKey === \"false\" ? false : undefined;\n        const loggerOptions = {\n            ...this.config.system.loggerOptions\n        };\n        const logLevel = logLevelKey && Object.keys(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel).includes(logLevelKey) ? _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.LogLevel[logLevelKey] : undefined;\n        if (logLevel) {\n            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\n            loggerOptions.logLevel = logLevel;\n        }\n        if (piiLoggingEnabled !== undefined) {\n            loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\n        }\n        this.logger = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.Logger(loggerOptions, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_3__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_3__.version);\n        this.available = false;\n    }\n    /**\r\n     * Return the MSAL config\r\n     * @returns BrowserConfiguration\r\n     */ getConfig() {\n        return this.config;\n    }\n    /**\r\n     * Returns the MSAL Logger\r\n     * @returns Logger\r\n     */ getLogger() {\n        return this.logger;\n    }\n    isAvailable() {\n        return this.available;\n    }\n    isBrowserEnvironment() {\n        return this.browserEnvironment;\n    }\n}\n //# sourceMappingURL=BaseOperatingContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NestedAppOperatingContext: () => (/* binding */ NestedAppOperatingContext)\n/* harmony export */ });\n/* harmony import */ var _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NestedAppOperatingContext extends _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseOperatingContext {\n    constructor(){\n        super(...arguments);\n        this.bridgeProxy = undefined;\n        this.accountContext = null;\n    }\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */ getModuleName() {\n        return NestedAppOperatingContext.MODULE_NAME;\n    }\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */ getId() {\n        return NestedAppOperatingContext.ID;\n    }\n    /**\r\n     * Returns the current BridgeProxy\r\n     * @returns IBridgeProxy | undefined\r\n     */ getBridgeProxy() {\n        return this.bridgeProxy;\n    }\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */ async initialize() {\n        try {\n            if (false) {}\n        } catch (ex) {\n            this.logger.infoPii(`Could not initialize Nested App Auth bridge (${ex})`);\n        }\n        this.logger.info(`Nested App Auth Bridge available: ${this.available}`);\n        return this.available;\n    }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */ NestedAppOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */ NestedAppOperatingContext.ID = \"NestedAppOperatingContext\";\n //# sourceMappingURL=NestedAppOperatingContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L29wZXJhdGluZ2NvbnRleHQvTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDa0U7QUFDYjtBQUVyRDs7O0NBR0MsR0FDRCxNQUFNRSxrQ0FBa0NGLDJFQUFvQkE7SUFDeERHLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxXQUFXLEdBQUdDO1FBQ25CLElBQUksQ0FBQ0MsY0FBYyxHQUFHO0lBQzFCO0lBQ0E7Ozs7S0FJQyxHQUNEQyxnQkFBZ0I7UUFDWixPQUFPTiwwQkFBMEJPLFdBQVc7SUFDaEQ7SUFDQTs7O0tBR0MsR0FDREMsUUFBUTtRQUNKLE9BQU9SLDBCQUEwQlMsRUFBRTtJQUN2QztJQUNBOzs7S0FHQyxHQUNEQyxpQkFBaUI7UUFDYixPQUFPLElBQUksQ0FBQ1AsV0FBVztJQUMzQjtJQUNBOzs7O0tBSUMsR0FDRCxNQUFNUSxhQUFhO1FBQ2YsSUFBSTtZQUNBLElBQUksS0FBNkIsRUFBRSxFQWFsQztRQUNMLEVBQ0EsT0FBT00sSUFBSTtZQUNQLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxPQUFPLENBQUMsQ0FBQyw2Q0FBNkMsRUFBRUYsR0FBRyxDQUFDLENBQUM7UUFDN0U7UUFDQSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLENBQUMsa0NBQWtDLEVBQUUsSUFBSSxDQUFDSixTQUFTLENBQUMsQ0FBQztRQUN0RSxPQUFPLElBQUksQ0FBQ0EsU0FBUztJQUN6QjtBQUNKO0FBQ0E7OztDQUdDLEdBQ0RoQiwwQkFBMEJPLFdBQVcsR0FBRztBQUN4Qzs7Q0FFQyxHQUNEUCwwQkFBMEJTLEVBQUUsR0FBRztBQUVNLENBQ3JDLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1icm93c2VyL2Rpc3Qvb3BlcmF0aW5nY29udGV4dC9OZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0Lm1qcz8xYTVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQmFzZU9wZXJhdGluZ0NvbnRleHQgfSBmcm9tICcuL0Jhc2VPcGVyYXRpbmdDb250ZXh0Lm1qcyc7XG5pbXBvcnQgeyBCcmlkZ2VQcm94eSB9IGZyb20gJy4uL25hYS9CcmlkZ2VQcm94eS5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dCBleHRlbmRzIEJhc2VPcGVyYXRpbmdDb250ZXh0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5icmlkZ2VQcm94eSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmFjY291bnRDb250ZXh0ID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBtb2R1bGUgbmFtZS4gIEludGVuZGVkIGZvciB1c2Ugd2l0aCBpbXBvcnQoKSB0byBlbmFibGUgZHluYW1pYyBpbXBvcnRcclxuICAgICAqIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBvcGVyYXRpbmcgY29udGV4dFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgZ2V0TW9kdWxlTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dC5NT0RVTEVfTkFNRTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgb3BlcmF0aW5nIGNvbnRleHRcclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dC5JRDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBCcmlkZ2VQcm94eVxyXG4gICAgICogQHJldHVybnMgSUJyaWRnZVByb3h5IHwgdW5kZWZpbmVkXHJcbiAgICAgKi9cclxuICAgIGdldEJyaWRnZVByb3h5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJyaWRnZVByb3h5O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgb3BlcmF0aW5nIGNvbnRleHQgaXMgYXZhaWxhYmxlLlxyXG4gICAgICogQ29uZmlybXMgdGhhdCB0aGUgY29kZSBpcyBydW5uaW5nIGEgYnJvd3NlciByYXRoZXIuICBUaGlzIGlzIHJlcXVpcmVkLlxyXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxib29sZWFuPiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyBvcGVyYXRpbmcgY29udGV4dCBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBpbml0aWFsaXplKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5fX2luaXRpYWxpemVOZXN0ZWRBcHBBdXRoID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB3aW5kb3cuX19pbml0aWFsaXplTmVzdGVkQXBwQXV0aCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnJpZGdlUHJveHkgPSBhd2FpdCBCcmlkZ2VQcm94eS5jcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgKiBCZWNhdXNlIHdlIHdhbnQgc2luZ2xlIHNpZ24gb24gd2UgZXhwZWN0IHRoZSBob3N0IGFwcCB0byBwcm92aWRlIHRoZSBhY2NvdW50IGNvbnRleHRcclxuICAgICAgICAgICAgICAgICAqIHdpdGggYSBtaW4gc2V0IG9mIHBhcmFtcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGlkZW50aWZ5IHRoZSBhY2NvdW50XHJcbiAgICAgICAgICAgICAgICAgKiB0aGlzLmFjY291bnQgPSBuZXN0ZWRBcHAuZ2V0QWNjb3VudEJ5RmlsdGVyKGJyaWRnZVByb3h5LmdldEFjY291bnRDb250ZXh0KCkpO1xyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjY291bnRDb250ZXh0ID0gYnJpZGdlUHJveHkuZ2V0QWNjb3VudENvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnJpZGdlUHJveHkgPSBicmlkZ2VQcm94eTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXZhaWxhYmxlID0gYnJpZGdlUHJveHkgIT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mb1BpaShgQ291bGQgbm90IGluaXRpYWxpemUgTmVzdGVkIEFwcCBBdXRoIGJyaWRnZSAoJHtleH0pYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubG9nZ2VyLmluZm8oYE5lc3RlZCBBcHAgQXV0aCBCcmlkZ2UgYXZhaWxhYmxlOiAke3RoaXMuYXZhaWxhYmxlfWApO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZTtcclxuICAgIH1cclxufVxyXG4vKlxyXG4gKiBUT0RPOiBPbmNlIHdlIGhhdmUgZGV0ZXJtaW5lIHRoZSBidW5kbGluZyBjb2RlIHJldHVybiBoZXJlIHRvIHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhlIGJ1bmRsZVxyXG4gKiBjb250YWluaW5nIHRoZSBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBvcGVyYXRpbmcgY29udGV4dFxyXG4gKi9cclxuTmVzdGVkQXBwT3BlcmF0aW5nQ29udGV4dC5NT0RVTEVfTkFNRSA9IFwiXCI7XHJcbi8qKlxyXG4gKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIG9wZXJhdGluZyBjb250ZXh0XHJcbiAqL1xyXG5OZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0LklEID0gXCJOZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0XCI7XG5cbmV4cG9ydCB7IE5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5lc3RlZEFwcE9wZXJhdGluZ0NvbnRleHQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkJhc2VPcGVyYXRpbmdDb250ZXh0IiwiQnJpZGdlUHJveHkiLCJOZXN0ZWRBcHBPcGVyYXRpbmdDb250ZXh0IiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJicmlkZ2VQcm94eSIsInVuZGVmaW5lZCIsImFjY291bnRDb250ZXh0IiwiZ2V0TW9kdWxlTmFtZSIsIk1PRFVMRV9OQU1FIiwiZ2V0SWQiLCJJRCIsImdldEJyaWRnZVByb3h5IiwiaW5pdGlhbGl6ZSIsIndpbmRvdyIsIl9faW5pdGlhbGl6ZU5lc3RlZEFwcEF1dGgiLCJjcmVhdGUiLCJnZXRBY2NvdW50Q29udGV4dCIsImF2YWlsYWJsZSIsImV4IiwibG9nZ2VyIiwiaW5mb1BpaSIsImluZm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/NestedAppOperatingContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardOperatingContext: () => (/* binding */ StandardOperatingContext)\n/* harmony export */ });\n/* harmony import */ var _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseOperatingContext.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/BaseOperatingContext.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class StandardOperatingContext extends _BaseOperatingContext_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseOperatingContext {\n    /**\r\n     * Return the module name.  Intended for use with import() to enable dynamic import\r\n     * of the implementation associated with this operating context\r\n     * @returns\r\n     */ getModuleName() {\n        return StandardOperatingContext.MODULE_NAME;\n    }\n    /**\r\n     * Returns the unique identifier for this operating context\r\n     * @returns string\r\n     */ getId() {\n        return StandardOperatingContext.ID;\n    }\n    /**\r\n     * Checks whether the operating context is available.\r\n     * Confirms that the code is running a browser rather.  This is required.\r\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\r\n     */ async initialize() {\n        this.available = \"undefined\" !== \"undefined\";\n        return this.available;\n    /*\r\n         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\r\n         * We can move the current contents of the initialize method to here and verify that the WAM extension is available\r\n         */ }\n}\n/*\r\n * TODO: Once we have determine the bundling code return here to specify the name of the bundle\r\n * containing the implementation for this operating context\r\n */ StandardOperatingContext.MODULE_NAME = \"\";\n/**\r\n * Unique identifier for the operating context\r\n */ StandardOperatingContext.ID = \"StandardOperatingContext\";\n //# sourceMappingURL=StandardOperatingContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L29wZXJhdGluZ2NvbnRleHQvU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNrRTtBQUVsRTs7O0NBR0MsR0FDRCxNQUFNQyxpQ0FBaUNELDJFQUFvQkE7SUFDdkQ7Ozs7S0FJQyxHQUNERSxnQkFBZ0I7UUFDWixPQUFPRCx5QkFBeUJFLFdBQVc7SUFDL0M7SUFDQTs7O0tBR0MsR0FDREMsUUFBUTtRQUNKLE9BQU9ILHlCQUF5QkksRUFBRTtJQUN0QztJQUNBOzs7O0tBSUMsR0FDRCxNQUFNQyxhQUFhO1FBQ2YsSUFBSSxDQUFDQyxTQUFTLEdBQUcsZ0JBQWtCO1FBQ25DLE9BQU8sSUFBSSxDQUFDQSxTQUFTO0lBQ3JCOzs7U0FHQyxHQUNMO0FBQ0o7QUFDQTs7O0NBR0MsR0FDRE4seUJBQXlCRSxXQUFXLEdBQUc7QUFDdkM7O0NBRUMsR0FDREYseUJBQXlCSSxFQUFFLEdBQUc7QUFFTSxDQUNwQyxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L29wZXJhdGluZ2NvbnRleHQvU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0Lm1qcz9jZTNjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQmFzZU9wZXJhdGluZ0NvbnRleHQgfSBmcm9tICcuL0Jhc2VPcGVyYXRpbmdDb250ZXh0Lm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBTdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQgZXh0ZW5kcyBCYXNlT3BlcmF0aW5nQ29udGV4dCB7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB0aGUgbW9kdWxlIG5hbWUuICBJbnRlbmRlZCBmb3IgdXNlIHdpdGggaW1wb3J0KCkgdG8gZW5hYmxlIGR5bmFtaWMgaW1wb3J0XHJcbiAgICAgKiBvZiB0aGUgaW1wbGVtZW50YXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoaXMgb3BlcmF0aW5nIGNvbnRleHRcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIGdldE1vZHVsZU5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dC5NT0RVTEVfTkFNRTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgb3BlcmF0aW5nIGNvbnRleHRcclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBnZXRJZCgpIHtcclxuICAgICAgICByZXR1cm4gU3RhbmRhcmRPcGVyYXRpbmdDb250ZXh0LklEO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgb3BlcmF0aW5nIGNvbnRleHQgaXMgYXZhaWxhYmxlLlxyXG4gICAgICogQ29uZmlybXMgdGhhdCB0aGUgY29kZSBpcyBydW5uaW5nIGEgYnJvd3NlciByYXRoZXIuICBUaGlzIGlzIHJlcXVpcmVkLlxyXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxib29sZWFuPiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyBvcGVyYXRpbmcgY29udGV4dCBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBpbml0aWFsaXplKCkge1xyXG4gICAgICAgIHRoaXMuYXZhaWxhYmxlID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdmFpbGFibGU7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBOT1RFOiBUaGUgc3RhbmRhcmQgY29udGV4dCBpcyBhdmFpbGFibGUgYXMgbG9uZyBhcyB0aGVyZSBpcyBhIHdpbmRvdy4gIElmL3doZW4gd2Ugc3BsaXQgb3V0IFdBTSBmcm9tIEJyb3dzZXJcclxuICAgICAgICAgKiBXZSBjYW4gbW92ZSB0aGUgY3VycmVudCBjb250ZW50cyBvZiB0aGUgaW5pdGlhbGl6ZSBtZXRob2QgdG8gaGVyZSBhbmQgdmVyaWZ5IHRoYXQgdGhlIFdBTSBleHRlbnNpb24gaXMgYXZhaWxhYmxlXHJcbiAgICAgICAgICovXHJcbiAgICB9XHJcbn1cclxuLypcclxuICogVE9ETzogT25jZSB3ZSBoYXZlIGRldGVybWluZSB0aGUgYnVuZGxpbmcgY29kZSByZXR1cm4gaGVyZSB0byBzcGVjaWZ5IHRoZSBuYW1lIG9mIHRoZSBidW5kbGVcclxuICogY29udGFpbmluZyB0aGUgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgb3BlcmF0aW5nIGNvbnRleHRcclxuICovXHJcblN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dC5NT0RVTEVfTkFNRSA9IFwiXCI7XHJcbi8qKlxyXG4gKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIG9wZXJhdGluZyBjb250ZXh0XHJcbiAqL1xyXG5TdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQuSUQgPSBcIlN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dFwiO1xuXG5leHBvcnQgeyBTdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YW5kYXJkT3BlcmF0aW5nQ29udGV4dC5tanMubWFwXG4iXSwibmFtZXMiOlsiQmFzZU9wZXJhdGluZ0NvbnRleHQiLCJTdGFuZGFyZE9wZXJhdGluZ0NvbnRleHQiLCJnZXRNb2R1bGVOYW1lIiwiTU9EVUxFX05BTUUiLCJnZXRJZCIsIklEIiwiaW5pdGlhbGl6ZSIsImF2YWlsYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/operatingcontext/StandardOperatingContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/packageMetadata.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n/* eslint-disable header/header */ const name = \"@azure/msal-browser\";\nconst version = \"3.28.0\";\n //# sourceMappingURL=packageMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3BhY2thZ2VNZXRhZGF0YS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQSxnQ0FBZ0MsR0FDaEMsTUFBTUEsT0FBTztBQUNiLE1BQU1DLFVBQVU7QUFFUyxDQUN6Qiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3BhY2thZ2VNZXRhZGF0YS5tanM/Nzc5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGhlYWRlci9oZWFkZXIgKi9cclxuY29uc3QgbmFtZSA9IFwiQGF6dXJlL21zYWwtYnJvd3NlclwiO1xyXG5jb25zdCB2ZXJzaW9uID0gXCIzLjI4LjBcIjtcblxuZXhwb3J0IHsgbmFtZSwgdmVyc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFja2FnZU1ldGFkYXRhLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJuYW1lIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/packageMetadata.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeBaseRequest: () => (/* binding */ initializeBaseRequest),\n/* harmony export */   initializeSilentRequest: () => (/* binding */ initializeSilentRequest)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Initializer function for all request APIs\r\n * @param request\r\n */ async function initializeBaseRequest(request, config, performanceClient, logger) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.InitializeBaseRequest, request.correlationId);\n    const authority = request.authority || config.auth.authority;\n    const scopes = [\n        ...request && request.scopes || []\n    ];\n    const validatedRequest = {\n        ...request,\n        correlationId: request.correlationId,\n        authority,\n        scopes\n    };\n    // Set authenticationScheme to BEARER if not explicitly set in the request\n    if (!validatedRequest.authenticationScheme) {\n        validatedRequest.authenticationScheme = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER;\n        logger.verbose('Authentication Scheme wasn\\'t explicitly set in request, defaulting to \"Bearer\" request');\n    } else {\n        if (validatedRequest.authenticationScheme === _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.SSH) {\n            if (!request.sshJwk) {\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.missingSshJwk);\n            }\n            if (!request.sshKid) {\n                throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.createClientConfigurationError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_3__.missingSshKid);\n            }\n        }\n        logger.verbose(`Authentication Scheme set to \"${validatedRequest.authenticationScheme}\" as configured in Auth request`);\n    }\n    // Set requested claims hash if claims-based caching is enabled and claims were requested\n    if (config.cache.claimsBasedCachingEnabled && request.claims && // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n    !_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_4__.StringUtils.isEmptyObj(request.claims)) {\n        validatedRequest.requestedClaimsHash = await (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_5__.hashString)(request.claims);\n    }\n    return validatedRequest;\n}\nasync function initializeSilentRequest(request, account, config, performanceClient, logger) {\n    performanceClient.addQueueMeasurement(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.InitializeSilentRequest, request.correlationId);\n    const baseRequest = await (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_6__.invokeAsync)(initializeBaseRequest, _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.InitializeBaseRequest, logger, performanceClient, request.correlationId)(request, config, performanceClient, logger);\n    return {\n        ...request,\n        ...baseRequest,\n        account: account,\n        forceRefresh: request.forceRefresh || false\n    };\n}\n //# sourceMappingURL=RequestHelpers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3JlcXVlc3QvUmVxdWVzdEhlbHBlcnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUM4SztBQUNySDtBQUV6RDs7O0NBR0MsR0FDRDs7O0NBR0MsR0FDRCxlQUFlTyxzQkFBc0JDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRUMsTUFBTTtJQUMzRUQsa0JBQWtCRSxtQkFBbUIsQ0FBQ1oseUVBQWlCQSxDQUFDYSxxQkFBcUIsRUFBRUwsUUFBUU0sYUFBYTtJQUNwRyxNQUFNQyxZQUFZUCxRQUFRTyxTQUFTLElBQUlOLE9BQU9PLElBQUksQ0FBQ0QsU0FBUztJQUM1RCxNQUFNRSxTQUFTO1dBQUssV0FBWVQsUUFBUVMsTUFBTSxJQUFLLEVBQUU7S0FBRTtJQUN2RCxNQUFNQyxtQkFBbUI7UUFDckIsR0FBR1YsT0FBTztRQUNWTSxlQUFlTixRQUFRTSxhQUFhO1FBQ3BDQztRQUNBRTtJQUNKO0lBQ0EsMEVBQTBFO0lBQzFFLElBQUksQ0FBQ0MsaUJBQWlCQyxvQkFBb0IsRUFBRTtRQUN4Q0QsaUJBQWlCQyxvQkFBb0IsR0FBR2pCLDRFQUFvQkEsQ0FBQ2tCLE1BQU07UUFDbkVULE9BQU9VLE9BQU8sQ0FBQztJQUNuQixPQUNLO1FBQ0QsSUFBSUgsaUJBQWlCQyxvQkFBb0IsS0FBS2pCLDRFQUFvQkEsQ0FBQ29CLEdBQUcsRUFBRTtZQUNwRSxJQUFJLENBQUNkLFFBQVFlLE1BQU0sRUFBRTtnQkFDakIsTUFBTXBCLDBGQUE4QkEsQ0FBQ0MscUVBQTJDO1lBQ3BGO1lBQ0EsSUFBSSxDQUFDSSxRQUFRaUIsTUFBTSxFQUFFO2dCQUNqQixNQUFNdEIsMEZBQThCQSxDQUFDQyxxRUFBMkM7WUFDcEY7UUFDSjtRQUNBTyxPQUFPVSxPQUFPLENBQUMsQ0FBQyw4QkFBOEIsRUFBRUgsaUJBQWlCQyxvQkFBb0IsQ0FBQywrQkFBK0IsQ0FBQztJQUMxSDtJQUNBLHlGQUF5RjtJQUN6RixJQUFJVixPQUFPa0IsS0FBSyxDQUFDQyx5QkFBeUIsSUFDdENwQixRQUFRcUIsTUFBTSxJQUNkLHFGQUFxRjtJQUNyRixDQUFDeEIsbUVBQVdBLENBQUN5QixVQUFVLENBQUN0QixRQUFRcUIsTUFBTSxHQUFHO1FBQ3pDWCxpQkFBaUJhLG1CQUFtQixHQUFHLE1BQU16QixxRUFBVUEsQ0FBQ0UsUUFBUXFCLE1BQU07SUFDMUU7SUFDQSxPQUFPWDtBQUNYO0FBQ0EsZUFBZWMsd0JBQXdCeEIsT0FBTyxFQUFFeUIsT0FBTyxFQUFFeEIsTUFBTSxFQUFFQyxpQkFBaUIsRUFBRUMsTUFBTTtJQUN0RkQsa0JBQWtCRSxtQkFBbUIsQ0FBQ1oseUVBQWlCQSxDQUFDa0MsdUJBQXVCLEVBQUUxQixRQUFRTSxhQUFhO0lBQ3RHLE1BQU1xQixjQUFjLE1BQU1sQyx1RUFBV0EsQ0FBQ00sdUJBQXVCUCx5RUFBaUJBLENBQUNhLHFCQUFxQixFQUFFRixRQUFRRCxtQkFBbUJGLFFBQVFNLGFBQWEsRUFBRU4sU0FBU0MsUUFBUUMsbUJBQW1CQztJQUM1TCxPQUFPO1FBQ0gsR0FBR0gsT0FBTztRQUNWLEdBQUcyQixXQUFXO1FBQ2RGLFNBQVNBO1FBQ1RHLGNBQWM1QixRQUFRNEIsWUFBWSxJQUFJO0lBQzFDO0FBQ0o7QUFFMEQsQ0FDMUQsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9yZXF1ZXN0L1JlcXVlc3RIZWxwZXJzLm1qcz9jNWJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1icm93c2VyIHYzLjI4LjAgMjAyNC0xMi0xMiAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgUGVyZm9ybWFuY2VFdmVudHMsIGludm9rZUFzeW5jLCBBdXRoZW50aWNhdGlvblNjaGVtZSwgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLCBDbGllbnRDb25maWd1cmF0aW9uRXJyb3JDb2RlcywgU3RyaW5nVXRpbHMgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5pbXBvcnQgeyBoYXNoU3RyaW5nIH0gZnJvbSAnLi4vY3J5cHRvL0Jyb3dzZXJDcnlwdG8ubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplciBmdW5jdGlvbiBmb3IgYWxsIHJlcXVlc3QgQVBJc1xyXG4gKiBAcGFyYW0gcmVxdWVzdFxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZUJhc2VSZXF1ZXN0KHJlcXVlc3QsIGNvbmZpZywgcGVyZm9ybWFuY2VDbGllbnQsIGxvZ2dlcikge1xyXG4gICAgcGVyZm9ybWFuY2VDbGllbnQuYWRkUXVldWVNZWFzdXJlbWVudChQZXJmb3JtYW5jZUV2ZW50cy5Jbml0aWFsaXplQmFzZVJlcXVlc3QsIHJlcXVlc3QuY29ycmVsYXRpb25JZCk7XHJcbiAgICBjb25zdCBhdXRob3JpdHkgPSByZXF1ZXN0LmF1dGhvcml0eSB8fCBjb25maWcuYXV0aC5hdXRob3JpdHk7XHJcbiAgICBjb25zdCBzY29wZXMgPSBbLi4uKChyZXF1ZXN0ICYmIHJlcXVlc3Quc2NvcGVzKSB8fCBbXSldO1xyXG4gICAgY29uc3QgdmFsaWRhdGVkUmVxdWVzdCA9IHtcclxuICAgICAgICAuLi5yZXF1ZXN0LFxyXG4gICAgICAgIGNvcnJlbGF0aW9uSWQ6IHJlcXVlc3QuY29ycmVsYXRpb25JZCxcclxuICAgICAgICBhdXRob3JpdHksXHJcbiAgICAgICAgc2NvcGVzLFxyXG4gICAgfTtcclxuICAgIC8vIFNldCBhdXRoZW50aWNhdGlvblNjaGVtZSB0byBCRUFSRVIgaWYgbm90IGV4cGxpY2l0bHkgc2V0IGluIHRoZSByZXF1ZXN0XHJcbiAgICBpZiAoIXZhbGlkYXRlZFJlcXVlc3QuYXV0aGVudGljYXRpb25TY2hlbWUpIHtcclxuICAgICAgICB2YWxpZGF0ZWRSZXF1ZXN0LmF1dGhlbnRpY2F0aW9uU2NoZW1lID0gQXV0aGVudGljYXRpb25TY2hlbWUuQkVBUkVSO1xyXG4gICAgICAgIGxvZ2dlci52ZXJib3NlKCdBdXRoZW50aWNhdGlvbiBTY2hlbWUgd2FzblxcJ3QgZXhwbGljaXRseSBzZXQgaW4gcmVxdWVzdCwgZGVmYXVsdGluZyB0byBcIkJlYXJlclwiIHJlcXVlc3QnKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICh2YWxpZGF0ZWRSZXF1ZXN0LmF1dGhlbnRpY2F0aW9uU2NoZW1lID09PSBBdXRoZW50aWNhdGlvblNjaGVtZS5TU0gpIHtcclxuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LnNzaEp3aykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKENsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLm1pc3NpbmdTc2hKd2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghcmVxdWVzdC5zc2hLaWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihDbGllbnRDb25maWd1cmF0aW9uRXJyb3JDb2Rlcy5taXNzaW5nU3NoS2lkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsb2dnZXIudmVyYm9zZShgQXV0aGVudGljYXRpb24gU2NoZW1lIHNldCB0byBcIiR7dmFsaWRhdGVkUmVxdWVzdC5hdXRoZW50aWNhdGlvblNjaGVtZX1cIiBhcyBjb25maWd1cmVkIGluIEF1dGggcmVxdWVzdGApO1xyXG4gICAgfVxyXG4gICAgLy8gU2V0IHJlcXVlc3RlZCBjbGFpbXMgaGFzaCBpZiBjbGFpbXMtYmFzZWQgY2FjaGluZyBpcyBlbmFibGVkIGFuZCBjbGFpbXMgd2VyZSByZXF1ZXN0ZWRcclxuICAgIGlmIChjb25maWcuY2FjaGUuY2xhaW1zQmFzZWRDYWNoaW5nRW5hYmxlZCAmJlxyXG4gICAgICAgIHJlcXVlc3QuY2xhaW1zICYmXHJcbiAgICAgICAgLy8gQ2hlY2tzIGZvciBlbXB0eSBzdHJpbmdpZmllZCBvYmplY3QgXCJ7fVwiIHdoaWNoIGRvZXNuJ3QgcXVhbGlmeSBhcyByZXF1ZXN0ZWQgY2xhaW1zXHJcbiAgICAgICAgIVN0cmluZ1V0aWxzLmlzRW1wdHlPYmoocmVxdWVzdC5jbGFpbXMpKSB7XHJcbiAgICAgICAgdmFsaWRhdGVkUmVxdWVzdC5yZXF1ZXN0ZWRDbGFpbXNIYXNoID0gYXdhaXQgaGFzaFN0cmluZyhyZXF1ZXN0LmNsYWltcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsaWRhdGVkUmVxdWVzdDtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBpbml0aWFsaXplU2lsZW50UmVxdWVzdChyZXF1ZXN0LCBhY2NvdW50LCBjb25maWcsIHBlcmZvcm1hbmNlQ2xpZW50LCBsb2dnZXIpIHtcclxuICAgIHBlcmZvcm1hbmNlQ2xpZW50LmFkZFF1ZXVlTWVhc3VyZW1lbnQoUGVyZm9ybWFuY2VFdmVudHMuSW5pdGlhbGl6ZVNpbGVudFJlcXVlc3QsIHJlcXVlc3QuY29ycmVsYXRpb25JZCk7XHJcbiAgICBjb25zdCBiYXNlUmVxdWVzdCA9IGF3YWl0IGludm9rZUFzeW5jKGluaXRpYWxpemVCYXNlUmVxdWVzdCwgUGVyZm9ybWFuY2VFdmVudHMuSW5pdGlhbGl6ZUJhc2VSZXF1ZXN0LCBsb2dnZXIsIHBlcmZvcm1hbmNlQ2xpZW50LCByZXF1ZXN0LmNvcnJlbGF0aW9uSWQpKHJlcXVlc3QsIGNvbmZpZywgcGVyZm9ybWFuY2VDbGllbnQsIGxvZ2dlcik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnJlcXVlc3QsXHJcbiAgICAgICAgLi4uYmFzZVJlcXVlc3QsXHJcbiAgICAgICAgYWNjb3VudDogYWNjb3VudCxcclxuICAgICAgICBmb3JjZVJlZnJlc2g6IHJlcXVlc3QuZm9yY2VSZWZyZXNoIHx8IGZhbHNlLFxyXG4gICAgfTtcclxufVxuXG5leHBvcnQgeyBpbml0aWFsaXplQmFzZVJlcXVlc3QsIGluaXRpYWxpemVTaWxlbnRSZXF1ZXN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0SGVscGVycy5tanMubWFwXG4iXSwibmFtZXMiOlsiUGVyZm9ybWFuY2VFdmVudHMiLCJpbnZva2VBc3luYyIsIkF1dGhlbnRpY2F0aW9uU2NoZW1lIiwiY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIiwiQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMiLCJTdHJpbmdVdGlscyIsImhhc2hTdHJpbmciLCJpbml0aWFsaXplQmFzZVJlcXVlc3QiLCJyZXF1ZXN0IiwiY29uZmlnIiwicGVyZm9ybWFuY2VDbGllbnQiLCJsb2dnZXIiLCJhZGRRdWV1ZU1lYXN1cmVtZW50IiwiSW5pdGlhbGl6ZUJhc2VSZXF1ZXN0IiwiY29ycmVsYXRpb25JZCIsImF1dGhvcml0eSIsImF1dGgiLCJzY29wZXMiLCJ2YWxpZGF0ZWRSZXF1ZXN0IiwiYXV0aGVudGljYXRpb25TY2hlbWUiLCJCRUFSRVIiLCJ2ZXJib3NlIiwiU1NIIiwic3NoSndrIiwibWlzc2luZ1NzaEp3ayIsInNzaEtpZCIsIm1pc3NpbmdTc2hLaWQiLCJjYWNoZSIsImNsYWltc0Jhc2VkQ2FjaGluZ0VuYWJsZWQiLCJjbGFpbXMiLCJpc0VtcHR5T2JqIiwicmVxdWVzdGVkQ2xhaW1zSGFzaCIsImluaXRpYWxpemVTaWxlbnRSZXF1ZXN0IiwiYWNjb3VudCIsIkluaXRpYWxpemVTaWxlbnRSZXF1ZXN0IiwiYmFzZVJlcXVlc3QiLCJmb3JjZVJlZnJlc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/request/RequestHelpers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializeResponse: () => (/* binding */ deserializeResponse),\n/* harmony export */   validateInteractionType: () => (/* binding */ validateInteractionType)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/BrowserProtocolUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function deserializeResponse(responseString, responseLocation, logger) {\n    // Deserialize hash fragment response parameters.\n    const serverParams = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.getDeserializedResponse(responseString);\n    if (!serverParams) {\n        if (!_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.stripLeadingHashOrQuery(responseString)) {\n            // Hash or Query string is empty\n            logger.error(`The request has returned to the redirectUri but a ${responseLocation} is not present. It's likely that the ${responseLocation} has been removed or the page has been redirected by code running on the redirectUri page.`);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.hashEmptyError);\n        } else {\n            logger.error(`A ${responseLocation} is present in the iframe but it does not contain known properties. It's likely that the ${responseLocation} has been replaced by code running on the redirectUri page.`);\n            logger.errorPii(`The ${responseLocation} detected is: ${responseString}`);\n            throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.hashDoesNotContainKnownProperties);\n        }\n    }\n    return serverParams;\n}\n/**\r\n * Returns the interaction type that the response object belongs to\r\n */ function validateInteractionType(response, browserCrypto, interactionType) {\n    if (!response.state) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noStateInHash);\n    }\n    const platformStateObj = (0,_utils_BrowserProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.extractBrowserRequestState)(browserCrypto, response.state);\n    if (!platformStateObj) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.unableToParseState);\n    }\n    if (platformStateObj.interactionType !== interactionType) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.stateInteractionTypeMismatch);\n    }\n}\n //# sourceMappingURL=ResponseHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3Jlc3BvbnNlL1Jlc3BvbnNlSGFuZGxlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3NEO0FBQ2lCO0FBQ1E7QUFDeUY7QUFFeEs7OztDQUdDLEdBQ0QsU0FBU1Esb0JBQW9CQyxjQUFjLEVBQUVDLGdCQUFnQixFQUFFQyxNQUFNO0lBQ2pFLGlEQUFpRDtJQUNqRCxNQUFNQyxlQUFlWiwrRUFBZ0MsQ0FBQ1M7SUFDdEQsSUFBSSxDQUFDRyxjQUFjO1FBQ2YsSUFBSSxDQUFDWiwrRUFBZ0MsQ0FBQ1MsaUJBQWlCO1lBQ25ELGdDQUFnQztZQUNoQ0UsT0FBT0ksS0FBSyxDQUFDLENBQUMsa0RBQWtELEVBQUVMLGlCQUFpQixzQ0FBc0MsRUFBRUEsaUJBQWlCLDBGQUEwRixDQUFDO1lBQ3ZPLE1BQU1ULG1GQUFzQkEsQ0FBQ0UsNEVBQWNBO1FBQy9DLE9BQ0s7WUFDRFEsT0FBT0ksS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFTCxpQkFBaUIseUZBQXlGLEVBQUVBLGlCQUFpQiwyREFBMkQsQ0FBQztZQUMzTUMsT0FBT0ssUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFTixpQkFBaUIsY0FBYyxFQUFFRCxlQUFlLENBQUM7WUFDeEUsTUFBTVIsbUZBQXNCQSxDQUFDRywrRkFBaUNBO1FBQ2xFO0lBQ0o7SUFDQSxPQUFPUTtBQUNYO0FBQ0E7O0NBRUMsR0FDRCxTQUFTSyx3QkFBd0JDLFFBQVEsRUFBRUMsYUFBYSxFQUFFQyxlQUFlO0lBQ3JFLElBQUksQ0FBQ0YsU0FBU0csS0FBSyxFQUFFO1FBQ2pCLE1BQU1wQixtRkFBc0JBLENBQUNJLDJFQUFhQTtJQUM5QztJQUNBLE1BQU1pQixtQkFBbUJwQiwyRkFBMEJBLENBQUNpQixlQUFlRCxTQUFTRyxLQUFLO0lBQ2pGLElBQUksQ0FBQ0Msa0JBQWtCO1FBQ25CLE1BQU1yQixtRkFBc0JBLENBQUNLLGdGQUFrQkE7SUFDbkQ7SUFDQSxJQUFJZ0IsaUJBQWlCRixlQUFlLEtBQUtBLGlCQUFpQjtRQUN0RCxNQUFNbkIsbUZBQXNCQSxDQUFDTSwwRkFBNEJBO0lBQzdEO0FBQ0o7QUFFd0QsQ0FDeEQsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC9yZXNwb25zZS9SZXNwb25zZUhhbmRsZXIubWpzP2I2MTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWJyb3dzZXIgdjMuMjguMCAyMDI0LTEyLTEyICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBVcmxVdGlscyB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9icm93c2VyJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0QnJvd3NlclJlcXVlc3RTdGF0ZSB9IGZyb20gJy4uL3V0aWxzL0Jyb3dzZXJQcm90b2NvbFV0aWxzLm1qcyc7XG5pbXBvcnQgeyBoYXNoRW1wdHlFcnJvciwgaGFzaERvZXNOb3RDb250YWluS25vd25Qcm9wZXJ0aWVzLCBub1N0YXRlSW5IYXNoLCB1bmFibGVUb1BhcnNlU3RhdGUsIHN0YXRlSW50ZXJhY3Rpb25UeXBlTWlzbWF0Y2ggfSBmcm9tICcuLi9lcnJvci9Ccm93c2VyQXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGRlc2VyaWFsaXplUmVzcG9uc2UocmVzcG9uc2VTdHJpbmcsIHJlc3BvbnNlTG9jYXRpb24sIGxvZ2dlcikge1xyXG4gICAgLy8gRGVzZXJpYWxpemUgaGFzaCBmcmFnbWVudCByZXNwb25zZSBwYXJhbWV0ZXJzLlxyXG4gICAgY29uc3Qgc2VydmVyUGFyYW1zID0gVXJsVXRpbHMuZ2V0RGVzZXJpYWxpemVkUmVzcG9uc2UocmVzcG9uc2VTdHJpbmcpO1xyXG4gICAgaWYgKCFzZXJ2ZXJQYXJhbXMpIHtcclxuICAgICAgICBpZiAoIVVybFV0aWxzLnN0cmlwTGVhZGluZ0hhc2hPclF1ZXJ5KHJlc3BvbnNlU3RyaW5nKSkge1xyXG4gICAgICAgICAgICAvLyBIYXNoIG9yIFF1ZXJ5IHN0cmluZyBpcyBlbXB0eVxyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoYFRoZSByZXF1ZXN0IGhhcyByZXR1cm5lZCB0byB0aGUgcmVkaXJlY3RVcmkgYnV0IGEgJHtyZXNwb25zZUxvY2F0aW9ufSBpcyBub3QgcHJlc2VudC4gSXQncyBsaWtlbHkgdGhhdCB0aGUgJHtyZXNwb25zZUxvY2F0aW9ufSBoYXMgYmVlbiByZW1vdmVkIG9yIHRoZSBwYWdlIGhhcyBiZWVuIHJlZGlyZWN0ZWQgYnkgY29kZSBydW5uaW5nIG9uIHRoZSByZWRpcmVjdFVyaSBwYWdlLmApO1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKGhhc2hFbXB0eUVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgQSAke3Jlc3BvbnNlTG9jYXRpb259IGlzIHByZXNlbnQgaW4gdGhlIGlmcmFtZSBidXQgaXQgZG9lcyBub3QgY29udGFpbiBrbm93biBwcm9wZXJ0aWVzLiBJdCdzIGxpa2VseSB0aGF0IHRoZSAke3Jlc3BvbnNlTG9jYXRpb259IGhhcyBiZWVuIHJlcGxhY2VkIGJ5IGNvZGUgcnVubmluZyBvbiB0aGUgcmVkaXJlY3RVcmkgcGFnZS5gKTtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yUGlpKGBUaGUgJHtyZXNwb25zZUxvY2F0aW9ufSBkZXRlY3RlZCBpczogJHtyZXNwb25zZVN0cmluZ31gKTtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcihoYXNoRG9lc05vdENvbnRhaW5Lbm93blByb3BlcnRpZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzZXJ2ZXJQYXJhbXM7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludGVyYWN0aW9uIHR5cGUgdGhhdCB0aGUgcmVzcG9uc2Ugb2JqZWN0IGJlbG9uZ3MgdG9cclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlSW50ZXJhY3Rpb25UeXBlKHJlc3BvbnNlLCBicm93c2VyQ3J5cHRvLCBpbnRlcmFjdGlvblR5cGUpIHtcclxuICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVCcm93c2VyQXV0aEVycm9yKG5vU3RhdGVJbkhhc2gpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGxhdGZvcm1TdGF0ZU9iaiA9IGV4dHJhY3RCcm93c2VyUmVxdWVzdFN0YXRlKGJyb3dzZXJDcnlwdG8sIHJlc3BvbnNlLnN0YXRlKTtcclxuICAgIGlmICghcGxhdGZvcm1TdGF0ZU9iaikge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IodW5hYmxlVG9QYXJzZVN0YXRlKTtcclxuICAgIH1cclxuICAgIGlmIChwbGF0Zm9ybVN0YXRlT2JqLmludGVyYWN0aW9uVHlwZSAhPT0gaW50ZXJhY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQnJvd3NlckF1dGhFcnJvcihzdGF0ZUludGVyYWN0aW9uVHlwZU1pc21hdGNoKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBkZXNlcmlhbGl6ZVJlc3BvbnNlLCB2YWxpZGF0ZUludGVyYWN0aW9uVHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVzcG9uc2VIYW5kbGVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJVcmxVdGlscyIsImNyZWF0ZUJyb3dzZXJBdXRoRXJyb3IiLCJleHRyYWN0QnJvd3NlclJlcXVlc3RTdGF0ZSIsImhhc2hFbXB0eUVycm9yIiwiaGFzaERvZXNOb3RDb250YWluS25vd25Qcm9wZXJ0aWVzIiwibm9TdGF0ZUluSGFzaCIsInVuYWJsZVRvUGFyc2VTdGF0ZSIsInN0YXRlSW50ZXJhY3Rpb25UeXBlTWlzbWF0Y2giLCJkZXNlcmlhbGl6ZVJlc3BvbnNlIiwicmVzcG9uc2VTdHJpbmciLCJyZXNwb25zZUxvY2F0aW9uIiwibG9nZ2VyIiwic2VydmVyUGFyYW1zIiwiZ2V0RGVzZXJpYWxpemVkUmVzcG9uc2UiLCJzdHJpcExlYWRpbmdIYXNoT3JRdWVyeSIsImVycm9yIiwiZXJyb3JQaWkiLCJ2YWxpZGF0ZUludGVyYWN0aW9uVHlwZSIsInJlc3BvbnNlIiwiYnJvd3NlckNyeXB0byIsImludGVyYWN0aW9uVHlwZSIsInN0YXRlIiwicGxhdGZvcm1TdGF0ZU9iaiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/response/ResponseHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiId: () => (/* binding */ ApiId),\n/* harmony export */   BROWSER_PERF_ENABLED_KEY: () => (/* binding */ BROWSER_PERF_ENABLED_KEY),\n/* harmony export */   BrowserCacheLocation: () => (/* binding */ BrowserCacheLocation),\n/* harmony export */   BrowserConstants: () => (/* binding */ BrowserConstants),\n/* harmony export */   CacheLookupPolicy: () => (/* binding */ CacheLookupPolicy),\n/* harmony export */   DB_NAME: () => (/* binding */ DB_NAME),\n/* harmony export */   DB_TABLE_NAME: () => (/* binding */ DB_TABLE_NAME),\n/* harmony export */   DB_VERSION: () => (/* binding */ DB_VERSION),\n/* harmony export */   DEFAULT_REQUEST: () => (/* binding */ DEFAULT_REQUEST),\n/* harmony export */   HTTP_REQUEST_TYPE: () => (/* binding */ HTTP_REQUEST_TYPE),\n/* harmony export */   InMemoryCacheKeys: () => (/* binding */ InMemoryCacheKeys),\n/* harmony export */   InteractionStatus: () => (/* binding */ InteractionStatus),\n/* harmony export */   InteractionType: () => (/* binding */ InteractionType),\n/* harmony export */   KEY_FORMAT_JWK: () => (/* binding */ KEY_FORMAT_JWK),\n/* harmony export */   LOG_LEVEL_CACHE_KEY: () => (/* binding */ LOG_LEVEL_CACHE_KEY),\n/* harmony export */   LOG_PII_CACHE_KEY: () => (/* binding */ LOG_PII_CACHE_KEY),\n/* harmony export */   NativeConstants: () => (/* binding */ NativeConstants),\n/* harmony export */   NativeExtensionMethod: () => (/* binding */ NativeExtensionMethod),\n/* harmony export */   StaticCacheKeys: () => (/* binding */ StaticCacheKeys),\n/* harmony export */   TemporaryCacheKeys: () => (/* binding */ TemporaryCacheKeys),\n/* harmony export */   WrapperSKU: () => (/* binding */ WrapperSKU),\n/* harmony export */   iFrameRenewalPolicies: () => (/* binding */ iFrameRenewalPolicies)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Constants\r\n */ const BrowserConstants = {\n    /**\r\n     * Interaction in progress cache value\r\n     */ INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n    /**\r\n     * Invalid grant error code\r\n     */ INVALID_GRANT_ERROR: \"invalid_grant\",\n    /**\r\n     * Default popup window width\r\n     */ POPUP_WIDTH: 483,\n    /**\r\n     * Default popup window height\r\n     */ POPUP_HEIGHT: 600,\n    /**\r\n     * Name of the popup window starts with\r\n     */ POPUP_NAME_PREFIX: \"msal\",\n    /**\r\n     * Default popup monitor poll interval in milliseconds\r\n     */ DEFAULT_POLL_INTERVAL_MS: 30,\n    /**\r\n     * Msal-browser SKU\r\n     */ MSAL_SKU: \"msal.js.browser\"\n};\nconst NativeConstants = {\n    CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n    PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\",\n    MATS_TELEMETRY: \"MATS\"\n};\nconst NativeExtensionMethod = {\n    HandshakeRequest: \"Handshake\",\n    HandshakeResponse: \"HandshakeResponse\",\n    GetToken: \"GetToken\",\n    Response: \"Response\"\n};\nconst BrowserCacheLocation = {\n    LocalStorage: \"localStorage\",\n    SessionStorage: \"sessionStorage\",\n    MemoryStorage: \"memoryStorage\"\n};\n/**\r\n * HTTP Request types supported by MSAL.\r\n */ const HTTP_REQUEST_TYPE = {\n    GET: \"GET\",\n    POST: \"POST\"\n};\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */ const TemporaryCacheKeys = {\n    AUTHORITY: \"authority\",\n    ACQUIRE_TOKEN_ACCOUNT: \"acquireToken.account\",\n    SESSION_STATE: \"session.state\",\n    REQUEST_STATE: \"request.state\",\n    NONCE_IDTOKEN: \"nonce.id_token\",\n    ORIGIN_URI: \"request.origin\",\n    RENEW_STATUS: \"token.renew.status\",\n    URL_HASH: \"urlHash\",\n    REQUEST_PARAMS: \"request.params\",\n    SCOPES: \"scopes\",\n    INTERACTION_STATUS_KEY: \"interaction.status\",\n    CCS_CREDENTIAL: \"ccs.credential\",\n    CORRELATION_ID: \"request.correlationId\",\n    NATIVE_REQUEST: \"request.native\",\n    REDIRECT_CONTEXT: \"request.redirect.context\"\n};\nconst StaticCacheKeys = {\n    ACCOUNT_KEYS: \"msal.account.keys\",\n    TOKEN_KEYS: \"msal.token.keys\"\n};\n/**\r\n * Cache keys stored in-memory\r\n */ const InMemoryCacheKeys = {\n    WRAPPER_SKU: \"wrapper.sku\",\n    WRAPPER_VER: \"wrapper.version\"\n};\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */ const ApiId = {\n    acquireTokenRedirect: 861,\n    acquireTokenPopup: 862,\n    ssoSilent: 863,\n    acquireTokenSilent_authCode: 864,\n    handleRedirectPromise: 865,\n    acquireTokenByCode: 866,\n    acquireTokenSilent_silentFlow: 61,\n    logout: 961,\n    logoutPopup: 962\n};\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */ var InteractionType;\n(function(InteractionType) {\n    InteractionType[\"Redirect\"] = \"redirect\";\n    InteractionType[\"Popup\"] = \"popup\";\n    InteractionType[\"Silent\"] = \"silent\";\n    InteractionType[\"None\"] = \"none\";\n})(InteractionType || (InteractionType = {}));\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */ const InteractionStatus = {\n    /**\r\n     * Initial status before interaction occurs\r\n     */ Startup: \"startup\",\n    /**\r\n     * Status set when all login calls occuring\r\n     */ Login: \"login\",\n    /**\r\n     * Status set when logout call occuring\r\n     */ Logout: \"logout\",\n    /**\r\n     * Status set for acquireToken calls\r\n     */ AcquireToken: \"acquireToken\",\n    /**\r\n     * Status set for ssoSilent calls\r\n     */ SsoSilent: \"ssoSilent\",\n    /**\r\n     * Status set when handleRedirect in progress\r\n     */ HandleRedirect: \"handleRedirect\",\n    /**\r\n     * Status set when interaction is complete\r\n     */ None: \"none\"\n};\nconst DEFAULT_REQUEST = {\n    scopes: _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */ const KEY_FORMAT_JWK = \"jwk\";\n// Supported wrapper SKUs\nconst WrapperSKU = {\n    React: \"@azure/msal-react\",\n    Angular: \"@azure/msal-angular\"\n};\n// DatabaseStorage Constants\nconst DB_NAME = \"msal.db\";\nconst DB_VERSION = 1;\nconst DB_TABLE_NAME = `${DB_NAME}.keys`;\nconst CacheLookupPolicy = {\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired\r\n     * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token\r\n     * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.\r\n     */ Default: 0,\n    /*\r\n     * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or\r\n     * refresh tokens.\r\n     */ AccessToken: 1,\n    /*\r\n     * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or\r\n     * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it\r\n     * will not be renewed and acquireTokenSilent will fail.\r\n     */ AccessTokenAndRefreshToken: 2,\n    /*\r\n     * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to\r\n     * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be\r\n     * renewed and acquireTokenSilent will fail.\r\n     */ RefreshToken: 3,\n    /*\r\n     * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the\r\n     * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to\r\n     * setting \"forceRefresh: true\".\r\n     */ RefreshTokenAndNetwork: 4,\n    /*\r\n     * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will\r\n     * always fail if 3rd party cookies are blocked by the browser.\r\n     */ Skip: 5\n};\nconst iFrameRenewalPolicies = [\n    CacheLookupPolicy.Default,\n    CacheLookupPolicy.Skip,\n    CacheLookupPolicy.RefreshTokenAndNetwork\n];\nconst LOG_LEVEL_CACHE_KEY = \"msal.browser.log.level\";\nconst LOG_PII_CACHE_KEY = \"msal.browser.log.pii\";\nconst BROWSER_PERF_ENABLED_KEY = \"msal.browser.performance.enabled\";\n //# sourceMappingURL=BrowserConstants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractBrowserRequestState: () => (/* binding */ extractBrowserRequestState)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Extracts the BrowserStateObject from the state string.\r\n * @param browserCrypto\r\n * @param state\r\n */ function extractBrowserRequestState(browserCrypto, state) {\n    if (!state) {\n        return null;\n    }\n    try {\n        const requestStateObj = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.ProtocolUtils.parseRequestState(browserCrypto, state);\n        return requestStateObj.libraryState.meta;\n    } catch (e) {\n        throw (0,_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n    }\n}\n //# sourceMappingURL=BrowserProtocolUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtYnJvd3Nlci9kaXN0L3V0aWxzL0Jyb3dzZXJQcm90b2NvbFV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3dHO0FBRXhHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTRywyQkFBMkJDLGFBQWEsRUFBRUMsS0FBSztJQUNwRCxJQUFJLENBQUNBLE9BQU87UUFDUixPQUFPO0lBQ1g7SUFDQSxJQUFJO1FBQ0EsTUFBTUMsa0JBQWtCTixxRUFBYUEsQ0FBQ08saUJBQWlCLENBQUNILGVBQWVDO1FBQ3ZFLE9BQU9DLGdCQUFnQkUsWUFBWSxDQUFDQyxJQUFJO0lBQzVDLEVBQ0EsT0FBT0MsR0FBRztRQUNOLE1BQU1ULGlGQUFxQkEsQ0FBQ0Msb0VBQWlDO0lBQ2pFO0FBQ0o7QUFFc0MsQ0FDdEMsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWJyb3dzZXIvZGlzdC91dGlscy9Ccm93c2VyUHJvdG9jb2xVdGlscy5tanM/MjFmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtYnJvd3NlciB2My4yOC4wIDIwMjQtMTItMTIgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IFByb3RvY29sVXRpbHMsIGNyZWF0ZUNsaWVudEF1dGhFcnJvciwgQ2xpZW50QXV0aEVycm9yQ29kZXMgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vYnJvd3Nlcic7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXh0cmFjdHMgdGhlIEJyb3dzZXJTdGF0ZU9iamVjdCBmcm9tIHRoZSBzdGF0ZSBzdHJpbmcuXHJcbiAqIEBwYXJhbSBicm93c2VyQ3J5cHRvXHJcbiAqIEBwYXJhbSBzdGF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdEJyb3dzZXJSZXF1ZXN0U3RhdGUoYnJvd3NlckNyeXB0bywgc3RhdGUpIHtcclxuICAgIGlmICghc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdFN0YXRlT2JqID0gUHJvdG9jb2xVdGlscy5wYXJzZVJlcXVlc3RTdGF0ZShicm93c2VyQ3J5cHRvLCBzdGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RTdGF0ZU9iai5saWJyYXJ5U3RhdGUubWV0YTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKENsaWVudEF1dGhFcnJvckNvZGVzLmludmFsaWRTdGF0ZSk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgZXh0cmFjdEJyb3dzZXJSZXF1ZXN0U3RhdGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJyb3dzZXJQcm90b2NvbFV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJQcm90b2NvbFV0aWxzIiwiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwiQ2xpZW50QXV0aEVycm9yQ29kZXMiLCJleHRyYWN0QnJvd3NlclJlcXVlc3RTdGF0ZSIsImJyb3dzZXJDcnlwdG8iLCJzdGF0ZSIsInJlcXVlc3RTdGF0ZU9iaiIsInBhcnNlUmVxdWVzdFN0YXRlIiwibGlicmFyeVN0YXRlIiwibWV0YSIsImUiLCJpbnZhbGlkU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserProtocolUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockAPICallsBeforeInitialize: () => (/* binding */ blockAPICallsBeforeInitialize),\n/* harmony export */   blockAcquireTokenInPopups: () => (/* binding */ blockAcquireTokenInPopups),\n/* harmony export */   blockNonBrowserEnvironment: () => (/* binding */ blockNonBrowserEnvironment),\n/* harmony export */   blockRedirectInIframe: () => (/* binding */ blockRedirectInIframe),\n/* harmony export */   blockReloadInHiddenIframes: () => (/* binding */ blockReloadInHiddenIframes),\n/* harmony export */   clearHash: () => (/* binding */ clearHash),\n/* harmony export */   createGuid: () => (/* binding */ createGuid),\n/* harmony export */   getCurrentUri: () => (/* binding */ getCurrentUri),\n/* harmony export */   getHomepage: () => (/* binding */ getHomepage),\n/* harmony export */   invoke: () => (/* reexport safe */ _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.invoke),\n/* harmony export */   invokeAsync: () => (/* reexport safe */ _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__.invokeAsync),\n/* harmony export */   isInIframe: () => (/* binding */ isInIframe),\n/* harmony export */   isInPopup: () => (/* binding */ isInPopup),\n/* harmony export */   preconnect: () => (/* binding */ preconnect),\n/* harmony export */   preflightCheck: () => (/* binding */ preflightCheck),\n/* harmony export */   redirectPreflightCheck: () => (/* binding */ redirectPreflightCheck),\n/* harmony export */   replaceHash: () => (/* binding */ replaceHash)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/browser */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/BrowserAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthError.mjs\");\n/* harmony import */ var _BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BrowserConstants.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserConstants.mjs\");\n/* harmony import */ var _crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/BrowserCrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/crypto/BrowserCrypto.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthError.mjs\");\n/* harmony import */ var _error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/BrowserAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserAuthErrorCodes.mjs\");\n/* harmony import */ var _error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/BrowserConfigurationAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-browser/dist/error/BrowserConfigurationAuthErrorCodes.mjs\");\n/*! @azure/msal-browser v3.28.0 2024-12-12 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Clears hash from window url.\r\n */ function clearHash(contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = \"\";\n    if (typeof contentWindow.history.replaceState === \"function\") {\n        // Full removes \"#\" from url\n        contentWindow.history.replaceState(null, \"\", `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\n    }\n}\n/**\r\n * Replaces current hash with hash from provided url\r\n */ function replaceHash(url) {\n    const urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n}\n/**\r\n * Returns boolean of whether the current window is in an iframe or not.\r\n */ function isInIframe() {\n    return window.parent !== window;\n}\n/**\r\n * Returns boolean of whether or not the current window is a popup opened by msal\r\n */ function isInPopup() {\n    return  false && 0;\n}\n// #endregion\n/**\r\n * Returns current window URL as redirect uri\r\n */ function getCurrentUri() {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n}\n/**\r\n * Gets the homepage url for the current window location.\r\n */ function getHomepage() {\n    const currentUrl = new _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.UrlString(window.location.href);\n    const urlComponents = currentUrl.getUrlComponents();\n    return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\n}\n/**\r\n * Throws error if we have completed an auth and are\r\n * attempting another auth request inside an iframe.\r\n */ function blockReloadInHiddenIframes() {\n    const isResponseHash = _azure_msal_common_browser__WEBPACK_IMPORTED_MODULE_1__.UrlString.hashContainsKnownProperties(window.location.hash);\n    // return an error if called from the hidden iframe created by the msal js silent calls\n    if (isResponseHash && isInIframe()) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.blockIframeReload);\n    }\n}\n/**\r\n * Block redirect operations in iframes unless explicitly allowed\r\n * @param interactionType Interaction type for the request\r\n * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n */ function blockRedirectInIframe(allowRedirectInIframe) {\n    if (isInIframe() && !allowRedirectInIframe) {\n        // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.redirectInIframe);\n    }\n}\n/**\r\n * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n */ function blockAcquireTokenInPopups() {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (isInPopup()) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.blockNestedPopups);\n    }\n}\n/**\r\n * Throws error if token requests are made in non-browser environment\r\n * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n */ function blockNonBrowserEnvironment() {\n    if (true) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.nonBrowserEnvironment);\n    }\n}\n/**\r\n * Throws error if initialize hasn't been called\r\n * @param initialized\r\n */ function blockAPICallsBeforeInitialize(initialized) {\n    if (!initialized) {\n        throw (0,_error_BrowserAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createBrowserAuthError)(_error_BrowserAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.uninitializedPublicClientApplication);\n    }\n}\n/**\r\n * Helper to validate app environment before making an auth request\r\n * @param initialized\r\n */ function preflightCheck(initialized) {\n    // Block request if not in browser environment\n    blockNonBrowserEnvironment();\n    // Block auth requests inside a hidden iframe\n    blockReloadInHiddenIframes();\n    // Block redirectUri opened in a popup from calling MSAL APIs\n    blockAcquireTokenInPopups();\n    // Block token acquisition before initialize has been called\n    blockAPICallsBeforeInitialize(initialized);\n}\n/**\r\n * Helper to validate app enviornment before making redirect request\r\n * @param initialized\r\n * @param config\r\n */ function redirectPreflightCheck(initialized, config) {\n    preflightCheck(initialized);\n    blockRedirectInIframe(config.system.allowRedirectInIframe);\n    // Block redirects if memory storage is enabled but storeAuthStateInCookie is not\n    if (config.cache.cacheLocation === _BrowserConstants_mjs__WEBPACK_IMPORTED_MODULE_4__.BrowserCacheLocation.MemoryStorage && !config.cache.storeAuthStateInCookie) {\n        throw (0,_error_BrowserConfigurationAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.createBrowserConfigurationAuthError)(_error_BrowserConfigurationAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.inMemRedirectUnavailable);\n    }\n}\n/**\r\n * Adds a preconnect link element to the header which begins DNS resolution and SSL connection in anticipation of the /token request\r\n * @param loginDomain Authority domain, including https protocol e.g. https://login.microsoftonline.com\r\n * @returns\r\n */ function preconnect(authority) {\n    const link = document.createElement(\"link\");\n    link.rel = \"preconnect\";\n    link.href = new URL(authority).origin;\n    link.crossOrigin = \"anonymous\";\n    document.head.appendChild(link);\n    // The browser will close connection if not used within a few seconds, remove element from the header after 10s\n    window.setTimeout(()=>{\n        try {\n            document.head.removeChild(link);\n        } catch  {}\n    }, 10000); // 10s Timeout\n}\n/**\r\n * Wrapper function that creates a UUID v7 from the current timestamp.\r\n * @returns {string}\r\n */ function createGuid() {\n    return (0,_crypto_BrowserCrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.createNewGuid)();\n}\n //# sourceMappingURL=BrowserUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-browser/dist/utils/BrowserUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildTenantProfile: () => (/* binding */ buildTenantProfile),\n/* harmony export */   tenantIdMatchesHomeTenant: () => (/* binding */ tenantIdMatchesHomeTenant),\n/* harmony export */   updateAccountTenantProfileData: () => (/* binding */ updateAccountTenantProfileData)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */ function tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\n    return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(\".\")[1];\n}\n/**\r\n * Build tenant profile\r\n * @param homeAccountId - Home account identifier for this account object\r\n * @param localAccountId - Local account identifer for this account object\r\n * @param tenantId - Full tenant or organizational id that this account belongs to\r\n * @param idTokenClaims - Claims from the ID token\r\n * @returns\r\n */ function buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {\n    if (idTokenClaims) {\n        const { oid, sub, tid, name, tfp, acr } = idTokenClaims;\n        /**\r\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n         */ const tenantId = tid || tfp || acr || \"\";\n        return {\n            tenantId: tenantId,\n            localAccountId: oid || sub || \"\",\n            name: name,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n        };\n    } else {\n        return {\n            tenantId,\n            localAccountId,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n        };\n    }\n}\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */ function updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {\n    let updatedAccountInfo = baseAccountInfo;\n    // Tenant Profile overrides passed in account info\n    if (tenantProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\n        updatedAccountInfo = {\n            ...baseAccountInfo,\n            ...tenantProfileOverride\n        };\n    }\n    // ID token claims override passed in account info and tenant profile\n    if (idTokenClaims) {\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...claimsSourcedTenantProfile } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);\n        updatedAccountInfo = {\n            ...updatedAccountInfo,\n            ...claimsSourcedTenantProfile,\n            idTokenClaims: idTokenClaims,\n            idToken: idTokenSecret\n        };\n        return updatedAccountInfo;\n    }\n    return updatedAccountInfo;\n}\n //# sourceMappingURL=AccountInfo.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BY2NvdW50SW5mby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7Ozs7O0NBS0MsR0FDRCxTQUFTQSwwQkFBMEJDLFFBQVEsRUFBRUMsYUFBYTtJQUN0RCxPQUFRLENBQUMsQ0FBQ0QsWUFDTixDQUFDLENBQUNDLGlCQUNGRCxhQUFhQyxjQUFjQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDaEQ7QUFDQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsbUJBQW1CRixhQUFhLEVBQUVHLGNBQWMsRUFBRUosUUFBUSxFQUFFSyxhQUFhO0lBQzlFLElBQUlBLGVBQWU7UUFDZixNQUFNLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR047UUFDMUM7Ozs7O1NBS0MsR0FDRCxNQUFNTCxXQUFXUSxPQUFPRSxPQUFPQyxPQUFPO1FBQ3RDLE9BQU87WUFDSFgsVUFBVUE7WUFDVkksZ0JBQWdCRSxPQUFPQyxPQUFPO1lBQzlCRSxNQUFNQTtZQUNORyxjQUFjYiwwQkFBMEJDLFVBQVVDO1FBQ3REO0lBQ0osT0FDSztRQUNELE9BQU87WUFDSEQ7WUFDQUk7WUFDQVEsY0FBY2IsMEJBQTBCQyxVQUFVQztRQUN0RDtJQUNKO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNZLCtCQUErQkMsZUFBZSxFQUFFQyxhQUFhLEVBQUVWLGFBQWEsRUFBRVcsYUFBYTtJQUNoRyxJQUFJQyxxQkFBcUJIO0lBQ3pCLGtEQUFrRDtJQUNsRCxJQUFJQyxlQUFlO1FBQ2YsNkRBQTZEO1FBQzdELE1BQU0sRUFBRUgsWUFBWSxFQUFFLEdBQUdNLHVCQUF1QixHQUFHSDtRQUNuREUscUJBQXFCO1lBQUUsR0FBR0gsZUFBZTtZQUFFLEdBQUdJLHFCQUFxQjtRQUFDO0lBQ3hFO0lBQ0EscUVBQXFFO0lBQ3JFLElBQUliLGVBQWU7UUFDZixxR0FBcUc7UUFDckcsNkRBQTZEO1FBQzdELE1BQU0sRUFBRU8sWUFBWSxFQUFFLEdBQUdPLDRCQUE0QixHQUFHaEIsbUJBQW1CVyxnQkFBZ0JiLGFBQWEsRUFBRWEsZ0JBQWdCVixjQUFjLEVBQUVVLGdCQUFnQmQsUUFBUSxFQUFFSztRQUNwS1kscUJBQXFCO1lBQ2pCLEdBQUdBLGtCQUFrQjtZQUNyQixHQUFHRSwwQkFBMEI7WUFDN0JkLGVBQWVBO1lBQ2ZlLFNBQVNKO1FBQ2I7UUFDQSxPQUFPQztJQUNYO0lBQ0EsT0FBT0E7QUFDWDtBQUV5RixDQUN6Rix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BY2NvdW50SW5mby5tanM/YWRmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRlbmFudElkIG1hdGNoZXMgdGhlIHV0aWQgcG9ydGlvbiBvZiBob21lQWNjb3VudElkXHJcbiAqIEBwYXJhbSB0ZW5hbnRJZFxyXG4gKiBAcGFyYW0gaG9tZUFjY291bnRJZFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gdGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCh0ZW5hbnRJZCwgaG9tZUFjY291bnRJZCkge1xyXG4gICAgcmV0dXJuICghIXRlbmFudElkICYmXHJcbiAgICAgICAgISFob21lQWNjb3VudElkICYmXHJcbiAgICAgICAgdGVuYW50SWQgPT09IGhvbWVBY2NvdW50SWQuc3BsaXQoXCIuXCIpWzFdKTtcclxufVxyXG4vKipcclxuICogQnVpbGQgdGVuYW50IHByb2ZpbGVcclxuICogQHBhcmFtIGhvbWVBY2NvdW50SWQgLSBIb21lIGFjY291bnQgaWRlbnRpZmllciBmb3IgdGhpcyBhY2NvdW50IG9iamVjdFxyXG4gKiBAcGFyYW0gbG9jYWxBY2NvdW50SWQgLSBMb2NhbCBhY2NvdW50IGlkZW50aWZlciBmb3IgdGhpcyBhY2NvdW50IG9iamVjdFxyXG4gKiBAcGFyYW0gdGVuYW50SWQgLSBGdWxsIHRlbmFudCBvciBvcmdhbml6YXRpb25hbCBpZCB0aGF0IHRoaXMgYWNjb3VudCBiZWxvbmdzIHRvXHJcbiAqIEBwYXJhbSBpZFRva2VuQ2xhaW1zIC0gQ2xhaW1zIGZyb20gdGhlIElEIHRva2VuXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBidWlsZFRlbmFudFByb2ZpbGUoaG9tZUFjY291bnRJZCwgbG9jYWxBY2NvdW50SWQsIHRlbmFudElkLCBpZFRva2VuQ2xhaW1zKSB7XHJcbiAgICBpZiAoaWRUb2tlbkNsYWltcykge1xyXG4gICAgICAgIGNvbnN0IHsgb2lkLCBzdWIsIHRpZCwgbmFtZSwgdGZwLCBhY3IgfSA9IGlkVG9rZW5DbGFpbXM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2luY2UgdGhlcmUgaXMgbm8gd2F5IHRvIGRldGVybWluZSBpZiB0aGUgYXV0aG9yaXR5IGlzIEFBRCBvciBCMkMsIHdlIGV4aGF1c3QgYWxsIHRoZSBwb3NzaWJsZSBjbGFpbXMgdGhhdCBjYW4gc2VydmUgYXMgdGVuYW50IElEIHdpdGggdGhlIGZvbGxvd2luZyBwcmVjZWRlbmNlOlxyXG4gICAgICAgICAqIHRpZCAtIFRlbmFudElEIGNsYWltIHRoYXQgaWRlbnRpZmllcyB0aGUgdGVuYW50IHRoYXQgaXNzdWVkIHRoZSB0b2tlbiBpbiBBQUQuIEV4cGVjdGVkIGluIGFsbCBBQUQgSUQgdG9rZW5zLCBub3QgcHJlc2VudCBpbiBCMkMgSUQgVG9rZW5zLlxyXG4gICAgICAgICAqIHRmcCAtIFRydXN0IEZyYW1ld29yayBQb2xpY3kgY2xhaW0gdGhhdCBpZGVudGlmaWVzIHRoZSBwb2xpY3kgdGhhdCB3YXMgdXNlZCB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXIuIEZ1bmN0aW9ucyBhcyB0ZW5hbnQgZm9yIEIyQyBzY2VuYXJpb3MuXHJcbiAgICAgICAgICogYWNyIC0gQXV0aGVudGljYXRpb24gQ29udGV4dCBDbGFzcyBSZWZlcmVuY2UgY2xhaW0gdXNlZCBvbmx5IHdpdGggb2xkZXIgQjJDIHBvbGljaWVzLiBGYWxsYmFjayBpbiBjYXNlIHRmcCBpcyBub3QgcHJlc2VudCwgYnV0IGxpa2VseSB3b24ndCBiZSBwcmVzZW50IGFueXdheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCB0ZW5hbnRJZCA9IHRpZCB8fCB0ZnAgfHwgYWNyIHx8IFwiXCI7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGVuYW50SWQ6IHRlbmFudElkLFxyXG4gICAgICAgICAgICBsb2NhbEFjY291bnRJZDogb2lkIHx8IHN1YiB8fCBcIlwiLFxyXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICBpc0hvbWVUZW5hbnQ6IHRlbmFudElkTWF0Y2hlc0hvbWVUZW5hbnQodGVuYW50SWQsIGhvbWVBY2NvdW50SWQpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0ZW5hbnRJZCxcclxuICAgICAgICAgICAgbG9jYWxBY2NvdW50SWQsXHJcbiAgICAgICAgICAgIGlzSG9tZVRlbmFudDogdGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCh0ZW5hbnRJZCwgaG9tZUFjY291bnRJZCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmVwbGFjZXMgYWNjb3VudCBpbmZvIHRoYXQgdmFyaWVzIGJ5IHRlbmFudCBwcm9maWxlIHNvdXJjZWQgZnJvbSB0aGUgSUQgdG9rZW4gY2xhaW1zIHBhc3NlZCBpbiB3aXRoIHRoZSB0ZW5hbnQtc3BlY2lmaWMgYWNjb3VudCBpbmZvXHJcbiAqIEBwYXJhbSBiYXNlQWNjb3VudEluZm9cclxuICogQHBhcmFtIGlkVG9rZW5DbGFpbXNcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUFjY291bnRUZW5hbnRQcm9maWxlRGF0YShiYXNlQWNjb3VudEluZm8sIHRlbmFudFByb2ZpbGUsIGlkVG9rZW5DbGFpbXMsIGlkVG9rZW5TZWNyZXQpIHtcclxuICAgIGxldCB1cGRhdGVkQWNjb3VudEluZm8gPSBiYXNlQWNjb3VudEluZm87XHJcbiAgICAvLyBUZW5hbnQgUHJvZmlsZSBvdmVycmlkZXMgcGFzc2VkIGluIGFjY291bnQgaW5mb1xyXG4gICAgaWYgKHRlbmFudFByb2ZpbGUpIHtcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICAgICAgY29uc3QgeyBpc0hvbWVUZW5hbnQsIC4uLnRlbmFudFByb2ZpbGVPdmVycmlkZSB9ID0gdGVuYW50UHJvZmlsZTtcclxuICAgICAgICB1cGRhdGVkQWNjb3VudEluZm8gPSB7IC4uLmJhc2VBY2NvdW50SW5mbywgLi4udGVuYW50UHJvZmlsZU92ZXJyaWRlIH07XHJcbiAgICB9XHJcbiAgICAvLyBJRCB0b2tlbiBjbGFpbXMgb3ZlcnJpZGUgcGFzc2VkIGluIGFjY291bnQgaW5mbyBhbmQgdGVuYW50IHByb2ZpbGVcclxuICAgIGlmIChpZFRva2VuQ2xhaW1zKSB7XHJcbiAgICAgICAgLy8gSWdub3JlIGlzSG9tZVRlbmFudCwgbG9naW5IaW50LCBhbmQgc2lkIHdoaWNoIGFyZSBwYXJ0IG9mIHRlbmFudCBwcm9maWxlIGJ1dCBub3QgYmFzZSBhY2NvdW50IGluZm9cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICAgICAgY29uc3QgeyBpc0hvbWVUZW5hbnQsIC4uLmNsYWltc1NvdXJjZWRUZW5hbnRQcm9maWxlIH0gPSBidWlsZFRlbmFudFByb2ZpbGUoYmFzZUFjY291bnRJbmZvLmhvbWVBY2NvdW50SWQsIGJhc2VBY2NvdW50SW5mby5sb2NhbEFjY291bnRJZCwgYmFzZUFjY291bnRJbmZvLnRlbmFudElkLCBpZFRva2VuQ2xhaW1zKTtcclxuICAgICAgICB1cGRhdGVkQWNjb3VudEluZm8gPSB7XHJcbiAgICAgICAgICAgIC4uLnVwZGF0ZWRBY2NvdW50SW5mbyxcclxuICAgICAgICAgICAgLi4uY2xhaW1zU291cmNlZFRlbmFudFByb2ZpbGUsXHJcbiAgICAgICAgICAgIGlkVG9rZW5DbGFpbXM6IGlkVG9rZW5DbGFpbXMsXHJcbiAgICAgICAgICAgIGlkVG9rZW46IGlkVG9rZW5TZWNyZXQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdXBkYXRlZEFjY291bnRJbmZvO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVwZGF0ZWRBY2NvdW50SW5mbztcclxufVxuXG5leHBvcnQgeyBidWlsZFRlbmFudFByb2ZpbGUsIHRlbmFudElkTWF0Y2hlc0hvbWVUZW5hbnQsIHVwZGF0ZUFjY291bnRUZW5hbnRQcm9maWxlRGF0YSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjb3VudEluZm8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbInRlbmFudElkTWF0Y2hlc0hvbWVUZW5hbnQiLCJ0ZW5hbnRJZCIsImhvbWVBY2NvdW50SWQiLCJzcGxpdCIsImJ1aWxkVGVuYW50UHJvZmlsZSIsImxvY2FsQWNjb3VudElkIiwiaWRUb2tlbkNsYWltcyIsIm9pZCIsInN1YiIsInRpZCIsIm5hbWUiLCJ0ZnAiLCJhY3IiLCJpc0hvbWVUZW5hbnQiLCJ1cGRhdGVBY2NvdW50VGVuYW50UHJvZmlsZURhdGEiLCJiYXNlQWNjb3VudEluZm8iLCJ0ZW5hbnRQcm9maWxlIiwiaWRUb2tlblNlY3JldCIsInVwZGF0ZWRBY2NvdW50SW5mbyIsInRlbmFudFByb2ZpbGVPdmVycmlkZSIsImNsYWltc1NvdXJjZWRUZW5hbnRQcm9maWxlIiwiaWRUb2tlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/AuthToken.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkMaxAge: () => (/* binding */ checkMaxAge),\n/* harmony export */   extractTokenClaims: () => (/* binding */ extractTokenClaims),\n/* harmony export */   getJWSPayload: () => (/* binding */ getJWSPayload)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Extract token by decoding the rawToken\r\n *\r\n * @param encodedToken\r\n */ function extractTokenClaims(encodedToken, base64Decode) {\n    const jswPayload = getJWSPayload(encodedToken);\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded);\n    } catch (err) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.tokenParsingError);\n    }\n}\n/**\r\n * decode a JWT\r\n *\r\n * @param authToken\r\n */ function getJWSPayload(authToken) {\n    if (!authToken) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nullOrEmptyToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.tokenParsingError);\n    }\n    /**\r\n     * const crackedToken = {\r\n     *  header: matches[1],\r\n     *  JWSPayload: matches[2],\r\n     *  JWSSig: matches[3],\r\n     * };\r\n     */ return matches[2];\n}\n/**\r\n * Determine if the token's max_age has transpired\r\n */ function checkMaxAge(authTime, maxAge) {\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */ const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.maxAgeTranspired);\n    }\n}\n //# sourceMappingURL=AuthToken.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BdXRoVG9rZW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3FFO0FBQ3FDO0FBRTFHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTSSxtQkFBbUJDLFlBQVksRUFBRUMsWUFBWTtJQUNsRCxNQUFNQyxhQUFhQyxjQUFjSDtJQUNqQyw0Q0FBNEM7SUFDNUMsSUFBSTtRQUNBLDREQUE0RDtRQUM1RCxNQUFNSSxnQkFBZ0JILGFBQWFDO1FBQ25DLE9BQU9HLEtBQUtDLEtBQUssQ0FBQ0Y7SUFDdEIsRUFDQSxPQUFPRyxLQUFLO1FBQ1IsTUFBTVosaUZBQXFCQSxDQUFDQyw4RUFBaUJBO0lBQ2pEO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU08sY0FBY0ssU0FBUztJQUM1QixJQUFJLENBQUNBLFdBQVc7UUFDWixNQUFNYixpRkFBcUJBLENBQUNFLDZFQUFnQkE7SUFDaEQ7SUFDQSxNQUFNWSxrQkFBa0I7SUFDeEIsTUFBTUMsVUFBVUQsZ0JBQWdCRSxJQUFJLENBQUNIO0lBQ3JDLElBQUksQ0FBQ0UsV0FBV0EsUUFBUUUsTUFBTSxHQUFHLEdBQUc7UUFDaEMsTUFBTWpCLGlGQUFxQkEsQ0FBQ0MsOEVBQWlCQTtJQUNqRDtJQUNBOzs7Ozs7S0FNQyxHQUNELE9BQU9jLE9BQU8sQ0FBQyxFQUFFO0FBQ3JCO0FBQ0E7O0NBRUMsR0FDRCxTQUFTRyxZQUFZQyxRQUFRLEVBQUVDLE1BQU07SUFDakM7Ozs7S0FJQyxHQUNELE1BQU1DLGlCQUFpQixRQUFRLCtCQUErQjtJQUM5RCxJQUFJRCxXQUFXLEtBQUtFLEtBQUtDLEdBQUcsS0FBS0YsaUJBQWlCRixXQUFXQyxRQUFRO1FBQ2pFLE1BQU1wQixpRkFBcUJBLENBQUNHLDZFQUFnQkE7SUFDaEQ7QUFDSjtBQUUwRCxDQUMxRCxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BdXRoVG9rZW4ubWpzPzdhZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IHRva2VuUGFyc2luZ0Vycm9yLCBudWxsT3JFbXB0eVRva2VuLCBtYXhBZ2VUcmFuc3BpcmVkIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFeHRyYWN0IHRva2VuIGJ5IGRlY29kaW5nIHRoZSByYXdUb2tlblxyXG4gKlxyXG4gKiBAcGFyYW0gZW5jb2RlZFRva2VuXHJcbiAqL1xyXG5mdW5jdGlvbiBleHRyYWN0VG9rZW5DbGFpbXMoZW5jb2RlZFRva2VuLCBiYXNlNjREZWNvZGUpIHtcclxuICAgIGNvbnN0IGpzd1BheWxvYWQgPSBnZXRKV1NQYXlsb2FkKGVuY29kZWRUb2tlbik7XHJcbiAgICAvLyB0b2tlbiB3aWxsIGJlIGRlY29kZWQgdG8gZ2V0IHRoZSB1c2VybmFtZVxyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBiYXNlNjREZWNvZGUoKSBzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgYW4gaXNzdWVcclxuICAgICAgICBjb25zdCBiYXNlNjREZWNvZGVkID0gYmFzZTY0RGVjb2RlKGpzd1BheWxvYWQpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGJhc2U2NERlY29kZWQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcih0b2tlblBhcnNpbmdFcnJvcik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIGRlY29kZSBhIEpXVFxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aFRva2VuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRKV1NQYXlsb2FkKGF1dGhUb2tlbikge1xyXG4gICAgaWYgKCFhdXRoVG9rZW4pIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobnVsbE9yRW1wdHlUb2tlbik7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0b2tlblBhcnRzUmVnZXggPSAvXihbXlxcLlxcc10qKVxcLihbXlxcLlxcc10rKVxcLihbXlxcLlxcc10qKSQvO1xyXG4gICAgY29uc3QgbWF0Y2hlcyA9IHRva2VuUGFydHNSZWdleC5leGVjKGF1dGhUb2tlbik7XHJcbiAgICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlcy5sZW5ndGggPCA0KSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKHRva2VuUGFyc2luZ0Vycm9yKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogY29uc3QgY3JhY2tlZFRva2VuID0ge1xyXG4gICAgICogIGhlYWRlcjogbWF0Y2hlc1sxXSxcclxuICAgICAqICBKV1NQYXlsb2FkOiBtYXRjaGVzWzJdLFxyXG4gICAgICogIEpXU1NpZzogbWF0Y2hlc1szXSxcclxuICAgICAqIH07XHJcbiAgICAgKi9cclxuICAgIHJldHVybiBtYXRjaGVzWzJdO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlcm1pbmUgaWYgdGhlIHRva2VuJ3MgbWF4X2FnZSBoYXMgdHJhbnNwaXJlZFxyXG4gKi9cclxuZnVuY3Rpb24gY2hlY2tNYXhBZ2UoYXV0aFRpbWUsIG1heEFnZSkge1xyXG4gICAgLypcclxuICAgICAqIHBlciBodHRwczovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNBdXRoUmVxdWVzdFxyXG4gICAgICogVG8gZm9yY2UgYW4gaW1tZWRpYXRlIHJlLWF1dGhlbnRpY2F0aW9uOiBJZiBhbiBhcHAgcmVxdWlyZXMgdGhhdCBhIHVzZXIgcmUtYXV0aGVudGljYXRlIHByaW9yIHRvIGFjY2VzcyxcclxuICAgICAqIHByb3ZpZGUgYSB2YWx1ZSBvZiAwIGZvciB0aGUgbWF4X2FnZSBwYXJhbWV0ZXIgYW5kIHRoZSBBUyB3aWxsIGZvcmNlIGEgZnJlc2ggbG9naW4uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IGZpdmVNaW51dGVTa2V3ID0gMzAwMDAwOyAvLyBmaXZlIG1pbnV0ZXMgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICBpZiAobWF4QWdlID09PSAwIHx8IERhdGUubm93KCkgLSBmaXZlTWludXRlU2tldyA+IGF1dGhUaW1lICsgbWF4QWdlKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1heEFnZVRyYW5zcGlyZWQpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IGNoZWNrTWF4QWdlLCBleHRyYWN0VG9rZW5DbGFpbXMsIGdldEpXU1BheWxvYWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1dGhUb2tlbi5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwidG9rZW5QYXJzaW5nRXJyb3IiLCJudWxsT3JFbXB0eVRva2VuIiwibWF4QWdlVHJhbnNwaXJlZCIsImV4dHJhY3RUb2tlbkNsYWltcyIsImVuY29kZWRUb2tlbiIsImJhc2U2NERlY29kZSIsImpzd1BheWxvYWQiLCJnZXRKV1NQYXlsb2FkIiwiYmFzZTY0RGVjb2RlZCIsIkpTT04iLCJwYXJzZSIsImVyciIsImF1dGhUb2tlbiIsInRva2VuUGFydHNSZWdleCIsIm1hdGNoZXMiLCJleGVjIiwibGVuZ3RoIiwiY2hlY2tNYXhBZ2UiLCJhdXRoVGltZSIsIm1heEFnZSIsImZpdmVNaW51dGVTa2V3IiwiRGF0ZSIsIm5vdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CcsCredentialType: () => (/* binding */ CcsCredentialType)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CcsCredentialType = {\n    HOME_ACCOUNT_ID: \"home_account_id\",\n    UPN: \"UPN\"\n};\n //# sourceMappingURL=CcsCredential.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DY3NDcmVkZW50aWFsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUEsb0JBQW9CO0lBQ3RCQyxpQkFBaUI7SUFDakJDLEtBQUs7QUFDVDtBQUU2QixDQUM3QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DY3NDcmVkZW50aWFsLm1qcz80NzU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IENjc0NyZWRlbnRpYWxUeXBlID0ge1xyXG4gICAgSE9NRV9BQ0NPVU5UX0lEOiBcImhvbWVfYWNjb3VudF9pZFwiLFxyXG4gICAgVVBOOiBcIlVQTlwiLFxyXG59O1xuXG5leHBvcnQgeyBDY3NDcmVkZW50aWFsVHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2NzQ3JlZGVudGlhbC5tanMubWFwXG4iXSwibmFtZXMiOlsiQ2NzQ3JlZGVudGlhbFR5cGUiLCJIT01FX0FDQ09VTlRfSUQiLCJVUE4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildClientInfo: () => (/* binding */ buildClientInfo),\n/* harmony export */   buildClientInfoFromHomeAccountId: () => (/* binding */ buildClientInfoFromHomeAccountId)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */ function buildClientInfo(rawClientInfo, base64Decode) {\n    if (!rawClientInfo) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoEmptyError);\n    }\n    try {\n        const decodedClientInfo = base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo);\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoDecodingError);\n    }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */ function buildClientInfoFromHomeAccountId(homeAccountId) {\n    if (!homeAccountId) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoDecodingError);\n    }\n    const clientInfoParts = homeAccountId.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Separators.CLIENT_INFO_SEPARATOR, 2);\n    return {\n        uid: clientInfoParts[0],\n        utid: clientInfoParts.length < 2 ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING : clientInfoParts[1]\n    };\n}\n //# sourceMappingURL=ClientInfo.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DbGllbnRJbmZvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNxRTtBQUNOO0FBQ21DO0FBRWxHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTSyxnQkFBZ0JDLGFBQWEsRUFBRUMsWUFBWTtJQUNoRCxJQUFJLENBQUNELGVBQWU7UUFDaEIsTUFBTU4saUZBQXFCQSxDQUFDRyxpRkFBb0JBO0lBQ3BEO0lBQ0EsSUFBSTtRQUNBLE1BQU1LLG9CQUFvQkQsYUFBYUQ7UUFDdkMsT0FBT0csS0FBS0MsS0FBSyxDQUFDRjtJQUN0QixFQUNBLE9BQU9HLEdBQUc7UUFDTixNQUFNWCxpRkFBcUJBLENBQUNJLG9GQUF1QkE7SUFDdkQ7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNRLGlDQUFpQ0MsYUFBYTtJQUNuRCxJQUFJLENBQUNBLGVBQWU7UUFDaEIsTUFBTWIsaUZBQXFCQSxDQUFDSSxvRkFBdUJBO0lBQ3ZEO0lBQ0EsTUFBTVUsa0JBQWtCRCxjQUFjRSxLQUFLLENBQUNkLDREQUFVQSxDQUFDZSxxQkFBcUIsRUFBRTtJQUM5RSxPQUFPO1FBQ0hDLEtBQUtILGVBQWUsQ0FBQyxFQUFFO1FBQ3ZCSSxNQUFNSixnQkFBZ0JLLE1BQU0sR0FBRyxJQUN6QmpCLDJEQUFTQSxDQUFDa0IsWUFBWSxHQUN0Qk4sZUFBZSxDQUFDLEVBQUU7SUFDNUI7QUFDSjtBQUU2RCxDQUM3RCx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DbGllbnRJbmZvLm1qcz8zZjUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50QXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBTZXBhcmF0b3JzLCBDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9Db25zdGFudHMubWpzJztcbmltcG9ydCB7IGNsaWVudEluZm9FbXB0eUVycm9yLCBjbGllbnRJbmZvRGVjb2RpbmdFcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRnVuY3Rpb24gdG8gYnVpbGQgYSBjbGllbnQgaW5mbyBvYmplY3QgZnJvbSBzZXJ2ZXIgY2xpZW50SW5mbyBzdHJpbmdcclxuICogQHBhcmFtIHJhd0NsaWVudEluZm9cclxuICogQHBhcmFtIGNyeXB0b1xyXG4gKi9cclxuZnVuY3Rpb24gYnVpbGRDbGllbnRJbmZvKHJhd0NsaWVudEluZm8sIGJhc2U2NERlY29kZSkge1xyXG4gICAgaWYgKCFyYXdDbGllbnRJbmZvKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKGNsaWVudEluZm9FbXB0eUVycm9yKTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGVjb2RlZENsaWVudEluZm8gPSBiYXNlNjREZWNvZGUocmF3Q2xpZW50SW5mbyk7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlZENsaWVudEluZm8pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoY2xpZW50SW5mb0RlY29kaW5nRXJyb3IpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBGdW5jdGlvbiB0byBidWlsZCBhIGNsaWVudCBpbmZvIG9iamVjdCBmcm9tIGNhY2hlZCBob21lQWNjb3VudElkIHN0cmluZ1xyXG4gKiBAcGFyYW0gaG9tZUFjY291bnRJZFxyXG4gKi9cclxuZnVuY3Rpb24gYnVpbGRDbGllbnRJbmZvRnJvbUhvbWVBY2NvdW50SWQoaG9tZUFjY291bnRJZCkge1xyXG4gICAgaWYgKCFob21lQWNjb3VudElkKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKGNsaWVudEluZm9EZWNvZGluZ0Vycm9yKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNsaWVudEluZm9QYXJ0cyA9IGhvbWVBY2NvdW50SWQuc3BsaXQoU2VwYXJhdG9ycy5DTElFTlRfSU5GT19TRVBBUkFUT1IsIDIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1aWQ6IGNsaWVudEluZm9QYXJ0c1swXSxcclxuICAgICAgICB1dGlkOiBjbGllbnRJbmZvUGFydHMubGVuZ3RoIDwgMlxyXG4gICAgICAgICAgICA/IENvbnN0YW50cy5FTVBUWV9TVFJJTkdcclxuICAgICAgICAgICAgOiBjbGllbnRJbmZvUGFydHNbMV0sXHJcbiAgICB9O1xyXG59XG5cbmV4cG9ydCB7IGJ1aWxkQ2xpZW50SW5mbywgYnVpbGRDbGllbnRJbmZvRnJvbUhvbWVBY2NvdW50SWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsaWVudEluZm8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsIlNlcGFyYXRvcnMiLCJDb25zdGFudHMiLCJjbGllbnRJbmZvRW1wdHlFcnJvciIsImNsaWVudEluZm9EZWNvZGluZ0Vycm9yIiwiYnVpbGRDbGllbnRJbmZvIiwicmF3Q2xpZW50SW5mbyIsImJhc2U2NERlY29kZSIsImRlY29kZWRDbGllbnRJbmZvIiwiSlNPTiIsInBhcnNlIiwiZSIsImJ1aWxkQ2xpZW50SW5mb0Zyb21Ib21lQWNjb3VudElkIiwiaG9tZUFjY291bnRJZCIsImNsaWVudEluZm9QYXJ0cyIsInNwbGl0IiwiQ0xJRU5UX0lORk9fU0VQQVJBVE9SIiwidWlkIiwidXRpZCIsImxlbmd0aCIsIkVNUFRZX1NUUklORyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTenantIdFromIdTokenClaims: () => (/* binding */ getTenantIdFromIdTokenClaims)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */ function getTenantIdFromIdTokenClaims(idTokenClaims) {\n    if (idTokenClaims) {\n        const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\n        return tenantId || null;\n    }\n    return null;\n}\n //# sourceMappingURL=TokenClaims.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9Ub2tlbkNsYWltcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0EsNkJBQTZCQyxhQUFhO0lBQy9DLElBQUlBLGVBQWU7UUFDZixNQUFNQyxXQUFXRCxjQUFjRSxHQUFHLElBQUlGLGNBQWNHLEdBQUcsSUFBSUgsY0FBY0ksR0FBRztRQUM1RSxPQUFPSCxZQUFZO0lBQ3ZCO0lBQ0EsT0FBTztBQUNYO0FBRXdDLENBQ3hDLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L1Rva2VuQ2xhaW1zLm1qcz9hZjMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBHZXRzIHRlbmFudElkIGZyb20gYXZhaWxhYmxlIElEIHRva2VuIGNsYWltcyB0byBzZXQgYXMgY3JlZGVudGlhbCByZWFsbSB3aXRoIHRoZSBmb2xsb3dpbmcgcHJlY2VkZW5jZTpcclxuICogMS4gdGlkIC0gaWYgdGhlIHRva2VuIGlzIGFjcXVpcmVkIGZyb20gYW4gQXp1cmUgQUQgdGVuYW50IHRpZCB3aWxsIGJlIHByZXNlbnRcclxuICogMi4gdGZwIC0gaWYgdGhlIHRva2VuIGlzIGFjcXVpcmVkIGZyb20gYSBtb2Rlcm4gQjJDIHRlbmFudCB0ZnAgc2hvdWxkIGJlIHByZXNlbnRcclxuICogMy4gYWNyIC0gaWYgdGhlIHRva2VuIGlzIGFjcXVpcmVkIGZyb20gYSBsZWdhY3kgQjJDIHRlbmFudCBhY3Igc2hvdWxkIGJlIHByZXNlbnRcclxuICogRG93bmNhc2VkIHRvIG1hdGNoIHRoZSByZWFsbSBjYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb24gcmVxdWlyZW1lbnRzXHJcbiAqIEBwYXJhbSBpZFRva2VuQ2xhaW1zXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRUZW5hbnRJZEZyb21JZFRva2VuQ2xhaW1zKGlkVG9rZW5DbGFpbXMpIHtcclxuICAgIGlmIChpZFRva2VuQ2xhaW1zKSB7XHJcbiAgICAgICAgY29uc3QgdGVuYW50SWQgPSBpZFRva2VuQ2xhaW1zLnRpZCB8fCBpZFRva2VuQ2xhaW1zLnRmcCB8fCBpZFRva2VuQ2xhaW1zLmFjcjtcclxuICAgICAgICByZXR1cm4gdGVuYW50SWQgfHwgbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbmV4cG9ydCB7IGdldFRlbmFudElkRnJvbUlkVG9rZW5DbGFpbXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRva2VuQ2xhaW1zLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJnZXRUZW5hbnRJZEZyb21JZFRva2VuQ2xhaW1zIiwiaWRUb2tlbkNsYWltcyIsInRlbmFudElkIiwidGlkIiwidGZwIiwiYWNyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/Authority.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Authority: () => (/* binding */ Authority),\n/* harmony export */   buildStaticAuthorityOptions: () => (/* binding */ buildStaticAuthorityOptions),\n/* harmony export */   formatAuthorityUri: () => (/* binding */ formatAuthorityUri),\n/* harmony export */   getTenantFromAuthorityString: () => (/* binding */ getTenantFromAuthorityString)\n/* harmony export */ });\n/* harmony import */ var _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AuthorityType.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _OpenIdConfigResponse_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./OpenIdConfigResponse.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./AuthorityMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ProtocolMode.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./AuthorityOptions.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _CloudInstanceDiscoveryResponse_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CloudInstanceDiscoveryResponse.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs\");\n/* harmony import */ var _CloudInstanceDiscoveryErrorResponse_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./CloudInstanceDiscoveryErrorResponse.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs\");\n/* harmony import */ var _RegionDiscovery_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RegionDiscovery.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../error/AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n * @internal\r\n */ class Authority {\n    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity){\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscoveryMetadata = {\n            region_used: undefined,\n            region_source: undefined,\n            region_outcome: undefined\n        };\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n        this.managedIdentity = managedIdentity || false;\n        this.regionDiscovery = new _RegionDiscovery_mjs__WEBPACK_IMPORTED_MODULE_0__.RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\n    }\n    /**\r\n     * Get {@link AuthorityType}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */ getAuthorityType(authorityUri) {\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n        if (authorityUri.HostNameAndPort.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CIAM_AUTH_URL)) {\n            return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Ciam;\n        }\n        const pathSegments = authorityUri.PathSegments;\n        if (pathSegments.length) {\n            switch(pathSegments[0].toLowerCase()){\n                case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.ADFS:\n                    return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs;\n                case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DSTS:\n                    return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Dsts;\n            }\n        }\n        return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Default;\n    }\n    // See above for AuthorityType\n    get authorityType() {\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\n    }\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */ get protocolMode() {\n        return this.authorityOptions.protocolMode;\n    }\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */ get options() {\n        return this.authorityOptions;\n    }\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */ get canonicalAuthority() {\n        return this._canonicalAuthority.urlString;\n    }\n    /**\r\n     * Sets canonical authority.\r\n     */ set canonicalAuthority(url) {\n        this._canonicalAuthority = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n    /**\r\n     * Get authority components.\r\n     */ get canonicalAuthorityUrlComponents() {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n        return this._canonicalAuthorityUrlComponents;\n    }\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */ get hostnameAndPort() {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n    /**\r\n     * Get tenant for authority.\r\n     */ get tenant() {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */ get authorizationEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.authorization_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */ get tokenEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    get deviceCodeEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */ get endSessionEndpoint() {\n        if (this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endSessionEndpointNotSupported);\n            }\n            return this.replacePath(this.metadata.end_session_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth issuer for requests\r\n     */ get selfSignedJwtAudience() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.issuer);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */ get jwksUri() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.jwks_uri);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */ canReplaceTenant(authorityUri) {\n        return authorityUri.PathSegments.length === 1 && !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) && this.getAuthorityType(authorityUri) === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Default && this.protocolMode === _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__.ProtocolMode.AAD;\n    }\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */ replaceTenant(urlString) {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */ replacePath(urlString) {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n        currentAuthorityParts.forEach((currentPart, index)=>{\n            let cachedPart = cachedAuthorityParts[index];\n            if (index === 0 && this.canReplaceTenant(cachedAuthorityUrlComponents)) {\n                const tenantId = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\n                /**\r\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n                 * always resolved with tenant id by OIDC.\r\n                 */ if (cachedPart !== tenantId) {\n                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\n                    cachedPart = tenantId;\n                }\n            }\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n        return this.replaceTenant(endpoint);\n    }\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */ get defaultOpenIdConfigurationEndpoint() {\n        const canonicalAuthorityHost = this.hostnameAndPort;\n        if (this.canonicalAuthority.endsWith(\"v2.0/\") || this.authorityType === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs || this.protocolMode !== _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__.ProtocolMode.AAD && !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost)) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n    /**\r\n     * Boolean that returns whether or not tenant discovery has been completed.\r\n     */ discoveryComplete() {\n        return !!this.metadata;\n    }\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */ async resolveEndpointsAsync() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n        const metadataEntity = this.getCurrentMetadataEntity();\n        const cloudDiscoverySource = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateCloudDiscoveryMetadata.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateEndpointMetadata.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\n            source: endpointSource\n        });\n        this.performanceClient?.addFields({\n            cloudDiscoverySource: cloudDiscoverySource,\n            authorityEndpointSource: endpointSource\n        }, this.correlationId);\n    }\n    /**\r\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\r\n     * from the configured canonical authority\r\n     * @returns\r\n     */ getCurrentMetadataEntity() {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = {\n                aliases: [],\n                preferred_cache: this.hostnameAndPort,\n                preferred_network: this.hostnameAndPort,\n                canonical_authority: this.canonicalAuthority,\n                authorization_endpoint: \"\",\n                token_endpoint: \"\",\n                end_session_endpoint: \"\",\n                issuer: \"\",\n                aliasesFromNetwork: false,\n                endpointsFromNetwork: false,\n                expiresAt: (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.generateAuthorityMetadataExpiresAt)(),\n                jwks_uri: \"\"\n            };\n        }\n        return metadataEntity;\n    }\n    /**\r\n     * Updates cached metadata based on metadata source and sets the instance's metadata\r\n     * property to the same value\r\n     * @param metadataEntity\r\n     * @param cloudDiscoverySource\r\n     * @param endpointMetadataResult\r\n     */ updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\n        if (cloudDiscoverySource !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE && endpointMetadataResult?.source !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.expiresAt = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.generateAuthorityMetadataExpiresAt)();\n            metadataEntity.canonical_authority = this.canonicalAuthority;\n        }\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */ async updateEndpointMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\n        if (localMetadata) {\n            if (localMetadata.source === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES) {\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\n                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                    if (localMetadata.metadata) {\n                        const hardcodedMetadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\n                        (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);\n                        metadataEntity.canonical_authority = this.canonicalAuthority;\n                    }\n                }\n            }\n            return localMetadata.source;\n        }\n        // Get metadata from network if local sources aren't available\n        let metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.getEndpointMetadataFromNetwork.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\n            }\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, metadata, true);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK;\n        } else {\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\n        }\n    }\n    /**\r\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\r\n     * response if the source is hardcoded metadata\r\n     * @param metadataEntity\r\n     * @returns\r\n     */ updateEndpointMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\n        const configMetadata = this.getEndpointMetadataFromConfig();\n        if (configMetadata) {\n            this.logger.verbose(\"Found endpoint metadata in authority configuration\");\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, configMetadata, false);\n            return {\n                source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG\n            };\n        }\n        this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\n        } else {\n            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            if (hardcodedMetadata) {\n                (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);\n                return {\n                    source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES,\n                    metadata: hardcodedMetadata\n                };\n            } else {\n                this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\n            }\n        }\n        // Check cached metadata entity expiration status\n        const metadataEntityExpired = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.isAuthorityMetadataExpired)(metadataEntity);\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntityExpired) {\n            // No need to update\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\n            return {\n                source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE\n            };\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */ isAuthoritySameType(metadataEntity) {\n        const cachedAuthorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n    /**\r\n     * Parse authorityMetadata config option\r\n     */ getEndpointMetadataFromConfig() {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata);\n            } catch (e) {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidAuthorityMetadata);\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */ async getEndpointMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n        const options = {};\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */ const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\n            const isValidResponse = (0,_OpenIdConfigResponse_mjs__WEBPACK_IMPORTED_MODULE_12__.isOpenIdConfigResponse)(response.body);\n            if (isValidResponse) {\n                return response.body;\n            } else {\n                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\n                return null;\n            }\n        } catch (e) {\n            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\n            return null;\n        }\n    }\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */ getEndpointMetadataFromHardcodedValues() {\n        if (this.hostnameAndPort in _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.EndpointMetadata) {\n            return _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.EndpointMetadata[this.hostnameAndPort];\n        }\n        return null;\n    }\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     * User selected Azure region will be used if configured.\r\n     */ async updateMetadataWithRegionalInformation(metadata) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\n        if (userConfiguredAzureRegion) {\n            if (userConfiguredAzureRegion !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n                this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n                this.regionDiscoveryMetadata.region_used = userConfiguredAzureRegion;\n                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\n            }\n            const autodetectedRegionName = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration?.environmentRegion, this.regionDiscoveryMetadata);\n            if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\n                this.regionDiscoveryMetadata.region_used = autodetectedRegionName;\n                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\n            }\n            this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n        }\n        return metadata;\n    }\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param metadataEntity\r\n     * @returns AuthorityMetadataSource\r\n     */ async updateCloudDiscoveryMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\n        if (localMetadataSource) {\n            return localMetadataSource;\n        }\n        // Fallback to network as metadata source\n        const metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.getCloudDiscoveryMetadataFromNetwork.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, metadata, true);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK;\n        }\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\n        throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.untrustedAuthority);\n    }\n    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, metadata, false);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG;\n        }\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\n        if (this.options.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\n        } else {\n            const hardcodedMetadata = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromHardcodedValues)(this.hostnameAndPort);\n            if (hardcodedMetadata) {\n                this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n                (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, hardcodedMetadata, false);\n                return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES;\n            }\n            this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\n        }\n        const metadataEntityExpired = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.isAuthorityMetadataExpired)(metadataEntity);\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\n            // No need to update\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE;\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */ getCloudDiscoveryMetadataFromConfig() {\n        // CIAM does not support cloud discovery metadata\n        if (this.authorityType === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Ciam) {\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n            try {\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n                const metadata = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromNetworkResponse)(parsedResponse.metadata, this.hostnameAndPort);\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n                if (metadata) {\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n                    return metadata;\n                } else {\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n                }\n            } catch (e) {\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidCloudDiscoveryMetadata);\n            }\n        }\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return null;\n    }\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */ async getCloudDiscoveryMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n        const instanceDiscoveryEndpoint = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options = {};\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */ let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\n            let typedResponseBody;\n            let metadata;\n            if ((0,_CloudInstanceDiscoveryResponse_mjs__WEBPACK_IMPORTED_MODULE_14__.isCloudInstanceDiscoveryResponse)(response.body)) {\n                typedResponseBody = response.body;\n                metadata = typedResponseBody.metadata;\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\n            } else if ((0,_CloudInstanceDiscoveryErrorResponse_mjs__WEBPACK_IMPORTED_MODULE_15__.isCloudInstanceDiscoveryErrorResponse)(response.body)) {\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\n                typedResponseBody = response.body;\n                if (typedResponseBody.error === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.INVALID_INSTANCE) {\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n                    return null;\n                }\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n                metadata = [];\n            } else {\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n                return null;\n            }\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            match = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromNetworkResponse)(metadata, this.hostnameAndPort);\n        } catch (error) {\n            if (error instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_16__.AuthError) {\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\n            } else {\n                const typedError = error;\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\n            }\n            return null;\n        }\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n        if (!match) {\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return match;\n    }\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */ isInKnownAuthorities() {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority)=>{\n            return authority && _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n        return matches.length > 0;\n    }\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */ static generateAuthority(authorityString, azureCloudOptions) {\n        let authorityAzureCloudInstance;\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== _AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_17__.AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n    }\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */ static createCloudDiscoveryMetadataFromHost(host) {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [\n                host\n            ]\n        };\n    }\n    /**\r\n     * helper function to generate environment from authority object\r\n     */ getPreferredCache() {\n        if (this.managedIdentity) {\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DEFAULT_AUTHORITY_HOST;\n        } else if (this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */ isAlias(host) {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n    /**\r\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\r\n     * @param host\r\n     */ isAliasOfKnownMicrosoftAuthority(host) {\n        return _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.InstanceDiscoveryMetadataAliases.has(host);\n    }\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */ static isPublicCloudAuthority(host) {\n        return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */ static buildRegionalAuthorityString(host, region, queryString) {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(host);\n        authorityUrlInstance.validateAsUri();\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n        // Include the query string portion of the url\n        const url = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n        return url;\n    }\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */ static replaceWithRegionalInformation(metadata, azureRegion) {\n        const regionalMetadata = {\n            ...metadata\n        };\n        regionalMetadata.authorization_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\n        regionalMetadata.token_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\n        if (regionalMetadata.end_session_endpoint) {\n            regionalMetadata.end_session_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\n        }\n        return regionalMetadata;\n    }\n    /**\r\n     * Transform CIAM_AUTHORIY as per the below rules:\r\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n     *\r\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n     *\r\n     * @param authority\r\n     */ static transformCIAMAuthority(authority) {\n        let ciamAuthority = authority;\n        const authorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(authority);\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\n        // check if transformation is needed\n        if (authorityUrlComponents.PathSegments.length === 0 && authorityUrlComponents.HostNameAndPort.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CIAM_AUTH_URL)) {\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\n        }\n        return ciamAuthority;\n    }\n}\n// Reserved tenant domain names that will not be replaced with tenant id\nAuthority.reservedTenantDomains = new Set([\n    \"{tenant}\",\n    \"{tenantid}\",\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.COMMON,\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.CONSUMERS,\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.ORGANIZATIONS\n]);\n/**\r\n * Extract tenantId from authority\r\n */ function getTenantFromAuthorityString(authority) {\n    const authorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(authority);\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\n    /**\r\n     * For credential matching purposes, tenantId is the last path segment of the authority URL:\r\n     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\r\n     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\r\n     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\r\n     *\r\n     * Note that we may not have any path segments in certain OIDC scenarios.\r\n     */ const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\n    switch(tenantId){\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.COMMON:\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.ORGANIZATIONS:\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.CONSUMERS:\n            return undefined;\n        default:\n            return tenantId;\n    }\n}\nfunction formatAuthorityUri(authorityUri) {\n    return authorityUri.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.FORWARD_SLASH) ? authorityUri : `${authorityUri}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.FORWARD_SLASH}`;\n}\nfunction buildStaticAuthorityOptions(authOptions) {\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\n    let cloudDiscoveryMetadata = undefined;\n    if (rawCloudDiscoveryMetadata) {\n        try {\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidCloudDiscoveryMetadata);\n        }\n    }\n    return {\n        canonicalAuthority: authOptions.authority ? formatAuthorityUri(authOptions.authority) : undefined,\n        knownAuthorities: authOptions.knownAuthorities,\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata\n    };\n}\n //# sourceMappingURL=Authority.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDiscoveredInstance: () => (/* binding */ createDiscoveredInstance)\n/* harmony export */ });\n/* harmony import */ var _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Authority.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */ async function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {\n    performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n    const authorityUriFinal = _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.Authority.transformCIAMAuthority((0,_Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.formatAuthorityUri)(authorityUri));\n    // Initialize authority and perform discovery endpoint check.\n    const acquireTokenAuthority = new _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.Authority(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);\n    try {\n        await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\n        return acquireTokenAuthority;\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.endpointResolutionError);\n    }\n}\n //# sourceMappingURL=AuthorityFactory.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eUZhY3RvcnkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNnRTtBQUNLO0FBQ2E7QUFDdEI7QUFDZ0I7QUFFNUU7OztDQUdDLEdBQ0Q7Ozs7Ozs7Ozs7Q0FVQyxHQUNELGVBQWVNLHlCQUF5QkMsWUFBWSxFQUFFQyxhQUFhLEVBQUVDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxpQkFBaUI7SUFDeklBLG1CQUFtQkMsb0JBQW9CWCwwRkFBaUJBLENBQUNZLHdDQUF3QyxFQUFFSDtJQUNuRyxNQUFNSSxvQkFBb0JoQixxREFBU0EsQ0FBQ2lCLHNCQUFzQixDQUFDaEIsa0VBQWtCQSxDQUFDTTtJQUM5RSw2REFBNkQ7SUFDN0QsTUFBTVcsd0JBQXdCLElBQUlsQixxREFBU0EsQ0FBQ2dCLG1CQUFtQlIsZUFBZUMsY0FBY0Msa0JBQWtCQyxRQUFRQyxlQUFlQztJQUNySSxJQUFJO1FBQ0EsTUFBTVQsd0VBQVdBLENBQUNjLHNCQUFzQkMscUJBQXFCLENBQUNDLElBQUksQ0FBQ0Ysd0JBQXdCZiwwRkFBaUJBLENBQUNrQiw4QkFBOEIsRUFBRVYsUUFBUUUsbUJBQW1CRDtRQUN4SyxPQUFPTTtJQUNYLEVBQ0EsT0FBT0ksR0FBRztRQUNOLE1BQU1wQixpRkFBcUJBLENBQUNHLG9GQUF1QkE7SUFDdkQ7QUFDSjtBQUVvQyxDQUNwQyw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eUZhY3RvcnkubWpzPzBkMTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBBdXRob3JpdHksIGZvcm1hdEF1dGhvcml0eVVyaSB9IGZyb20gJy4vQXV0aG9yaXR5Lm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IFBlcmZvcm1hbmNlRXZlbnRzIH0gZnJvbSAnLi4vdGVsZW1ldHJ5L3BlcmZvcm1hbmNlL1BlcmZvcm1hbmNlRXZlbnQubWpzJztcbmltcG9ydCB7IGludm9rZUFzeW5jIH0gZnJvbSAnLi4vdXRpbHMvRnVuY3Rpb25XcmFwcGVycy5tanMnO1xuaW1wb3J0IHsgZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENyZWF0ZSBhbiBhdXRob3JpdHkgb2JqZWN0IG9mIHRoZSBjb3JyZWN0IHR5cGUgYmFzZWQgb24gdGhlIHVybFxyXG4gKiBQZXJmb3JtcyBiYXNpYyBhdXRob3JpdHkgdmFsaWRhdGlvbiAtIGNoZWNrcyB0byBzZWUgaWYgdGhlIGF1dGhvcml0eSBpcyBvZiBhIHZhbGlkIHR5cGUgKGkuZS4gYWFkLCBiMmMsIGFkZnMpXHJcbiAqXHJcbiAqIEFsc28gcGVyZm9ybXMgZW5kcG9pbnQgZGlzY292ZXJ5LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXV0aG9yaXR5VXJpXHJcbiAqIEBwYXJhbSBuZXR3b3JrQ2xpZW50XHJcbiAqIEBwYXJhbSBwcm90b2NvbE1vZGVcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UoYXV0aG9yaXR5VXJpLCBuZXR3b3JrQ2xpZW50LCBjYWNoZU1hbmFnZXIsIGF1dGhvcml0eU9wdGlvbnMsIGxvZ2dlciwgY29ycmVsYXRpb25JZCwgcGVyZm9ybWFuY2VDbGllbnQpIHtcclxuICAgIHBlcmZvcm1hbmNlQ2xpZW50Py5hZGRRdWV1ZU1lYXN1cmVtZW50KFBlcmZvcm1hbmNlRXZlbnRzLkF1dGhvcml0eUZhY3RvcnlDcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgY29uc3QgYXV0aG9yaXR5VXJpRmluYWwgPSBBdXRob3JpdHkudHJhbnNmb3JtQ0lBTUF1dGhvcml0eShmb3JtYXRBdXRob3JpdHlVcmkoYXV0aG9yaXR5VXJpKSk7XHJcbiAgICAvLyBJbml0aWFsaXplIGF1dGhvcml0eSBhbmQgcGVyZm9ybSBkaXNjb3ZlcnkgZW5kcG9pbnQgY2hlY2suXHJcbiAgICBjb25zdCBhY3F1aXJlVG9rZW5BdXRob3JpdHkgPSBuZXcgQXV0aG9yaXR5KGF1dGhvcml0eVVyaUZpbmFsLCBuZXR3b3JrQ2xpZW50LCBjYWNoZU1hbmFnZXIsIGF1dGhvcml0eU9wdGlvbnMsIGxvZ2dlciwgY29ycmVsYXRpb25JZCwgcGVyZm9ybWFuY2VDbGllbnQpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCBpbnZva2VBc3luYyhhY3F1aXJlVG9rZW5BdXRob3JpdHkucmVzb2x2ZUVuZHBvaW50c0FzeW5jLmJpbmQoYWNxdWlyZVRva2VuQXV0aG9yaXR5KSwgUGVyZm9ybWFuY2VFdmVudHMuQXV0aG9yaXR5UmVzb2x2ZUVuZHBvaW50c0FzeW5jLCBsb2dnZXIsIHBlcmZvcm1hbmNlQ2xpZW50LCBjb3JyZWxhdGlvbklkKSgpO1xyXG4gICAgICAgIHJldHVybiBhY3F1aXJlVG9rZW5BdXRob3JpdHk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihlbmRwb2ludFJlc29sdXRpb25FcnJvcik7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgY3JlYXRlRGlzY292ZXJlZEluc3RhbmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRob3JpdHlGYWN0b3J5Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRob3JpdHkiLCJmb3JtYXRBdXRob3JpdHlVcmkiLCJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJQZXJmb3JtYW5jZUV2ZW50cyIsImludm9rZUFzeW5jIiwiZW5kcG9pbnRSZXNvbHV0aW9uRXJyb3IiLCJjcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UiLCJhdXRob3JpdHlVcmkiLCJuZXR3b3JrQ2xpZW50IiwiY2FjaGVNYW5hZ2VyIiwiYXV0aG9yaXR5T3B0aW9ucyIsImxvZ2dlciIsImNvcnJlbGF0aW9uSWQiLCJwZXJmb3JtYW5jZUNsaWVudCIsImFkZFF1ZXVlTWVhc3VyZW1lbnQiLCJBdXRob3JpdHlGYWN0b3J5Q3JlYXRlRGlzY292ZXJlZEluc3RhbmNlIiwiYXV0aG9yaXR5VXJpRmluYWwiLCJ0cmFuc2Zvcm1DSUFNQXV0aG9yaXR5IiwiYWNxdWlyZVRva2VuQXV0aG9yaXR5IiwicmVzb2x2ZUVuZHBvaW50c0FzeW5jIiwiYmluZCIsIkF1dGhvcml0eVJlc29sdmVFbmRwb2ludHNBc3luYyIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EndpointMetadata: () => (/* binding */ EndpointMetadata),\n/* harmony export */   InstanceDiscoveryMetadata: () => (/* binding */ InstanceDiscoveryMetadata),\n/* harmony export */   InstanceDiscoveryMetadataAliases: () => (/* binding */ InstanceDiscoveryMetadataAliases),\n/* harmony export */   getAliasesFromMetadata: () => (/* binding */ getAliasesFromMetadata),\n/* harmony export */   getAliasesFromStaticSources: () => (/* binding */ getAliasesFromStaticSources),\n/* harmony export */   getCloudDiscoveryMetadataFromHardcodedValues: () => (/* binding */ getCloudDiscoveryMetadataFromHardcodedValues),\n/* harmony export */   getCloudDiscoveryMetadataFromNetworkResponse: () => (/* binding */ getCloudDiscoveryMetadataFromNetworkResponse),\n/* harmony export */   rawMetdataJSON: () => (/* binding */ rawMetdataJSON)\n/* harmony export */ });\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const rawMetdataJSON = {\n    endpointMetadata: {\n        \"login.microsoftonline.com\": {\n            token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\"\n        },\n        \"login.chinacloudapi.cn\": {\n            token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\"\n        },\n        \"login.microsoftonline.us\": {\n            token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\"\n        }\n    },\n    instanceDiscoveryMetadata: {\n        tenant_discovery_endpoint: \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n        metadata: [\n            {\n                preferred_network: \"login.microsoftonline.com\",\n                preferred_cache: \"login.windows.net\",\n                aliases: [\n                    \"login.microsoftonline.com\",\n                    \"login.windows.net\",\n                    \"login.microsoft.com\",\n                    \"sts.windows.net\"\n                ]\n            },\n            {\n                preferred_network: \"login.partner.microsoftonline.cn\",\n                preferred_cache: \"login.partner.microsoftonline.cn\",\n                aliases: [\n                    \"login.partner.microsoftonline.cn\",\n                    \"login.chinacloudapi.cn\"\n                ]\n            },\n            {\n                preferred_network: \"login.microsoftonline.de\",\n                preferred_cache: \"login.microsoftonline.de\",\n                aliases: [\n                    \"login.microsoftonline.de\"\n                ]\n            },\n            {\n                preferred_network: \"login.microsoftonline.us\",\n                preferred_cache: \"login.microsoftonline.us\",\n                aliases: [\n                    \"login.microsoftonline.us\",\n                    \"login.usgovcloudapi.net\"\n                ]\n            },\n            {\n                preferred_network: \"login-us.microsoftonline.com\",\n                preferred_cache: \"login-us.microsoftonline.com\",\n                aliases: [\n                    \"login-us.microsoftonline.com\"\n                ]\n            }\n        ]\n    }\n};\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\nconst InstanceDiscoveryMetadataAliases = new Set();\nInstanceDiscoveryMetadata.metadata.forEach((metadataEntry)=>{\n    metadataEntry.aliases.forEach((alias)=>{\n        InstanceDiscoveryMetadataAliases.add(alias);\n    });\n});\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */ function getAliasesFromStaticSources(staticAuthorityOptions, logger) {\n    let staticAliases;\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n    if (canonicalAuthority) {\n        const authorityHost = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_0__.UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\n        staticAliases = getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG, logger) || getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES, logger) || staticAuthorityOptions.knownAuthorities;\n    }\n    return staticAliases || [];\n}\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */ function getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n    if (authorityHost && cloudDiscoveryMetadata) {\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\n        if (metadata) {\n            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\n            return metadata.aliases;\n        } else {\n            logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\n        }\n    }\n    return null;\n}\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */ function getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\n    return metadata;\n}\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */ function getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\n    for(let i = 0; i < response.length; i++){\n        const metadata = response[i];\n        if (metadata.aliases.includes(authorityHost)) {\n            return metadata;\n        }\n    }\n    return null;\n}\n //# sourceMappingURL=AuthorityMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureCloudInstance: () => (/* binding */ AzureCloudInstance)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const AzureCloudInstance = {\n    // AzureCloudInstance is not specified.\n    None: \"none\",\n    // Microsoft Azure public cloud\n    AzurePublic: \"https://login.microsoftonline.com\",\n    // Microsoft PPE\n    AzurePpe: \"https://login.windows-ppe.net\",\n    // Microsoft Chinese national/regional cloud\n    AzureChina: \"https://login.chinacloudapi.cn\",\n    // Microsoft German national/regional cloud (\"Black Forest\")\n    AzureGermany: \"https://login.microsoftonline.de\",\n    // US Government cloud\n    AzureUsGovernment: \"https://login.microsoftonline.us\"\n};\n //# sourceMappingURL=AuthorityOptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eU9wdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQSxxQkFBcUI7SUFDdkIsdUNBQXVDO0lBQ3ZDQyxNQUFNO0lBQ04sK0JBQStCO0lBQy9CQyxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCQyxVQUFVO0lBQ1YsNENBQTRDO0lBQzVDQyxZQUFZO0lBQ1osNERBQTREO0lBQzVEQyxjQUFjO0lBQ2Qsc0JBQXNCO0lBQ3RCQyxtQkFBbUI7QUFDdkI7QUFFOEIsQ0FDOUIsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9BdXRob3JpdHlPcHRpb25zLm1qcz80N2I5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEF6dXJlQ2xvdWRJbnN0YW5jZSA9IHtcclxuICAgIC8vIEF6dXJlQ2xvdWRJbnN0YW5jZSBpcyBub3Qgc3BlY2lmaWVkLlxyXG4gICAgTm9uZTogXCJub25lXCIsXHJcbiAgICAvLyBNaWNyb3NvZnQgQXp1cmUgcHVibGljIGNsb3VkXHJcbiAgICBBenVyZVB1YmxpYzogXCJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb21cIixcclxuICAgIC8vIE1pY3Jvc29mdCBQUEVcclxuICAgIEF6dXJlUHBlOiBcImh0dHBzOi8vbG9naW4ud2luZG93cy1wcGUubmV0XCIsXHJcbiAgICAvLyBNaWNyb3NvZnQgQ2hpbmVzZSBuYXRpb25hbC9yZWdpb25hbCBjbG91ZFxyXG4gICAgQXp1cmVDaGluYTogXCJodHRwczovL2xvZ2luLmNoaW5hY2xvdWRhcGkuY25cIixcclxuICAgIC8vIE1pY3Jvc29mdCBHZXJtYW4gbmF0aW9uYWwvcmVnaW9uYWwgY2xvdWQgKFwiQmxhY2sgRm9yZXN0XCIpXHJcbiAgICBBenVyZUdlcm1hbnk6IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuZGVcIixcclxuICAgIC8vIFVTIEdvdmVybm1lbnQgY2xvdWRcclxuICAgIEF6dXJlVXNHb3Zlcm5tZW50OiBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLnVzXCIsXHJcbn07XG5cbmV4cG9ydCB7IEF6dXJlQ2xvdWRJbnN0YW5jZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aG9yaXR5T3B0aW9ucy5tanMubWFwXG4iXSwibmFtZXMiOlsiQXp1cmVDbG91ZEluc3RhbmNlIiwiTm9uZSIsIkF6dXJlUHVibGljIiwiQXp1cmVQcGUiLCJBenVyZUNoaW5hIiwiQXp1cmVHZXJtYW55IiwiQXp1cmVVc0dvdmVybm1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthorityType: () => (/* binding */ AuthorityType)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Authority types supported by MSAL.\r\n */ const AuthorityType = {\n    Default: 0,\n    Adfs: 1,\n    Dsts: 2,\n    Ciam: 3\n};\n //# sourceMappingURL=AuthorityType.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eVR5cGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Q0FFQyxHQUNELE1BQU1BLGdCQUFnQjtJQUNsQkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsTUFBTTtBQUNWO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hdXRob3JpdHkvQXV0aG9yaXR5VHlwZS5tanM/ZmZhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQXV0aG9yaXR5IHR5cGVzIHN1cHBvcnRlZCBieSBNU0FMLlxyXG4gKi9cclxuY29uc3QgQXV0aG9yaXR5VHlwZSA9IHtcclxuICAgIERlZmF1bHQ6IDAsXHJcbiAgICBBZGZzOiAxLFxyXG4gICAgRHN0czogMixcclxuICAgIENpYW06IDMsXHJcbn07XG5cbmV4cG9ydCB7IEF1dGhvcml0eVR5cGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1dGhvcml0eVR5cGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhvcml0eVR5cGUiLCJEZWZhdWx0IiwiQWRmcyIsIkRzdHMiLCJDaWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCloudInstanceDiscoveryErrorResponse: () => (/* binding */ isCloudInstanceDiscoveryErrorResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isCloudInstanceDiscoveryErrorResponse(response) {\n    return response.hasOwnProperty(\"error\") && response.hasOwnProperty(\"error_description\");\n}\n //# sourceMappingURL=CloudInstanceDiscoveryErrorResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlFcnJvclJlc3BvbnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0Esc0NBQXNDQyxRQUFRO0lBQ25ELE9BQVFBLFNBQVNDLGNBQWMsQ0FBQyxZQUM1QkQsU0FBU0MsY0FBYyxDQUFDO0FBQ2hDO0FBRWlELENBQ2pELGdFQUFnRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hdXRob3JpdHkvQ2xvdWRJbnN0YW5jZURpc2NvdmVyeUVycm9yUmVzcG9uc2UubWpzPzg0YWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNDbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIChyZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImVycm9yXCIpICYmXHJcbiAgICAgICAgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoXCJlcnJvcl9kZXNjcmlwdGlvblwiKSk7XHJcbn1cblxuZXhwb3J0IHsgaXNDbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xvdWRJbnN0YW5jZURpc2NvdmVyeUVycm9yUmVzcG9uc2UubWpzLm1hcFxuIl0sIm5hbWVzIjpbImlzQ2xvdWRJbnN0YW5jZURpc2NvdmVyeUVycm9yUmVzcG9uc2UiLCJyZXNwb25zZSIsImhhc093blByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCloudInstanceDiscoveryResponse: () => (/* binding */ isCloudInstanceDiscoveryResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isCloudInstanceDiscoveryResponse(response) {\n    return response.hasOwnProperty(\"tenant_discovery_endpoint\") && response.hasOwnProperty(\"metadata\");\n}\n //# sourceMappingURL=CloudInstanceDiscoveryResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELFNBQVNBLGlDQUFpQ0MsUUFBUTtJQUM5QyxPQUFRQSxTQUFTQyxjQUFjLENBQUMsZ0NBQzVCRCxTQUFTQyxjQUFjLENBQUM7QUFDaEM7QUFFNEMsQ0FDNUMsMkRBQTJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9DbG91ZEluc3RhbmNlRGlzY292ZXJ5UmVzcG9uc2UubWpzP2VmOTAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNDbG91ZEluc3RhbmNlRGlzY292ZXJ5UmVzcG9uc2UocmVzcG9uc2UpIHtcclxuICAgIHJldHVybiAocmVzcG9uc2UuaGFzT3duUHJvcGVydHkoXCJ0ZW5hbnRfZGlzY292ZXJ5X2VuZHBvaW50XCIpICYmXHJcbiAgICAgICAgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoXCJtZXRhZGF0YVwiKSk7XHJcbn1cblxuZXhwb3J0IHsgaXNDbG91ZEluc3RhbmNlRGlzY292ZXJ5UmVzcG9uc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZS5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNDbG91ZEluc3RhbmNlRGlzY292ZXJ5UmVzcG9uc2UiLCJyZXNwb25zZSIsImhhc093blByb3BlcnR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isOpenIdConfigResponse: () => (/* binding */ isOpenIdConfigResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isOpenIdConfigResponse(response) {\n    return response.hasOwnProperty(\"authorization_endpoint\") && response.hasOwnProperty(\"token_endpoint\") && response.hasOwnProperty(\"issuer\") && response.hasOwnProperty(\"jwks_uri\");\n}\n //# sourceMappingURL=OpenIdConfigResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L09wZW5JZENvbmZpZ1Jlc3BvbnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0EsdUJBQXVCQyxRQUFRO0lBQ3BDLE9BQVFBLFNBQVNDLGNBQWMsQ0FBQyw2QkFDNUJELFNBQVNDLGNBQWMsQ0FBQyxxQkFDeEJELFNBQVNDLGNBQWMsQ0FBQyxhQUN4QkQsU0FBU0MsY0FBYyxDQUFDO0FBQ2hDO0FBRWtDLENBQ2xDLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hdXRob3JpdHkvT3BlbklkQ29uZmlnUmVzcG9uc2UubWpzP2NmZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNPcGVuSWRDb25maWdSZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIChyZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImF1dGhvcml6YXRpb25fZW5kcG9pbnRcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcInRva2VuX2VuZHBvaW50XCIpICYmXHJcbiAgICAgICAgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoXCJpc3N1ZXJcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImp3a3NfdXJpXCIpKTtcclxufVxuXG5leHBvcnQgeyBpc09wZW5JZENvbmZpZ1Jlc3BvbnNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVuSWRDb25maWdSZXNwb25zZS5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNPcGVuSWRDb25maWdSZXNwb25zZSIsInJlc3BvbnNlIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProtocolMode: () => (/* binding */ ProtocolMode)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Protocol modes supported by MSAL.\r\n */ const ProtocolMode = {\n    AAD: \"AAD\",\n    OIDC: \"OIDC\"\n};\n //# sourceMappingURL=ProtocolMode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L1Byb3RvY29sTW9kZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUEsZUFBZTtJQUNqQkMsS0FBSztJQUNMQyxNQUFNO0FBQ1Y7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9Qcm90b2NvbE1vZGUubWpzPzVkMWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3RvY29sIG1vZGVzIHN1cHBvcnRlZCBieSBNU0FMLlxyXG4gKi9cclxuY29uc3QgUHJvdG9jb2xNb2RlID0ge1xyXG4gICAgQUFEOiBcIkFBRFwiLFxyXG4gICAgT0lEQzogXCJPSURDXCIsXHJcbn07XG5cbmV4cG9ydCB7IFByb3RvY29sTW9kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJvdG9jb2xNb2RlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJQcm90b2NvbE1vZGUiLCJBQUQiLCJPSURDIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegionDiscovery: () => (/* binding */ RegionDiscovery)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class RegionDiscovery {\n    constructor(networkInterface, logger, performanceClient, correlationId){\n        this.networkInterface = networkInterface;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */ async detectRegion(environmentRegion, regionDiscoveryMetadata) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n        // Initialize auto detected region with the region from the envrionment\n        let autodetectedRegionName = environmentRegion;\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n            try {\n                const localIMDSVersionResponse = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getRegionFromIMDS.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_VERSION, options);\n                if (localIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.IMDS;\n                }\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\n                if (localIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpBadRequest) {\n                    const currentIMDSVersion = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getCurrentVersion.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n                    const currentIMDSVersionResponse = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getRegionFromIMDS.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\n                    if (currentIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.IMDS;\n                    }\n                }\n            } catch (e) {\n                regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            }\n        } else {\n            regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n        return autodetectedRegionName || null;\n    }\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */ async getRegionFromIMDS(version, options) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return this.networkInterface.sendGetRequestAsync(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_TIMEOUT);\n    }\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */ async getCurrentVersion(options) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_ENDPOINT}?format=json`, options);\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n// Options for the IMDS endpoint request\nRegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n        Metadata: \"true\"\n    }\n};\n //# sourceMappingURL=RegionDiscovery.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheManager: () => (/* binding */ CacheManager),\n/* harmony export */   DefaultStorageClass: () => (/* binding */ DefaultStorageClass)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../request/ScopeSet.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entities/AccountEntity.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../account/AccountInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _authority_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../authority/AuthorityMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\");\n/* harmony import */ var _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/CacheError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/CacheErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n * @internal\r\n */ class CacheManager {\n    constructor(clientId, cryptoImpl, logger, staticAuthorityOptions){\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n        this.commonLogger = logger.clone(_packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__.version);\n        this.staticAuthorityOptions = staticAuthorityOptions;\n    }\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return this.buildTenantProfiles(this.getAccountsFilteredBy(accountFilter || {}), accountFilter);\n    }\n    /**\r\n     * Gets first tenanted AccountInfo object found based on provided filters\r\n     */ getAccountInfoFilteredBy(accountFilter) {\n        const allAccounts = this.getAllAccounts(accountFilter);\n        if (allAccounts.length > 1) {\n            // If one or more accounts are found, prioritize accounts that have an ID token\n            const sortedAccounts = allAccounts.sort((account)=>{\n                return account.idTokenClaims ? -1 : 1;\n            });\n            return sortedAccounts[0];\n        } else if (allAccounts.length === 1) {\n            // If only one account is found, return it regardless of whether a matching ID token was found\n            return allAccounts[0];\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * Returns a single matching\r\n     * @param accountFilter\r\n     * @returns\r\n     */ getBaseAccountInfo(accountFilter) {\n        const accountEntities = this.getAccountsFilteredBy(accountFilter);\n        if (accountEntities.length > 0) {\n            return accountEntities[0].getAccountInfo();\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters\r\n     * and builds the account info objects from the matching ID token's claims\r\n     * @param cachedAccounts\r\n     * @param accountFilter\r\n     * @returns Array of AccountInfo objects that match account and tenant profile filters\r\n     */ buildTenantProfiles(cachedAccounts, accountFilter) {\n        return cachedAccounts.flatMap((accountEntity)=>{\n            return this.getTenantProfilesFromAccountEntity(accountEntity, accountFilter?.tenantId, accountFilter);\n        });\n    }\n    getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, tenantProfileFilter) {\n        let tenantedAccountInfo = null;\n        let idTokenClaims;\n        if (tenantProfileFilter) {\n            if (!this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter)) {\n                return null;\n            }\n        }\n        const idToken = this.getIdToken(accountInfo, tokenKeys, tenantProfile.tenantId);\n        if (idToken) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_1__.extractTokenClaims)(idToken.secret, this.cryptoImpl.base64Decode);\n            if (!this.idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter)) {\n                // ID token sourced claims don't match so this tenant profile is not a match\n                return null;\n            }\n        }\n        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims\n        tenantedAccountInfo = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.updateAccountTenantProfileData)(accountInfo, tenantProfile, idTokenClaims, idToken?.secret);\n        return tenantedAccountInfo;\n    }\n    getTenantProfilesFromAccountEntity(accountEntity, targetTenantId, tenantProfileFilter) {\n        const accountInfo = accountEntity.getAccountInfo();\n        let searchTenantProfiles = accountInfo.tenantProfiles || new Map();\n        const tokenKeys = this.getTokenKeys();\n        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists\n        if (targetTenantId) {\n            const tenantProfile = searchTenantProfiles.get(targetTenantId);\n            if (tenantProfile) {\n                // Reduce search field to just this tenant profile\n                searchTenantProfiles = new Map([\n                    [\n                        targetTenantId,\n                        tenantProfile\n                    ]\n                ]);\n            } else {\n                // No tenant profile for search tenant ID, return empty array\n                return [];\n            }\n        }\n        const matchingTenantProfiles = [];\n        searchTenantProfiles.forEach((tenantProfile)=>{\n            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, tenantProfileFilter);\n            if (tenantedAccountInfo) {\n                matchingTenantProfiles.push(tenantedAccountInfo);\n            }\n        });\n        return matchingTenantProfiles;\n    }\n    tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter) {\n        if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTenantProfile(tenantProfile, tenantProfileFilter.localAccountId)) {\n            return false;\n        }\n        if (!!tenantProfileFilter.name && !(tenantProfile.name === tenantProfileFilter.name)) {\n            return false;\n        }\n        if (tenantProfileFilter.isHomeTenant !== undefined && !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)) {\n            return false;\n        }\n        return true;\n    }\n    idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter) {\n        // Tenant Profile filtering\n        if (tenantProfileFilter) {\n            if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTokenClaims(idTokenClaims, tenantProfileFilter.localAccountId)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.loginHint && !this.matchLoginHintFromTokenClaims(idTokenClaims, tenantProfileFilter.loginHint)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.username && !this.matchUsername(idTokenClaims.preferred_username, tenantProfileFilter.username)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.name && !this.matchName(idTokenClaims, tenantProfileFilter.name)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.sid && !this.matchSid(idTokenClaims, tenantProfileFilter.sid)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */ async saveCacheRecord(cacheRecord, storeInCache, correlationId) {\n        if (!cacheRecord) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.invalidCacheRecord);\n        }\n        try {\n            if (!!cacheRecord.account) {\n                this.setAccount(cacheRecord.account);\n            }\n            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\n                this.setIdTokenCredential(cacheRecord.idToken);\n            }\n            if (!!cacheRecord.accessToken && storeInCache?.accessToken !== false) {\n                await this.saveAccessToken(cacheRecord.accessToken);\n            }\n            if (!!cacheRecord.refreshToken && storeInCache?.refreshToken !== false) {\n                this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n            if (!!cacheRecord.appMetadata) {\n                this.setAppMetadata(cacheRecord.appMetadata);\n            }\n        } catch (e) {\n            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);\n            if (e instanceof Error) {\n                this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${e.message}`, correlationId);\n                if (e.name === \"QuotaExceededError\" || e.name === \"NS_ERROR_DOM_QUOTA_REACHED\" || e.message.includes(\"exceeded the quota\")) {\n                    this.commonLogger?.error(`CacheManager.saveCacheRecord: exceeded storage quota`, correlationId);\n                    throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(_error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cacheQuotaExceededErrorCode);\n                } else {\n                    throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(e.name, e.message);\n                }\n            } else {\n                this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${e}`, correlationId);\n                throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(_error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cacheUnknownErrorCode);\n            }\n        }\n    }\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */ async saveAccessToken(credential) {\n        const accessTokenFilter = {\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n            tokenType: credential.tokenType,\n            requestedClaimsHash: credential.requestedClaimsHash\n        };\n        const tokenKeys = this.getTokenKeys();\n        const currentScopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(credential.target);\n        const removedAccessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n                return;\n            }\n            const tokenEntity = this.getAccessTokenCredential(key);\n            if (tokenEntity && this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n                const tokenScopeSet = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    removedAccessTokens.push(this.removeAccessToken(key));\n                }\n            }\n        });\n        await Promise.all(removedAccessTokens);\n        this.setAccessTokenCredential(credential);\n    }\n    /**\r\n     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache\r\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param accountFilter - An object containing Account properties to filter by\r\n     */ getAccountsFilteredBy(accountFilter) {\n        const allAccountKeys = this.getAccountKeys();\n        const matchingAccounts = [];\n        allAccountKeys.forEach((cacheKey)=>{\n            if (!this.isAccountKey(cacheKey, accountFilter.homeAccountId)) {\n                // Don't parse value if the key doesn't match the account filters\n                return;\n            }\n            const entity = this.getAccount(cacheKey, this.commonLogger);\n            // Match base account fields\n            if (!entity) {\n                return;\n            }\n            if (!!accountFilter.homeAccountId && !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.username && !this.matchUsername(entity.username, accountFilter.username)) {\n                return;\n            }\n            if (!!accountFilter.environment && !this.matchEnvironment(entity, accountFilter.environment)) {\n                return;\n            }\n            if (!!accountFilter.realm && !this.matchRealm(entity, accountFilter.realm)) {\n                return;\n            }\n            if (!!accountFilter.nativeAccountId && !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.authorityType && !this.matchAuthorityType(entity, accountFilter.authorityType)) {\n                return;\n            }\n            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts\n            const tenantProfileFilter = {\n                localAccountId: accountFilter?.localAccountId,\n                name: accountFilter?.name\n            };\n            const matchingTenantProfiles = entity.tenantProfiles?.filter((tenantProfile)=>{\n                return this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter);\n            });\n            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) {\n                // No tenant profile for this account matches filter, don't add to list of matching accounts\n                return;\n            }\n            matchingAccounts.push(entity);\n        });\n        return matchingAccounts;\n    }\n    /**\r\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n     * @param key\r\n     * @param homeAccountId\r\n     * @param tenantId\r\n     * @returns\r\n     */ isAccountKey(key, homeAccountId, tenantId) {\n        if (key.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR).length < 3) {\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n            return false;\n        }\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n            return false;\n        }\n        // Do not check environment as aliasing can cause false negatives\n        return true;\n    }\n    /**\r\n     * Returns true if the given key matches our credential key schema.\r\n     * @param key\r\n     */ isCredentialKey(key) {\n        if (key.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR).length < 6) {\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        const lowerCaseKey = key.toLowerCase();\n        // Credential keys must indicate what credential type they represent\n        if (lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ID_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\n            return false;\n        }\n        if (lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\n            // Refresh tokens must contain the client id or family id\n            const clientIdValidation = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}${this.clientId}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}`;\n            const familyIdValidation = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}`;\n            if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n                return false;\n            }\n        } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n            // Tokens must contain the clientId\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */ credentialMatchesFilter(entity, filter) {\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n            return false;\n        }\n        if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n            return false;\n        }\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */ if (typeof filter.homeAccountId === \"string\" && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n            return false;\n        }\n        if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n            return false;\n        }\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n            return false;\n        }\n        if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\n            return false;\n        }\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n            return false;\n        }\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */ if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n            return false;\n        }\n        // If request OR cached entity has requested Claims Hash, check if they match\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n            // Don't match if either is undefined or they are different\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n                return false;\n            }\n        }\n        // Access Token with Auth Scheme specific matching\n        if (entity.credentialType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n            if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\n                return false;\n            }\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n            if (filter.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.SSH) {\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */ getAppMetadataFilteredBy(filter) {\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata = {};\n        allCacheKeys.forEach((cacheKey)=>{\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n                return;\n            }\n            if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n                return;\n            }\n            matchingAppMetadata[cacheKey] = entity;\n        });\n        return matchingAppMetadata;\n    }\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */ getAuthorityMetadataByAlias(host) {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n        allCacheKeys.forEach((cacheKey)=>{\n            // don't parse any non-authorityMetadata type cache entities\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n            matchedEntity = entity;\n        });\n        return matchedEntity;\n    }\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */ async removeAllAccounts() {\n        const allAccountKeys = this.getAccountKeys();\n        const removedAccounts = [];\n        allAccountKeys.forEach((cacheKey)=>{\n            removedAccounts.push(this.removeAccount(cacheKey));\n        });\n        await Promise.all(removedAccounts);\n    }\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */ async removeAccount(accountKey) {\n        const account = this.getAccount(accountKey, this.commonLogger);\n        if (!account) {\n            return;\n        }\n        await this.removeAccountContext(account);\n        this.removeItem(accountKey);\n    }\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */ async removeAccountContext(account) {\n        const allTokenKeys = this.getTokenKeys();\n        const accountId = account.generateAccountId();\n        const removedCredentials = [];\n        allTokenKeys.idToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                this.removeIdToken(key);\n            }\n        });\n        allTokenKeys.accessToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(this.removeAccessToken(key));\n            }\n        });\n        allTokenKeys.refreshToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                this.removeRefreshToken(key);\n            }\n        });\n        await Promise.all(removedCredentials);\n    }\n    /**\r\n     * Migrates a single-tenant account and all it's associated alternate cross-tenant account objects in the\r\n     * cache into a condensed multi-tenant account object with tenant profiles.\r\n     * @param accountKey\r\n     * @param accountEntity\r\n     * @param logger\r\n     * @returns\r\n     */ updateOutdatedCachedAccount(accountKey, accountEntity, logger) {\n        // Only update if account entity is defined and has no tenantProfiles object (is outdated)\n        if (accountEntity && accountEntity.isSingleTenant()) {\n            this.commonLogger?.verbose(\"updateOutdatedCachedAccount: Found a single-tenant (outdated) account entity in the cache, migrating to multi-tenant account entity\");\n            // Get keys of all accounts belonging to user\n            const matchingAccountKeys = this.getAccountKeys().filter((key)=>{\n                return key.startsWith(accountEntity.homeAccountId);\n            });\n            // Get all account entities belonging to user\n            const accountsToMerge = [];\n            matchingAccountKeys.forEach((key)=>{\n                const account = this.getCachedAccountEntity(key);\n                if (account) {\n                    accountsToMerge.push(account);\n                }\n            });\n            // Set base account to home account if available, any account if not\n            const baseAccount = accountsToMerge.find((account)=>{\n                return (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.tenantIdMatchesHomeTenant)(account.realm, account.homeAccountId);\n            }) || accountsToMerge[0];\n            // Populate tenant profiles built from each account entity belonging to the user\n            baseAccount.tenantProfiles = accountsToMerge.map((account)=>{\n                return {\n                    tenantId: account.realm,\n                    localAccountId: account.localAccountId,\n                    name: account.name,\n                    isHomeTenant: (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.tenantIdMatchesHomeTenant)(account.realm, account.homeAccountId)\n                };\n            });\n            const updatedAccount = CacheManager.toObject(new _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__.AccountEntity(), {\n                ...baseAccount\n            });\n            const newAccountKey = updatedAccount.generateAccountKey();\n            // Clear cache of legacy account objects that have been collpsed into tenant profiles\n            matchingAccountKeys.forEach((key)=>{\n                if (key !== newAccountKey) {\n                    this.removeOutdatedAccount(accountKey);\n                }\n            });\n            // Cache updated account object\n            this.setAccount(updatedAccount);\n            logger?.verbose(\"Updated an outdated account entity in the cache\");\n            return updatedAccount;\n        }\n        // No update is necessary\n        return accountEntity;\n    }\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */ async removeAccessToken(key) {\n        const credential = this.getAccessTokenCredential(key);\n        if (!credential) {\n            return;\n        }\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\n        if (credential.credentialType.toLowerCase() === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\n            if (credential.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.POP) {\n                const accessTokenWithAuthSchemeEntity = credential;\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\n                if (kid) {\n                    try {\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\n                    } catch (error) {\n                        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.bindingKeyNotRemoved);\n                    }\n                }\n            }\n        }\n        return this.removeItem(key);\n    }\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */ removeAppMetadata() {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey)=>{\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey);\n            }\n        });\n        return true;\n    }\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */ readAccountFromCache(account) {\n        const accountKey = _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__.AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey, this.commonLogger);\n    }\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param targetRealm {?string}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getIdToken(account, tokenKeys, targetRealm, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\n        const idTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ID_TOKEN,\n            clientId: this.clientId,\n            realm: targetRealm\n        };\n        const idTokenMap = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n        const numIdTokens = idTokenMap.size;\n        if (numIdTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n            return null;\n        } else if (numIdTokens > 1) {\n            let tokensToBeRemoved = idTokenMap;\n            // Multiple tenant profiles and no tenant specified, pick home account\n            if (!targetRealm) {\n                const homeIdTokenMap = new Map();\n                idTokenMap.forEach((idToken, key)=>{\n                    if (idToken.realm === account.tenantId) {\n                        homeIdTokenMap.set(key, idToken);\n                    }\n                });\n                const numHomeIdTokens = homeIdTokenMap.size;\n                if (numHomeIdTokens < 1) {\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result\");\n                    return idTokenMap.values().next().value;\n                } else if (numHomeIdTokens === 1) {\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile\");\n                    return homeIdTokenMap.values().next().value;\n                } else {\n                    // Multiple ID tokens for home tenant profile, remove all and return null\n                    tokensToBeRemoved = homeIdTokenMap;\n                }\n            }\n            // Multiple tokens for a single tenant profile, remove all and return null\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple matching ID tokens found, clearing them\");\n            tokensToBeRemoved.forEach((idToken, key)=>{\n                this.removeIdToken(key);\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({\n                    multiMatchedID: idTokenMap.size\n                }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning ID token\");\n        return idTokenMap.values().next().value;\n    }\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */ getIdTokensByFilter(filter, tokenKeys) {\n        const idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\n        const idTokens = new Map();\n        idTokenKeys.forEach((key)=>{\n            if (!this.idTokenKeyMatchesFilter(key, {\n                clientId: this.clientId,\n                ...filter\n            })) {\n                return;\n            }\n            const idToken = this.getIdTokenCredential(key);\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\n                idTokens.set(key, idToken);\n            }\n        });\n        return idTokens;\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */ idTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */ removeIdToken(key) {\n        this.removeItem(key);\n    }\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */ removeRefreshToken(key) {\n        this.removeItem(key);\n    }\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param request {BaseAuthRequest}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getAccessToken(account, request, tokenKeys, targetRealm, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n        const scopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.createSearchScopes(request.scopes);\n        const authScheme = request.authenticationScheme || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER;\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */ const credentialType = authScheme && authScheme.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER.toLowerCase() ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN;\n        const accessTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId: this.clientId,\n            realm: targetRealm || account.tenantId,\n            target: scopes,\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash\n        };\n        const accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\n        const accessTokens = [];\n        accessTokenKeys.forEach((key)=>{\n            // Validate key\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n                const accessToken = this.getAccessTokenCredential(key);\n                // Validate value\n                if (accessToken && this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n                    accessTokens.push(accessToken);\n                }\n            }\n        });\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n            return null;\n        } else if (numAccessTokens > 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\n            accessTokens.forEach((accessToken)=>{\n                void this.removeAccessToken((0,_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_10__.generateCredentialKey)(accessToken));\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({\n                    multiMatchedAT: accessTokens.length\n                }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n        return accessTokens[0];\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */ accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.target) {\n            const scopes = filter.target.asArray();\n            for(let i = 0; i < scopes.length; i++){\n                if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache lookup a missing scope would be a cache miss\n                    return false;\n                } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\n                    return true;\n                }\n            }\n        }\n        return true;\n    }\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */ getAccessTokensByFilter(filter) {\n        const tokenKeys = this.getTokenKeys();\n        const accessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\n                return;\n            }\n            const accessToken = this.getAccessTokenCredential(key);\n            if (accessToken && this.credentialMatchesFilter(accessToken, filter)) {\n                accessTokens.push(accessToken);\n            }\n        });\n        return accessTokens;\n    }\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param account {AccountInfo}\r\n     * @param familyRT {boolean}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getRefreshToken(account, familyRT, tokenKeys, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n        const id = familyRT ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID : undefined;\n        const refreshTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN,\n            clientId: this.clientId,\n            familyId: id\n        };\n        const refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\n        const refreshTokens = [];\n        refreshTokenKeys.forEach((key)=>{\n            // Validate key\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n                const refreshToken = this.getRefreshTokenCredential(key);\n                // Validate value\n                if (refreshToken && this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n                    refreshTokens.push(refreshToken);\n                }\n            }\n        });\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\n            performanceClient.addFields({\n                multiMatchedRT: numRefreshTokens\n            }, correlationId);\n        }\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n        return refreshTokens[0];\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */ refreshTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\n            return false;\n        }\n        // If familyId is used, clientId is not in the key\n        if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */ readAppMetadataFromCache(environment) {\n        const appMetadataFilter = {\n            environment,\n            clientId: this.clientId\n        };\n        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries = Object.keys(appMetadata).map((key)=>appMetadata[key]);\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        } else if (numAppMetadata > 1) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.multipleMatchingAppMetadata);\n        }\n        return appMetadataEntries[0];\n    }\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */ isAppMetadataFOCI(environment) {\n        const appMetadata = this.readAppMetadataFromCache(environment);\n        return !!(appMetadata && appMetadata.familyId === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID);\n    }\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */ matchHomeAccountId(entity, homeAccountId) {\n        return !!(typeof entity.homeAccountId === \"string\" && homeAccountId === entity.homeAccountId);\n    }\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */ matchLocalAccountIdFromTokenClaims(tokenClaims, localAccountId) {\n        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;\n        return localAccountId === idTokenLocalAccountId;\n    }\n    matchLocalAccountIdFromTenantProfile(tenantProfile, localAccountId) {\n        return tenantProfile.localAccountId === localAccountId;\n    }\n    /**\r\n     * helper to match names\r\n     * @param entity\r\n     * @param name\r\n     * @returns true if the downcased name properties are present and match in the filter and the entity\r\n     */ matchName(claims, name) {\n        return !!(name.toLowerCase() === claims.name?.toLowerCase());\n    }\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */ matchUsername(cachedUsername, filterUsername) {\n        return !!(cachedUsername && typeof cachedUsername === \"string\" && filterUsername?.toLowerCase() === cachedUsername.toLowerCase());\n    }\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */ matchUserAssertionHash(entity, userAssertionHash) {\n        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n    }\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */ matchEnvironment(entity, environment) {\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\n        if (this.staticAuthorityOptions) {\n            const staticAliases = (0,_authority_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_11__.getAliasesFromStaticSources)(this.staticAuthorityOptions, this.commonLogger);\n            if (staticAliases.includes(environment) && staticAliases.includes(entity.environment)) {\n                return true;\n            }\n        }\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n            return true;\n        }\n        return false;\n    }\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */ matchCredentialType(entity, credentialType) {\n        return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n    }\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */ matchClientId(entity, clientId) {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */ matchFamilyId(entity, familyId) {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */ matchRealm(entity, realm) {\n        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());\n    }\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */ matchNativeAccountId(entity, nativeAccountId) {\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n    }\n    /**\r\n     * helper to match loginHint which can be either:\r\n     * 1. login_hint ID token claim\r\n     * 2. username in cached account object\r\n     * 3. upn in ID token claims\r\n     * @param entity\r\n     * @param loginHint\r\n     * @returns\r\n     */ matchLoginHintFromTokenClaims(tokenClaims, loginHint) {\n        if (tokenClaims.login_hint === loginHint) {\n            return true;\n        }\n        if (tokenClaims.preferred_username === loginHint) {\n            return true;\n        }\n        if (tokenClaims.upn === loginHint) {\n            return true;\n        }\n        return false;\n    }\n    /**\r\n     * Helper to match sid\r\n     * @param entity\r\n     * @param sid\r\n     * @returns true if the sid claim is present and matches the filter\r\n     */ matchSid(idTokenClaims, sid) {\n        return idTokenClaims.sid === sid;\n    }\n    matchAuthorityType(entity, authorityType) {\n        return !!(entity.authorityType && authorityType.toLowerCase() === entity.authorityType.toLowerCase());\n    }\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */ matchTarget(entity, target) {\n        const isNotAccessTokenCredential = entity.credentialType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN && entity.credentialType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        if (isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n        const entityScopeSet = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(entity.target);\n        return entityScopeSet.containsScopeSet(target);\n    }\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */ matchTokenType(entity, tokenType) {\n        return !!(entity.tokenType && entity.tokenType === tokenType);\n    }\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param keyId\r\n     */ matchKeyId(entity, keyId) {\n        return !!(entity.keyId && entity.keyId === keyId);\n    }\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */ isAppMetadata(key) {\n        return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.APP_METADATA) !== -1;\n    }\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */ isAuthorityMetadata(key) {\n        return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */ generateAuthorityMetadataCacheKey(authority) {\n        return `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */ static toObject(obj, json) {\n        for(const propertyName in json){\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n/** @internal */ class DefaultStorageClass extends CacheManager {\n    setAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getCachedAccountEntity() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setIdTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getIdTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAccessTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccessTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setRefreshTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getRefreshTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAppMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAppMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setServerTelemetry() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getServerTelemetry() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAuthorityMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAuthorityMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAuthorityMetadataKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setThrottlingCache() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getThrottlingCache() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    removeItem() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccountKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getTokenKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    updateCredentialCacheKey() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    removeOutdatedAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n}\n //# sourceMappingURL=CacheManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountEntity: () => (/* binding */ AccountEntity)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../account/AccountInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../authority/AuthorityType.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../account/TokenClaims.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\");\n/* harmony import */ var _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../authority/ProtocolMode.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      nativeAccountId: Account identifier on the native device\r\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n * }\r\n * @internal\r\n */ class AccountEntity {\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */ generateAccountId() {\n        const accountId = [\n            this.homeAccountId,\n            this.environment\n        ];\n        return accountId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */ generateAccountKey() {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId\n        });\n    }\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */ getAccountInfo() {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            nativeAccountId: this.nativeAccountId,\n            authorityType: this.authorityType,\n            // Deserialize tenant profiles array into a Map\n            tenantProfiles: new Map((this.tenantProfiles || []).map((tenantProfile)=>{\n                return [\n                    tenantProfile.tenantId,\n                    tenantProfile\n                ];\n            }))\n        };\n    }\n    /**\r\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\r\n     */ isSingleTenant() {\n        return !this.tenantProfiles;\n    }\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */ static generateAccountCacheKey(accountInterface) {\n        const homeTenantId = accountInterface.homeAccountId.split(\".\")[1];\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            homeTenantId || accountInterface.tenantId || \"\"\n        ];\n        return accountKey.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param accountDetails\r\n     */ static createAccount(accountDetails, authority, base64Decode) {\n        const account = new AccountEntity();\n        if (authority.authorityType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Adfs) {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.ADFS_ACCOUNT_TYPE;\n        } else if (authority.protocolMode === _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_2__.ProtocolMode.AAD) {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        } else {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        }\n        let clientInfo;\n        if (accountDetails.clientInfo && base64Decode) {\n            clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__.buildClientInfo)(accountDetails.clientInfo, base64Decode);\n        }\n        account.clientInfo = accountDetails.clientInfo;\n        account.homeAccountId = accountDetails.homeAccountId;\n        account.nativeAccountId = accountDetails.nativeAccountId;\n        const env = accountDetails.environment || authority && authority.getPreferredCache();\n        if (!env) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.invalidCacheEnvironment);\n        }\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm = clientInfo?.utid || (0,_account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_6__.getTenantIdFromIdTokenClaims)(accountDetails.idTokenClaims) || \"\";\n        // How do you account for MSA CID here?\n        account.localAccountId = clientInfo?.uid || accountDetails.idTokenClaims?.oid || accountDetails.idTokenClaims?.sub || \"\";\n        /*\r\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n         * policy is configured to return more than 1 email.\r\n         */ const preferredUsername = accountDetails.idTokenClaims?.preferred_username || accountDetails.idTokenClaims?.upn;\n        const email = accountDetails.idTokenClaims?.emails ? accountDetails.idTokenClaims.emails[0] : null;\n        account.username = preferredUsername || email || \"\";\n        account.name = accountDetails.idTokenClaims?.name || \"\";\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n        account.msGraphHost = accountDetails.msGraphHost;\n        if (accountDetails.tenantProfiles) {\n            account.tenantProfiles = accountDetails.tenantProfiles;\n        } else {\n            const tenantProfile = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_7__.buildTenantProfile)(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);\n            account.tenantProfiles = [\n                tenantProfile\n            ];\n        }\n        return account;\n    }\n    /**\r\n     * Creates an AccountEntity object from AccountInfo\r\n     * @param accountInfo\r\n     * @param cloudGraphHostName\r\n     * @param msGraphHost\r\n     * @returns\r\n     */ static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n        const account = new AccountEntity();\n        account.authorityType = accountInfo.authorityType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = accountInfo.homeAccountId;\n        account.localAccountId = accountInfo.localAccountId;\n        account.nativeAccountId = accountInfo.nativeAccountId;\n        account.realm = accountInfo.tenantId;\n        account.environment = accountInfo.environment;\n        account.username = accountInfo.username;\n        account.name = accountInfo.name;\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n        // Serialize tenant profiles map into an array\n        account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);\n        return account;\n    }\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */ static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n        // since ADFS/DSTS do not have tid and does not set client_info\n        if (!(authType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Adfs || authType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Dsts)) {\n            // for cases where there is clientInfo\n            if (serverClientInfo) {\n                try {\n                    const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__.buildClientInfo)(serverClientInfo, cryptoObj.base64Decode);\n                    if (clientInfo.uid && clientInfo.utid) {\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\n                    }\n                } catch (e) {}\n            }\n            logger.warning(\"No client info in response\");\n        }\n        // default to \"sub\" claim\n        return idTokenClaims?.sub || \"\";\n    }\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */ static isAccountEntity(entity) {\n        if (!entity) {\n            return false;\n        }\n        return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n    }\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */ static accountInfoIsEqual(accountA, accountB, compareClaims) {\n        if (!accountA || !accountB) {\n            return false;\n        }\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = accountA.idTokenClaims || {};\n            const accountBClaims = accountB.idTokenClaims || {};\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n        }\n        return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n    }\n}\n //# sourceMappingURL=AccountEntity.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenCacheContext: () => (/* binding */ TokenCacheContext)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ class TokenCacheContext {\n    constructor(tokenCache, hasChanged){\n        this.cache = tokenCache;\n        this.hasChanged = hasChanged;\n    }\n    /**\r\n     * boolean which indicates the changes in cache\r\n     */ get cacheHasChanged() {\n        return this.hasChanged;\n    }\n    /**\r\n     * function to retrieve the token cache\r\n     */ get tokenCache() {\n        return this.cache;\n    }\n}\n //# sourceMappingURL=TokenCacheContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY2FjaGUvcGVyc2lzdGVuY2UvVG9rZW5DYWNoZUNvbnRleHQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7O0NBR0MsR0FBRyxNQUFNQTtJQUNOQyxZQUFZQyxVQUFVLEVBQUVDLFVBQVUsQ0FBRTtRQUNoQyxJQUFJLENBQUNDLEtBQUssR0FBR0Y7UUFDYixJQUFJLENBQUNDLFVBQVUsR0FBR0E7SUFDdEI7SUFDQTs7S0FFQyxHQUNELElBQUlFLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQ0YsVUFBVTtJQUMxQjtJQUNBOztLQUVDLEdBQ0QsSUFBSUQsYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDRSxLQUFLO0lBQ3JCO0FBQ0o7QUFFNkIsQ0FDN0IsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2NhY2hlL3BlcnNpc3RlbmNlL1Rva2VuQ2FjaGVDb250ZXh0Lm1qcz85ZDY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGluc3RhbmNlIGhlbHBzIHRyYWNrIHRoZSBtZW1vcnkgY2hhbmdlcyBmYWNpbGl0YXRpbmdcclxuICogZGVjaXNpb25zIHRvIHJlYWQgZnJvbSBhbmQgd3JpdGUgdG8gdGhlIHBlcnNpc3RlbnQgY2FjaGVcclxuICovIGNsYXNzIFRva2VuQ2FjaGVDb250ZXh0IHtcclxuICAgIGNvbnN0cnVjdG9yKHRva2VuQ2FjaGUsIGhhc0NoYW5nZWQpIHtcclxuICAgICAgICB0aGlzLmNhY2hlID0gdG9rZW5DYWNoZTtcclxuICAgICAgICB0aGlzLmhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBib29sZWFuIHdoaWNoIGluZGljYXRlcyB0aGUgY2hhbmdlcyBpbiBjYWNoZVxyXG4gICAgICovXHJcbiAgICBnZXQgY2FjaGVIYXNDaGFuZ2VkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhhc0NoYW5nZWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHJpZXZlIHRoZSB0b2tlbiBjYWNoZVxyXG4gICAgICovXHJcbiAgICBnZXQgdG9rZW5DYWNoZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBUb2tlbkNhY2hlQ29udGV4dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG9rZW5DYWNoZUNvbnRleHQubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlRva2VuQ2FjaGVDb250ZXh0IiwiY29uc3RydWN0b3IiLCJ0b2tlbkNhY2hlIiwiaGFzQ2hhbmdlZCIsImNhY2hlIiwiY2FjaGVIYXNDaGFuZ2VkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccessTokenEntity: () => (/* binding */ createAccessTokenEntity),\n/* harmony export */   createIdTokenEntity: () => (/* binding */ createIdTokenEntity),\n/* harmony export */   createRefreshTokenEntity: () => (/* binding */ createRefreshTokenEntity),\n/* harmony export */   generateAppMetadataKey: () => (/* binding */ generateAppMetadataKey),\n/* harmony export */   generateAuthorityMetadataExpiresAt: () => (/* binding */ generateAuthorityMetadataExpiresAt),\n/* harmony export */   generateCredentialKey: () => (/* binding */ generateCredentialKey),\n/* harmony export */   isAccessTokenEntity: () => (/* binding */ isAccessTokenEntity),\n/* harmony export */   isAppMetadataEntity: () => (/* binding */ isAppMetadataEntity),\n/* harmony export */   isAuthorityMetadataEntity: () => (/* binding */ isAuthorityMetadataEntity),\n/* harmony export */   isAuthorityMetadataExpired: () => (/* binding */ isAuthorityMetadataExpired),\n/* harmony export */   isCredentialEntity: () => (/* binding */ isCredentialEntity),\n/* harmony export */   isIdTokenEntity: () => (/* binding */ isIdTokenEntity),\n/* harmony export */   isRefreshTokenEntity: () => (/* binding */ isRefreshTokenEntity),\n/* harmony export */   isServerTelemetryEntity: () => (/* binding */ isServerTelemetryEntity),\n/* harmony export */   isThrottlingEntity: () => (/* binding */ isThrottlingEntity),\n/* harmony export */   updateAuthorityEndpointMetadata: () => (/* binding */ updateAuthorityEndpointMetadata),\n/* harmony export */   updateCloudDiscoveryMetadata: () => (/* binding */ updateCloudDiscoveryMetadata)\n/* harmony export */ });\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\r\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\r\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\r\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\r\n * @param credentialEntity\r\n * @returns\r\n */ function generateCredentialKey(credentialEntity) {\n    const credentialKey = [\n        generateAccountId(credentialEntity),\n        generateCredentialId(credentialEntity),\n        generateTarget(credentialEntity),\n        generateClaimsHash(credentialEntity),\n        generateScheme(credentialEntity)\n    ];\n    return credentialKey.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */ function createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n    const idTokenEntity = {\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: idToken,\n        realm: tenantId\n    };\n    return idTokenEntity;\n}\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */ function createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n    const atEntity = {\n        homeAccountId: homeAccountId,\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN,\n        secret: accessToken,\n        cachedAt: (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)().toString(),\n        expiresOn: expiresOn.toString(),\n        extendedExpiresOn: extExpiresOn.toString(),\n        environment: environment,\n        clientId: clientId,\n        realm: tenantId,\n        target: scopes,\n        tokenType: tokenType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER\n    };\n    if (userAssertionHash) {\n        atEntity.userAssertionHash = userAssertionHash;\n    }\n    if (refreshOn) {\n        atEntity.refreshOn = refreshOn.toString();\n    }\n    if (requestedClaims) {\n        atEntity.requestedClaims = requestedClaims;\n        atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */ if (atEntity.tokenType?.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER.toLowerCase()) {\n        atEntity.credentialType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        switch(atEntity.tokenType){\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.POP:\n                // Make sure keyId is present and add it to credential\n                const tokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_2__.extractTokenClaims)(accessToken, base64Decode);\n                if (!tokenClaims?.cnf?.kid) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenClaimsCnfRequiredForSignedJwt);\n                }\n                atEntity.keyId = tokenClaims.cnf.kid;\n                break;\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.SSH:\n                atEntity.keyId = keyId;\n        }\n    }\n    return atEntity;\n}\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */ function createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\n    const rtEntity = {\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: refreshToken\n    };\n    if (userAssertionHash) {\n        rtEntity.userAssertionHash = userAssertionHash;\n    }\n    if (familyId) {\n        rtEntity.familyId = familyId;\n    }\n    if (expiresOn) {\n        rtEntity.expiresOn = expiresOn.toString();\n    }\n    return rtEntity;\n}\nfunction isCredentialEntity(entity) {\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAccessTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isIdTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN;\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isRefreshTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN;\n}\n/**\r\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n */ function generateAccountId(credentialEntity) {\n    const accountId = [\n        credentialEntity.homeAccountId,\n        credentialEntity.environment\n    ];\n    return accountId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n */ function generateCredentialId(credentialEntity) {\n    const clientOrFamilyId = credentialEntity.credentialType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN ? credentialEntity.familyId || credentialEntity.clientId : credentialEntity.clientId;\n    const credentialId = [\n        credentialEntity.credentialType,\n        clientOrFamilyId,\n        credentialEntity.realm || \"\"\n    ];\n    return credentialId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate target key component as per schema: <target>\r\n */ function generateTarget(credentialEntity) {\n    return (credentialEntity.target || \"\").toLowerCase();\n}\n/**\r\n * Generate requested claims key component as per schema: <requestedClaims>\r\n */ function generateClaimsHash(credentialEntity) {\n    return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n/**\r\n * Generate scheme key componenet as per schema: <scheme>\r\n */ function generateScheme(credentialEntity) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */ return credentialEntity.tokenType && credentialEntity.tokenType.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER.toLowerCase() ? credentialEntity.tokenType.toLowerCase() : \"\";\n}\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */ function isServerTelemetryEntity(key, entity) {\n    const validateKey = key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    let validateEntity = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"failedRequests\") && entity.hasOwnProperty(\"errors\") && entity.hasOwnProperty(\"cacheHits\");\n    }\n    return validateKey && validateEntity;\n}\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */ function isThrottlingEntity(key, entity) {\n    let validateKey = false;\n    if (key) {\n        validateKey = key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX) === 0;\n    }\n    let validateEntity = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\n    }\n    return validateKey && validateEntity;\n}\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */ function generateAppMetadataKey({ environment, clientId }) {\n    const appMetaDataKeyArray = [\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA,\n        environment,\n        clientId\n    ];\n    return appMetaDataKeyArray.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAppMetadataEntity(key, entity) {\n    if (!entity) {\n        return false;\n    }\n    return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA) === 0 && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"environment\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAuthorityMetadataEntity(key, entity) {\n    if (!entity) {\n        return false;\n    }\n    return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n}\n/**\r\n * Reset the exiresAt value\r\n */ function generateAuthorityMetadataExpiresAt() {\n    return (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)() + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n}\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\n    authorityMetadata.authorization_endpoint = updatedValues.authorization_endpoint;\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\n    authorityMetadata.issuer = updatedValues.issuer;\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\n}\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\n    authorityMetadata.aliases = updatedValues.aliases;\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\n}\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */ function isAuthorityMetadataExpired(metadata) {\n    return metadata.expiresAt <= (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)();\n}\n //# sourceMappingURL=CacheHelpers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthorizationCodeClient: () => (/* binding */ AuthorizationCodeClient)\n/* harmony export */ });\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _request_RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../request/RequestValidator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/ClientAssertionUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */ class AuthorizationCodeClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n        // Flag to indicate if client is for hybrid spa auth code redemption\n        this.includeRedirectUri = true;\n        this.oidcDefaultScopes = this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n    }\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */ async getAuthCodeUrl(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n        const queryString = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.createAuthCodeUrlQueryString.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateQueryString, this.logger, this.performanceClient, request.correlationId)(request);\n        return _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */ async acquireToken(request, authCodePayload) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n        if (!request.code) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.requestCannotBeMade);\n        }\n        const reqTimestamp = (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.nowSeconds)();\n        const response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.executeTokenRequest.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\n    }\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */ handleFragmentResponse(serverParams, cachedState) {\n        // Handle responses.\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState);\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.authorizationCodeMissingFromServerResponse);\n        }\n        return serverParams;\n    }\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */ getLogoutUri(logoutRequest) {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__.logoutRequestEmpty);\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n        // Construct logout URI\n        return _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */ async executeTokenRequest(authority, request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.createTokenRequestBody.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        let ccsCredential = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.executePostToTokenEndpoint.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\n    }\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */ async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.tokenBodyParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.CLIENT_ID] || this.config.authOptions.clientId);\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */ if (!this.includeRedirectUri) {\n            // Just validate\n            _request_RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_15__.RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes, true, this.oidcDefaultScopes);\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(await (0,_utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_17__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        parameterBuilder.addGrantType(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n        if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.POP) {\n            const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__.PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__.missingSshJwk);\n            }\n        }\n        if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_19__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        let ccsCred = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch(ccsCred.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.RETURN_SPA_CODE]: \"1\"\n            });\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */ async createAuthCodeUrlQueryString(request) {\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateQueryString, correlationId);\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.extraQueryParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.CLIENT_ID] || this.config.authOptions.clientId);\n        const requestScopes = [\n            ...request.scopes || [],\n            ...request.extraScopesToConsent || []\n        ];\n        parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n        parameterBuilder.addCorrelationId(correlationId);\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        if (!(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        }\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                let accountLoginHintClaim = this.extractLoginHint(request.account);\n                if (accountLoginHintClaim && request.domainHint) {\n                    this.logger.warning(`AuthorizationCodeClient.createAuthCodeUrlQueryString: \"domainHint\" param is set, skipping opaque \"login_hint\" claim. Please consider not passing domainHint`);\n                    accountLoginHintClaim = null;\n                }\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (accountSid && request.prompt === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.NONE) {\n                    /*\r\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                     * SessionId is only used in silent calls\r\n                     */ this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        this.addExtraQueryParams(request, parameterBuilder);\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.POP) {\n                const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__.PopTokenGenerator(this.cryptoUtils);\n                // req_cnf is always sent as a string for SPAs\n                let reqCnfData;\n                if (!request.popKid) {\n                    const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                    reqCnfData = generatedReqCnfData.reqCnfString;\n                } else {\n                    reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n                }\n                parameterBuilder.addPopToken(reqCnfData);\n            }\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */ createLogoutUrlQueryString(request) {\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n        this.addExtraQueryParams(request, parameterBuilder);\n        return parameterBuilder.createQueryString();\n    }\n    addExtraQueryParams(request, parameterBuilder) {\n        const hasRequestInstanceAware = request.extraQueryParameters && request.extraQueryParameters.hasOwnProperty(\"instance_aware\");\n        // Set instance_aware flag if config auth param is set\n        if (!hasRequestInstanceAware && this.config.authOptions.instanceAware) {\n            request.extraQueryParameters = request.extraQueryParameters || {};\n            request.extraQueryParameters[\"instance_aware\"] = \"true\";\n        }\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n    }\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */ extractAccountSid(account) {\n        return account.idTokenClaims?.sid || null;\n    }\n    extractLoginHint(account) {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n //# sourceMappingURL=AuthorizationCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/BaseClient.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseClient: () => (/* binding */ BaseClient)\n/* harmony export */ });\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger/Logger.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _authority_AuthorityFactory_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../authority/AuthorityFactory.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../network/ThrottlingUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_NetworkError_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/NetworkError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */ class BaseClient {\n    constructor(configuration, performanceClient){\n        // Set the configuration\n        this.config = (0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_0__.buildClientConfiguration)(configuration);\n        // Initialize the logger\n        this.logger = new _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.Logger(this.config.loggerOptions, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.version);\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */ createTokenRequestHeaders(ccsCred) {\n        const headers = {};\n        headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_TYPE] = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch(ccsCred.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_5__.buildClientInfoFromHomeAccountId)(ccsCred.credential);\n                        headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__.CcsCredentialType.UPN:\n                    headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */ async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n        }\n        const response = await this.sendPostRequest(thumbprint, tokenEndpoint, {\n            body: queryString,\n            headers: headers\n        }, correlationId);\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n        return response;\n    }\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint - Request thumbprint for throttling\r\n     * @param tokenEndpoint - Endpoint to make the POST to\r\n     * @param options - Body and Headers to include on the POST request\r\n     * @param correlationId - CorrelationId for telemetry\r\n     */ async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\n        _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n        let response;\n        try {\n            response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_7__.invokeAsync)(this.networkClient.sendPostRequestAsync.bind(this.networkClient), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__.PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\n            const responseHeaders = response.headers || {};\n            this.performanceClient?.addFields({\n                refreshTokenSize: response.body.refresh_token?.length || 0,\n                httpVerToken: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_HTTP_VERSION] || \"\",\n                requestId: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_REQUEST_ID] || \"\"\n            }, correlationId);\n        } catch (e) {\n            if (e instanceof _error_NetworkError_mjs__WEBPACK_IMPORTED_MODULE_9__.NetworkError) {\n                const responseHeaders = e.responseHeaders;\n                if (responseHeaders) {\n                    this.performanceClient?.addFields({\n                        httpVerToken: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_HTTP_VERSION] || \"\",\n                        requestId: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_REQUEST_ID] || \"\",\n                        contentTypeHeader: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_TYPE] || undefined,\n                        contentLengthHeader: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_LENGTH] || undefined,\n                        httpStatus: e.httpStatus\n                    }, correlationId);\n                }\n                throw e.error;\n            }\n            if (e instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.AuthError) {\n                throw e;\n            } else {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.networkError);\n            }\n        }\n        _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n        return response;\n    }\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */ async updateAuthority(cloudInstanceHostname, correlationId) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__.PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority = await (0,_authority_AuthorityFactory_mjs__WEBPACK_IMPORTED_MODULE_13__.createDiscoveredInstance)(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\n        this.authority = cloudInstanceAuthority;\n    }\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */ createTokenQueryParameters(request) {\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_14__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n        parameterBuilder.addCorrelationId(request.correlationId);\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=BaseClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RefreshTokenClient: () => (/* binding */ RefreshTokenClient)\n/* harmony export */ });\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/ClientAssertionUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/InteractionRequiredAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */ class RefreshTokenClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n    }\n    async acquireToken(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        const reqTimestamp = (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.nowSeconds)();\n        const response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.executeTokenRequest.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_5__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        responseHandler.validateTokenResponse(response.body);\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\n    }\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */ async acquireTokenByRefreshToken(request) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__.tokenRequestEmpty);\n        }\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_9__.noAccountInSilentRequest);\n        }\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError && e.errorCode === _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.noTokensFound;\n                const clientMismatchErrorWithFamilyRT = e instanceof _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_12__.ServerError && e.errorCode === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Errors.INVALID_GRANT_ERROR && e.subError === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Errors.CLIENT_MISMATCH_ERROR;\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n                // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n    }\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */ async acquireTokenWithCachedRefreshToken(request, foci) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invoke)(this.cacheManager.getRefreshToken.bind(this.cacheManager), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, undefined, this.performanceClient, request.correlationId);\n        if (!refreshToken) {\n            throw (0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.createInteractionRequiredAuthError)(_error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.noTokensFound);\n        }\n        if (refreshToken.expiresOn && (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.isTokenExpired)(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds || DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\n            throw (0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.createInteractionRequiredAuthError)(_error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.refreshTokenExpired);\n        }\n        // attach cached RT size to the current measurement\n        const refreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n        try {\n            return await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\n        } catch (e) {\n            if (e instanceof _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError && e.subError === _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.badToken) {\n                // Remove bad refresh token from cache\n                this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\n                const badRefreshTokenKey = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_14__.generateCredentialKey)(refreshToken);\n                this.cacheManager.removeRefreshToken(badRefreshTokenKey);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */ async executeTokenRequest(request, authority) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_15__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createTokenRequestBody.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.executePostToTokenEndpoint.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\n    }\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */ async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n        const correlationId = request.correlationId;\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_16__.RequestParameterBuilder(correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.tokenBodyParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_17__.CLIENT_ID] || this.config.authOptions.clientId);\n        if (request.redirectUri) {\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        parameterBuilder.addScopes(request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n        parameterBuilder.addGrantType(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.GrantType.REFRESH_TOKEN_GRANT);\n        parameterBuilder.addClientInfo();\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_18__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        parameterBuilder.addRefreshToken(request.refreshToken);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(await (0,_utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_19__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.POP) {\n            const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_20__.PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__.missingSshJwk);\n            }\n        }\n        if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_21__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch(request.ccsCredential.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_22__.buildClientInfoFromHomeAccountId)(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=RefreshTokenClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentFlowClient: () => (/* binding */ SilentFlowClient)\n/* harmony export */ });\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RefreshTokenClient.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _authority_Authority_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../authority/Authority.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class SilentFlowClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n    }\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */ async acquireToken(request) {\n        try {\n            const [authResponse, cacheOutcome] = await this.acquireCachedToken({\n                ...request,\n                scopes: request.scopes?.length ? request.scopes : [\n                    ..._utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES\n                ]\n            });\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (cacheOutcome === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\n                // refresh the access token in the background\n                const refreshTokenClient = new _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__.RefreshTokenClient(this.config, this.performanceClient);\n                refreshTokenClient.acquireTokenByRefreshToken(request).catch(()=>{\n                // do nothing, this is running in the background and no action is to be taken upon success or failure\n                });\n            }\n            // return the cached token\n            return authResponse;\n        } catch (e) {\n            if (e instanceof _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError && e.errorCode === _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired) {\n                const refreshTokenClient = new _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__.RefreshTokenClient(this.config, this.performanceClient);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */ async acquireCachedToken(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\n        let lastCacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NOT_APPLICABLE;\n        if (request.forceRefresh || !this.config.cacheOptions.claimsBasedCachingEnabled && !_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.StringUtils.isEmptyObj(request.claims)) {\n            // Must refresh due to present force_refresh flag.\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.noAccountInSilentRequest);\n        }\n        const requestTenantId = request.account.tenantId || (0,_authority_Authority_mjs__WEBPACK_IMPORTED_MODULE_7__.getTenantFromAuthorityString)(request.authority);\n        const tokenKeys = this.cacheManager.getTokenKeys();\n        const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId, this.performanceClient, request.correlationId);\n        if (!cachedAccessToken) {\n            // must refresh due to non-existent access_token\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        } else if ((0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.wasClockTurnedBack)(cachedAccessToken.cachedAt) || (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.isTokenExpired)(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            // must refresh due to the expires_in value\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        } else if (cachedAccessToken.refreshOn && (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.isTokenExpired)(cachedAccessToken.refreshOn, 0)) {\n            // must refresh (in the background) due to the refresh_in value\n            lastCacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED;\n        // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\n        }\n        const environment = request.authority || this.authority.getPreferredCache();\n        const cacheRecord = {\n            account: this.cacheManager.readAccountFromCache(request.account),\n            accessToken: cachedAccessToken,\n            idToken: this.cacheManager.getIdToken(request.account, tokenKeys, requestTenantId, this.performanceClient, request.correlationId),\n            refreshToken: null,\n            appMetadata: this.cacheManager.readAppMetadataFromCache(environment)\n        };\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n        return [\n            await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_9__.invokeAsync)(this.generateResultFromCacheRecord.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),\n            lastCacheOutcome\n        ];\n    }\n    setCacheOutcome(cacheOutcome, correlationId) {\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\n        this.performanceClient?.addFields({\n            cacheOutcome: cacheOutcome\n        }, correlationId);\n        if (cacheOutcome !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NOT_APPLICABLE) {\n            this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\n        }\n    }\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */ async generateResultFromCacheRecord(cacheRecord, request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\n        let idTokenClaims;\n        if (cacheRecord.idToken) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__.extractTokenClaims)(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\n        }\n        // token max_age check\n        if (request.maxAge || request.maxAge === 0) {\n            const authTime = idTokenClaims?.auth_time;\n            if (!authTime) {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.authTimeNotFound);\n            }\n            (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__.checkMaxAge)(authTime, request.maxAge);\n        }\n        return _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_11__.ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\n    }\n}\n //# sourceMappingURL=SilentFlowClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_SYSTEM_OPTIONS: () => (/* binding */ DEFAULT_SYSTEM_OPTIONS),\n/* harmony export */   buildClientConfiguration: () => (/* binding */ buildClientConfiguration),\n/* harmony export */   isOidcProtocolMode: () => (/* binding */ isOidcProtocolMode)\n/* harmony export */ });\n/* harmony import */ var _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/ICrypto.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger/Logger.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _authority_AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../authority/AuthorityOptions.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _cache_CacheManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/CacheManager.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../authority/ProtocolMode.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_SYSTEM_OPTIONS = {\n    tokenRenewalOffsetSeconds: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n    loggerCallback: ()=>{\n    // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Info,\n    correlationId: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n    claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n    async sendGetRequestAsync () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.methodNotImplemented);\n    },\n    async sendPostRequestAsync () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.methodNotImplemented);\n    }\n};\nconst DEFAULT_LIBRARY_INFO = {\n    sku: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.SKU,\n    version: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__.version,\n    cpu: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n    os: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n    clientSecret: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n    clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n    azureCloudInstance: _authority_AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_5__.AzureCloudInstance.None,\n    tenant: `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n    application: {\n        appName: \"\",\n        appVersion: \"\"\n    }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */ function buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache }) {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption\n    };\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: {\n            ...DEFAULT_SYSTEM_OPTIONS,\n            ...userSystemOptions\n        },\n        loggerOptions: loggerOptions,\n        cacheOptions: {\n            ...DEFAULT_CACHE_OPTIONS,\n            ...userCacheOptions\n        },\n        storageInterface: storageImplementation || new _cache_CacheManager_mjs__WEBPACK_IMPORTED_MODULE_6__.DefaultStorageClass(userAuthOptions.clientId, _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION, new _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.Logger(loggerOptions)),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: {\n            ...DEFAULT_LIBRARY_INFO,\n            ...libraryInfo\n        },\n        telemetry: {\n            ...DEFAULT_TELEMETRY_OPTIONS,\n            ...telemetry\n        },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null\n    };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */ function buildAuthOptions(authOptions) {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        instanceAware: false,\n        ...authOptions\n    };\n}\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */ function isOidcProtocolMode(config) {\n    return config.authOptions.authority.options.protocolMode === _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_8__.ProtocolMode.OIDC;\n}\n //# sourceMappingURL=ClientConfiguration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCESS_TOKEN: () => (/* binding */ ACCESS_TOKEN),\n/* harmony export */   BROKER_CLIENT_ID: () => (/* binding */ BROKER_CLIENT_ID),\n/* harmony export */   BROKER_REDIRECT_URI: () => (/* binding */ BROKER_REDIRECT_URI),\n/* harmony export */   CCS_HEADER: () => (/* binding */ CCS_HEADER),\n/* harmony export */   CLAIMS: () => (/* binding */ CLAIMS),\n/* harmony export */   CLIENT_ASSERTION: () => (/* binding */ CLIENT_ASSERTION),\n/* harmony export */   CLIENT_ASSERTION_TYPE: () => (/* binding */ CLIENT_ASSERTION_TYPE),\n/* harmony export */   CLIENT_ID: () => (/* binding */ CLIENT_ID),\n/* harmony export */   CLIENT_INFO: () => (/* binding */ CLIENT_INFO),\n/* harmony export */   CLIENT_REQUEST_ID: () => (/* binding */ CLIENT_REQUEST_ID),\n/* harmony export */   CLIENT_SECRET: () => (/* binding */ CLIENT_SECRET),\n/* harmony export */   CODE: () => (/* binding */ CODE),\n/* harmony export */   CODE_CHALLENGE: () => (/* binding */ CODE_CHALLENGE),\n/* harmony export */   CODE_CHALLENGE_METHOD: () => (/* binding */ CODE_CHALLENGE_METHOD),\n/* harmony export */   CODE_VERIFIER: () => (/* binding */ CODE_VERIFIER),\n/* harmony export */   DEVICE_CODE: () => (/* binding */ DEVICE_CODE),\n/* harmony export */   DOMAIN_HINT: () => (/* binding */ DOMAIN_HINT),\n/* harmony export */   ERROR: () => (/* binding */ ERROR),\n/* harmony export */   ERROR_DESCRIPTION: () => (/* binding */ ERROR_DESCRIPTION),\n/* harmony export */   EXPIRES_IN: () => (/* binding */ EXPIRES_IN),\n/* harmony export */   FOCI: () => (/* binding */ FOCI),\n/* harmony export */   GRANT_TYPE: () => (/* binding */ GRANT_TYPE),\n/* harmony export */   ID_TOKEN: () => (/* binding */ ID_TOKEN),\n/* harmony export */   ID_TOKEN_HINT: () => (/* binding */ ID_TOKEN_HINT),\n/* harmony export */   LOGIN_HINT: () => (/* binding */ LOGIN_HINT),\n/* harmony export */   LOGOUT_HINT: () => (/* binding */ LOGOUT_HINT),\n/* harmony export */   NATIVE_BROKER: () => (/* binding */ NATIVE_BROKER),\n/* harmony export */   NONCE: () => (/* binding */ NONCE),\n/* harmony export */   OBO_ASSERTION: () => (/* binding */ OBO_ASSERTION),\n/* harmony export */   ON_BEHALF_OF: () => (/* binding */ ON_BEHALF_OF),\n/* harmony export */   POST_LOGOUT_URI: () => (/* binding */ POST_LOGOUT_URI),\n/* harmony export */   PROMPT: () => (/* binding */ PROMPT),\n/* harmony export */   REDIRECT_URI: () => (/* binding */ REDIRECT_URI),\n/* harmony export */   REFRESH_TOKEN: () => (/* binding */ REFRESH_TOKEN),\n/* harmony export */   REFRESH_TOKEN_EXPIRES_IN: () => (/* binding */ REFRESH_TOKEN_EXPIRES_IN),\n/* harmony export */   REQUESTED_TOKEN_USE: () => (/* binding */ REQUESTED_TOKEN_USE),\n/* harmony export */   REQ_CNF: () => (/* binding */ REQ_CNF),\n/* harmony export */   RESPONSE_MODE: () => (/* binding */ RESPONSE_MODE),\n/* harmony export */   RESPONSE_TYPE: () => (/* binding */ RESPONSE_TYPE),\n/* harmony export */   RETURN_SPA_CODE: () => (/* binding */ RETURN_SPA_CODE),\n/* harmony export */   SCOPE: () => (/* binding */ SCOPE),\n/* harmony export */   SESSION_STATE: () => (/* binding */ SESSION_STATE),\n/* harmony export */   SID: () => (/* binding */ SID),\n/* harmony export */   STATE: () => (/* binding */ STATE),\n/* harmony export */   TOKEN_TYPE: () => (/* binding */ TOKEN_TYPE),\n/* harmony export */   X_APP_NAME: () => (/* binding */ X_APP_NAME),\n/* harmony export */   X_APP_VER: () => (/* binding */ X_APP_VER),\n/* harmony export */   X_CLIENT_CPU: () => (/* binding */ X_CLIENT_CPU),\n/* harmony export */   X_CLIENT_CURR_TELEM: () => (/* binding */ X_CLIENT_CURR_TELEM),\n/* harmony export */   X_CLIENT_EXTRA_SKU: () => (/* binding */ X_CLIENT_EXTRA_SKU),\n/* harmony export */   X_CLIENT_LAST_TELEM: () => (/* binding */ X_CLIENT_LAST_TELEM),\n/* harmony export */   X_CLIENT_OS: () => (/* binding */ X_CLIENT_OS),\n/* harmony export */   X_CLIENT_SKU: () => (/* binding */ X_CLIENT_SKU),\n/* harmony export */   X_CLIENT_VER: () => (/* binding */ X_CLIENT_VER),\n/* harmony export */   X_MS_LIB_CAPABILITY: () => (/* binding */ X_MS_LIB_CAPABILITY)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CLIENT_ID = \"client_id\";\nconst REDIRECT_URI = \"redirect_uri\";\nconst RESPONSE_TYPE = \"response_type\";\nconst RESPONSE_MODE = \"response_mode\";\nconst GRANT_TYPE = \"grant_type\";\nconst CLAIMS = \"claims\";\nconst SCOPE = \"scope\";\nconst ERROR = \"error\";\nconst ERROR_DESCRIPTION = \"error_description\";\nconst ACCESS_TOKEN = \"access_token\";\nconst ID_TOKEN = \"id_token\";\nconst REFRESH_TOKEN = \"refresh_token\";\nconst EXPIRES_IN = \"expires_in\";\nconst REFRESH_TOKEN_EXPIRES_IN = \"refresh_token_expires_in\";\nconst STATE = \"state\";\nconst NONCE = \"nonce\";\nconst PROMPT = \"prompt\";\nconst SESSION_STATE = \"session_state\";\nconst CLIENT_INFO = \"client_info\";\nconst CODE = \"code\";\nconst CODE_CHALLENGE = \"code_challenge\";\nconst CODE_CHALLENGE_METHOD = \"code_challenge_method\";\nconst CODE_VERIFIER = \"code_verifier\";\nconst CLIENT_REQUEST_ID = \"client-request-id\";\nconst X_CLIENT_SKU = \"x-client-SKU\";\nconst X_CLIENT_VER = \"x-client-VER\";\nconst X_CLIENT_OS = \"x-client-OS\";\nconst X_CLIENT_CPU = \"x-client-CPU\";\nconst X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\nconst X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\nconst X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\nconst X_APP_NAME = \"x-app-name\";\nconst X_APP_VER = \"x-app-ver\";\nconst POST_LOGOUT_URI = \"post_logout_redirect_uri\";\nconst ID_TOKEN_HINT = \"id_token_hint\";\nconst DEVICE_CODE = \"device_code\";\nconst CLIENT_SECRET = \"client_secret\";\nconst CLIENT_ASSERTION = \"client_assertion\";\nconst CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\nconst TOKEN_TYPE = \"token_type\";\nconst REQ_CNF = \"req_cnf\";\nconst OBO_ASSERTION = \"assertion\";\nconst REQUESTED_TOKEN_USE = \"requested_token_use\";\nconst ON_BEHALF_OF = \"on_behalf_of\";\nconst FOCI = \"foci\";\nconst CCS_HEADER = \"X-AnchorMailbox\";\nconst RETURN_SPA_CODE = \"return_spa_code\";\nconst NATIVE_BROKER = \"nativebroker\";\nconst LOGOUT_HINT = \"logout_hint\";\nconst SID = \"sid\";\nconst LOGIN_HINT = \"login_hint\";\nconst DOMAIN_HINT = \"domain_hint\";\nconst X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\nconst BROKER_CLIENT_ID = \"brk_client_id\";\nconst BROKER_REDIRECT_URI = \"brk_redirect_uri\";\n //# sourceMappingURL=AADServerParamKeys.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY29uc3RhbnRzL0FBRFNlcnZlclBhcmFtS2V5cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLFlBQVk7QUFDbEIsTUFBTUMsZUFBZTtBQUNyQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsU0FBUztBQUNmLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxRQUFRO0FBQ2QsTUFBTUMsb0JBQW9CO0FBQzFCLE1BQU1DLGVBQWU7QUFDckIsTUFBTUMsV0FBVztBQUNqQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQywyQkFBMkI7QUFDakMsTUFBTUMsUUFBUTtBQUNkLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxTQUFTO0FBQ2YsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsT0FBTztBQUNiLE1BQU1DLGlCQUFpQjtBQUN2QixNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLGVBQWU7QUFDckIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLHNCQUFzQjtBQUM1QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsc0JBQXNCO0FBQzVCLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsWUFBWTtBQUNsQixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG1CQUFtQjtBQUN6QixNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxVQUFVO0FBQ2hCLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsZUFBZTtBQUNyQixNQUFNQyxPQUFPO0FBQ2IsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsTUFBTTtBQUNaLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsbUJBQW1CO0FBQ3pCLE1BQU1DLHNCQUFzQjtBQUV5dkIsQ0FDcnhCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9jb25zdGFudHMvQUFEU2VydmVyUGFyYW1LZXlzLm1qcz8zZWIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IENMSUVOVF9JRCA9IFwiY2xpZW50X2lkXCI7XHJcbmNvbnN0IFJFRElSRUNUX1VSSSA9IFwicmVkaXJlY3RfdXJpXCI7XHJcbmNvbnN0IFJFU1BPTlNFX1RZUEUgPSBcInJlc3BvbnNlX3R5cGVcIjtcclxuY29uc3QgUkVTUE9OU0VfTU9ERSA9IFwicmVzcG9uc2VfbW9kZVwiO1xyXG5jb25zdCBHUkFOVF9UWVBFID0gXCJncmFudF90eXBlXCI7XHJcbmNvbnN0IENMQUlNUyA9IFwiY2xhaW1zXCI7XHJcbmNvbnN0IFNDT1BFID0gXCJzY29wZVwiO1xyXG5jb25zdCBFUlJPUiA9IFwiZXJyb3JcIjtcclxuY29uc3QgRVJST1JfREVTQ1JJUFRJT04gPSBcImVycm9yX2Rlc2NyaXB0aW9uXCI7XHJcbmNvbnN0IEFDQ0VTU19UT0tFTiA9IFwiYWNjZXNzX3Rva2VuXCI7XHJcbmNvbnN0IElEX1RPS0VOID0gXCJpZF90b2tlblwiO1xyXG5jb25zdCBSRUZSRVNIX1RPS0VOID0gXCJyZWZyZXNoX3Rva2VuXCI7XHJcbmNvbnN0IEVYUElSRVNfSU4gPSBcImV4cGlyZXNfaW5cIjtcclxuY29uc3QgUkVGUkVTSF9UT0tFTl9FWFBJUkVTX0lOID0gXCJyZWZyZXNoX3Rva2VuX2V4cGlyZXNfaW5cIjtcclxuY29uc3QgU1RBVEUgPSBcInN0YXRlXCI7XHJcbmNvbnN0IE5PTkNFID0gXCJub25jZVwiO1xyXG5jb25zdCBQUk9NUFQgPSBcInByb21wdFwiO1xyXG5jb25zdCBTRVNTSU9OX1NUQVRFID0gXCJzZXNzaW9uX3N0YXRlXCI7XHJcbmNvbnN0IENMSUVOVF9JTkZPID0gXCJjbGllbnRfaW5mb1wiO1xyXG5jb25zdCBDT0RFID0gXCJjb2RlXCI7XHJcbmNvbnN0IENPREVfQ0hBTExFTkdFID0gXCJjb2RlX2NoYWxsZW5nZVwiO1xyXG5jb25zdCBDT0RFX0NIQUxMRU5HRV9NRVRIT0QgPSBcImNvZGVfY2hhbGxlbmdlX21ldGhvZFwiO1xyXG5jb25zdCBDT0RFX1ZFUklGSUVSID0gXCJjb2RlX3ZlcmlmaWVyXCI7XHJcbmNvbnN0IENMSUVOVF9SRVFVRVNUX0lEID0gXCJjbGllbnQtcmVxdWVzdC1pZFwiO1xyXG5jb25zdCBYX0NMSUVOVF9TS1UgPSBcIngtY2xpZW50LVNLVVwiO1xyXG5jb25zdCBYX0NMSUVOVF9WRVIgPSBcIngtY2xpZW50LVZFUlwiO1xyXG5jb25zdCBYX0NMSUVOVF9PUyA9IFwieC1jbGllbnQtT1NcIjtcclxuY29uc3QgWF9DTElFTlRfQ1BVID0gXCJ4LWNsaWVudC1DUFVcIjtcclxuY29uc3QgWF9DTElFTlRfQ1VSUl9URUxFTSA9IFwieC1jbGllbnQtY3VycmVudC10ZWxlbWV0cnlcIjtcclxuY29uc3QgWF9DTElFTlRfTEFTVF9URUxFTSA9IFwieC1jbGllbnQtbGFzdC10ZWxlbWV0cnlcIjtcclxuY29uc3QgWF9NU19MSUJfQ0FQQUJJTElUWSA9IFwieC1tcy1saWItY2FwYWJpbGl0eVwiO1xyXG5jb25zdCBYX0FQUF9OQU1FID0gXCJ4LWFwcC1uYW1lXCI7XHJcbmNvbnN0IFhfQVBQX1ZFUiA9IFwieC1hcHAtdmVyXCI7XHJcbmNvbnN0IFBPU1RfTE9HT1VUX1VSSSA9IFwicG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpXCI7XHJcbmNvbnN0IElEX1RPS0VOX0hJTlQgPSBcImlkX3Rva2VuX2hpbnRcIjtcclxuY29uc3QgREVWSUNFX0NPREUgPSBcImRldmljZV9jb2RlXCI7XHJcbmNvbnN0IENMSUVOVF9TRUNSRVQgPSBcImNsaWVudF9zZWNyZXRcIjtcclxuY29uc3QgQ0xJRU5UX0FTU0VSVElPTiA9IFwiY2xpZW50X2Fzc2VydGlvblwiO1xyXG5jb25zdCBDTElFTlRfQVNTRVJUSU9OX1RZUEUgPSBcImNsaWVudF9hc3NlcnRpb25fdHlwZVwiO1xyXG5jb25zdCBUT0tFTl9UWVBFID0gXCJ0b2tlbl90eXBlXCI7XHJcbmNvbnN0IFJFUV9DTkYgPSBcInJlcV9jbmZcIjtcclxuY29uc3QgT0JPX0FTU0VSVElPTiA9IFwiYXNzZXJ0aW9uXCI7XHJcbmNvbnN0IFJFUVVFU1RFRF9UT0tFTl9VU0UgPSBcInJlcXVlc3RlZF90b2tlbl91c2VcIjtcclxuY29uc3QgT05fQkVIQUxGX09GID0gXCJvbl9iZWhhbGZfb2ZcIjtcclxuY29uc3QgRk9DSSA9IFwiZm9jaVwiO1xyXG5jb25zdCBDQ1NfSEVBREVSID0gXCJYLUFuY2hvck1haWxib3hcIjtcclxuY29uc3QgUkVUVVJOX1NQQV9DT0RFID0gXCJyZXR1cm5fc3BhX2NvZGVcIjtcclxuY29uc3QgTkFUSVZFX0JST0tFUiA9IFwibmF0aXZlYnJva2VyXCI7XHJcbmNvbnN0IExPR09VVF9ISU5UID0gXCJsb2dvdXRfaGludFwiO1xyXG5jb25zdCBTSUQgPSBcInNpZFwiO1xyXG5jb25zdCBMT0dJTl9ISU5UID0gXCJsb2dpbl9oaW50XCI7XHJcbmNvbnN0IERPTUFJTl9ISU5UID0gXCJkb21haW5faGludFwiO1xyXG5jb25zdCBYX0NMSUVOVF9FWFRSQV9TS1UgPSBcIngtY2xpZW50LXh0cmEtc2t1XCI7XHJcbmNvbnN0IEJST0tFUl9DTElFTlRfSUQgPSBcImJya19jbGllbnRfaWRcIjtcclxuY29uc3QgQlJPS0VSX1JFRElSRUNUX1VSSSA9IFwiYnJrX3JlZGlyZWN0X3VyaVwiO1xuXG5leHBvcnQgeyBBQ0NFU1NfVE9LRU4sIEJST0tFUl9DTElFTlRfSUQsIEJST0tFUl9SRURJUkVDVF9VUkksIENDU19IRUFERVIsIENMQUlNUywgQ0xJRU5UX0FTU0VSVElPTiwgQ0xJRU5UX0FTU0VSVElPTl9UWVBFLCBDTElFTlRfSUQsIENMSUVOVF9JTkZPLCBDTElFTlRfUkVRVUVTVF9JRCwgQ0xJRU5UX1NFQ1JFVCwgQ09ERSwgQ09ERV9DSEFMTEVOR0UsIENPREVfQ0hBTExFTkdFX01FVEhPRCwgQ09ERV9WRVJJRklFUiwgREVWSUNFX0NPREUsIERPTUFJTl9ISU5ULCBFUlJPUiwgRVJST1JfREVTQ1JJUFRJT04sIEVYUElSRVNfSU4sIEZPQ0ksIEdSQU5UX1RZUEUsIElEX1RPS0VOLCBJRF9UT0tFTl9ISU5ULCBMT0dJTl9ISU5ULCBMT0dPVVRfSElOVCwgTkFUSVZFX0JST0tFUiwgTk9OQ0UsIE9CT19BU1NFUlRJT04sIE9OX0JFSEFMRl9PRiwgUE9TVF9MT0dPVVRfVVJJLCBQUk9NUFQsIFJFRElSRUNUX1VSSSwgUkVGUkVTSF9UT0tFTiwgUkVGUkVTSF9UT0tFTl9FWFBJUkVTX0lOLCBSRVFVRVNURURfVE9LRU5fVVNFLCBSRVFfQ05GLCBSRVNQT05TRV9NT0RFLCBSRVNQT05TRV9UWVBFLCBSRVRVUk5fU1BBX0NPREUsIFNDT1BFLCBTRVNTSU9OX1NUQVRFLCBTSUQsIFNUQVRFLCBUT0tFTl9UWVBFLCBYX0FQUF9OQU1FLCBYX0FQUF9WRVIsIFhfQ0xJRU5UX0NQVSwgWF9DTElFTlRfQ1VSUl9URUxFTSwgWF9DTElFTlRfRVhUUkFfU0tVLCBYX0NMSUVOVF9MQVNUX1RFTEVNLCBYX0NMSUVOVF9PUywgWF9DTElFTlRfU0tVLCBYX0NMSUVOVF9WRVIsIFhfTVNfTElCX0NBUEFCSUxJVFkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFBRFNlcnZlclBhcmFtS2V5cy5tanMubWFwXG4iXSwibmFtZXMiOlsiQ0xJRU5UX0lEIiwiUkVESVJFQ1RfVVJJIiwiUkVTUE9OU0VfVFlQRSIsIlJFU1BPTlNFX01PREUiLCJHUkFOVF9UWVBFIiwiQ0xBSU1TIiwiU0NPUEUiLCJFUlJPUiIsIkVSUk9SX0RFU0NSSVBUSU9OIiwiQUNDRVNTX1RPS0VOIiwiSURfVE9LRU4iLCJSRUZSRVNIX1RPS0VOIiwiRVhQSVJFU19JTiIsIlJFRlJFU0hfVE9LRU5fRVhQSVJFU19JTiIsIlNUQVRFIiwiTk9OQ0UiLCJQUk9NUFQiLCJTRVNTSU9OX1NUQVRFIiwiQ0xJRU5UX0lORk8iLCJDT0RFIiwiQ09ERV9DSEFMTEVOR0UiLCJDT0RFX0NIQUxMRU5HRV9NRVRIT0QiLCJDT0RFX1ZFUklGSUVSIiwiQ0xJRU5UX1JFUVVFU1RfSUQiLCJYX0NMSUVOVF9TS1UiLCJYX0NMSUVOVF9WRVIiLCJYX0NMSUVOVF9PUyIsIlhfQ0xJRU5UX0NQVSIsIlhfQ0xJRU5UX0NVUlJfVEVMRU0iLCJYX0NMSUVOVF9MQVNUX1RFTEVNIiwiWF9NU19MSUJfQ0FQQUJJTElUWSIsIlhfQVBQX05BTUUiLCJYX0FQUF9WRVIiLCJQT1NUX0xPR09VVF9VUkkiLCJJRF9UT0tFTl9ISU5UIiwiREVWSUNFX0NPREUiLCJDTElFTlRfU0VDUkVUIiwiQ0xJRU5UX0FTU0VSVElPTiIsIkNMSUVOVF9BU1NFUlRJT05fVFlQRSIsIlRPS0VOX1RZUEUiLCJSRVFfQ05GIiwiT0JPX0FTU0VSVElPTiIsIlJFUVVFU1RFRF9UT0tFTl9VU0UiLCJPTl9CRUhBTEZfT0YiLCJGT0NJIiwiQ0NTX0hFQURFUiIsIlJFVFVSTl9TUEFfQ09ERSIsIk5BVElWRV9CUk9LRVIiLCJMT0dPVVRfSElOVCIsIlNJRCIsIkxPR0lOX0hJTlQiLCJET01BSU5fSElOVCIsIlhfQ0xJRU5UX0VYVFJBX1NLVSIsIkJST0tFUl9DTElFTlRfSUQiLCJCUk9LRVJfUkVESVJFQ1RfVVJJIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CRYPTO_IMPLEMENTATION: () => (/* binding */ DEFAULT_CRYPTO_IMPLEMENTATION)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_CRYPTO_IMPLEMENTATION = {\n    createNewGuid: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64Decode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64Encode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64UrlEncode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    encodeKid: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async getPublicKeyThumbprint () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async removeTokenBindingKey () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async clearKeystore () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async signJwt () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async hashString () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    }\n};\n //# sourceMappingURL=ICrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY3J5cHRvL0lDcnlwdG8ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNxRTtBQUNJO0FBRXpFOzs7Q0FHQyxHQUNELE1BQU1FLGdDQUFnQztJQUNsQ0MsZUFBZTtRQUNYLE1BQU1ILGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBRyxjQUFjO1FBQ1YsTUFBTUosaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0FJLGNBQWM7UUFDVixNQUFNTCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQUssaUJBQWlCO1FBQ2IsTUFBTU4saUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0FNLFdBQVc7UUFDUCxNQUFNUCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQSxNQUFNTztRQUNGLE1BQU1SLGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBLE1BQU1RO1FBQ0YsTUFBTVQsaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0EsTUFBTVM7UUFDRixNQUFNVixpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQSxNQUFNVTtRQUNGLE1BQU1YLGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBLE1BQU1XO1FBQ0YsTUFBTVosaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0FBQ0o7QUFFeUMsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2NyeXB0by9JQ3J5cHRvLm1qcz82ZTRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50QXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBtZXRob2ROb3RJbXBsZW1lbnRlZCB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0NSWVBUT19JTVBMRU1FTlRBVElPTiA9IHtcclxuICAgIGNyZWF0ZU5ld0d1aWQ6ICgpID0+IHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGJhc2U2NERlY29kZTogKCkgPT4ge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYmFzZTY0RW5jb2RlOiAoKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBiYXNlNjRVcmxFbmNvZGU6ICgpID0+IHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGVuY29kZUtpZDogKCkgPT4ge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0UHVibGljS2V5VGh1bWJwcmludCgpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIHJlbW92ZVRva2VuQmluZGluZ0tleSgpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIGNsZWFyS2V5c3RvcmUoKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBzaWduSnd0KCkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgaGFzaFN0cmluZygpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxufTtcblxuZXhwb3J0IHsgREVGQVVMVF9DUllQVE9fSU1QTEVNRU5UQVRJT04gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlDcnlwdG8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsIm1ldGhvZE5vdEltcGxlbWVudGVkIiwiREVGQVVMVF9DUllQVE9fSU1QTEVNRU5UQVRJT04iLCJjcmVhdGVOZXdHdWlkIiwiYmFzZTY0RGVjb2RlIiwiYmFzZTY0RW5jb2RlIiwiYmFzZTY0VXJsRW5jb2RlIiwiZW5jb2RlS2lkIiwiZ2V0UHVibGljS2V5VGh1bWJwcmludCIsInJlbW92ZVRva2VuQmluZGluZ0tleSIsImNsZWFyS2V5c3RvcmUiLCJzaWduSnd0IiwiaGFzaFN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JoseHeader: () => (/* binding */ JoseHeader)\n/* harmony export */ });\n/* harmony import */ var _error_JoseHeaderError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/JoseHeaderError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/JoseHeaderErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class JoseHeader {\n    constructor(options){\n        this.typ = options.typ;\n        this.alg = options.alg;\n        this.kid = options.kid;\n    }\n    /**\r\n     * Builds SignedHttpRequest formatted JOSE Header from the\r\n     * JOSE Header options provided or previously set on the object and returns\r\n     * the stringified header object.\r\n     * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.\r\n     * @param shrHeaderOptions\r\n     * @returns\r\n     */ static getShrHeaderString(shrHeaderOptions) {\n        // KeyID is required on the SHR header\n        if (!shrHeaderOptions.kid) {\n            throw (0,_error_JoseHeaderError_mjs__WEBPACK_IMPORTED_MODULE_0__.createJoseHeaderError)(_error_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.missingKidError);\n        }\n        // Alg is required on the SHR header\n        if (!shrHeaderOptions.alg) {\n            throw (0,_error_JoseHeaderError_mjs__WEBPACK_IMPORTED_MODULE_0__.createJoseHeaderError)(_error_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.missingAlgError);\n        }\n        const shrHeader = new JoseHeader({\n            // Access Token PoP headers must have type pop, but the type header can be overriden for special cases\n            typ: shrHeaderOptions.typ || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JsonWebTokenTypes.Pop,\n            kid: shrHeaderOptions.kid,\n            alg: shrHeaderOptions.alg\n        });\n        return JSON.stringify(shrHeader);\n    }\n}\n //# sourceMappingURL=JoseHeader.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY3J5cHRvL0pvc2VIZWFkZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDcUU7QUFDVjtBQUMwQjtBQUVyRjs7O0NBR0MsR0FDRCxjQUFjLEdBQ2QsTUFBTUk7SUFDRkMsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLElBQUksQ0FBQ0MsR0FBRyxHQUFHRCxRQUFRQyxHQUFHO1FBQ3RCLElBQUksQ0FBQ0MsR0FBRyxHQUFHRixRQUFRRSxHQUFHO1FBQ3RCLElBQUksQ0FBQ0MsR0FBRyxHQUFHSCxRQUFRRyxHQUFHO0lBQzFCO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE9BQU9DLG1CQUFtQkMsZ0JBQWdCLEVBQUU7UUFDeEMsc0NBQXNDO1FBQ3RDLElBQUksQ0FBQ0EsaUJBQWlCRixHQUFHLEVBQUU7WUFDdkIsTUFBTVQsaUZBQXFCQSxDQUFDRSw0RUFBZUE7UUFDL0M7UUFDQSxvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDUyxpQkFBaUJILEdBQUcsRUFBRTtZQUN2QixNQUFNUixpRkFBcUJBLENBQUNHLDRFQUFlQTtRQUMvQztRQUNBLE1BQU1TLFlBQVksSUFBSVIsV0FBVztZQUM3QixzR0FBc0c7WUFDdEdHLEtBQUtJLGlCQUFpQkosR0FBRyxJQUFJTixtRUFBaUJBLENBQUNZLEdBQUc7WUFDbERKLEtBQUtFLGlCQUFpQkYsR0FBRztZQUN6QkQsS0FBS0csaUJBQWlCSCxHQUFHO1FBQzdCO1FBQ0EsT0FBT00sS0FBS0MsU0FBUyxDQUFDSDtJQUMxQjtBQUNKO0FBRXNCLENBQ3RCLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9jcnlwdG8vSm9zZUhlYWRlci5tanM/ZGI0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZUpvc2VIZWFkZXJFcnJvciB9IGZyb20gJy4uL2Vycm9yL0pvc2VIZWFkZXJFcnJvci5tanMnO1xuaW1wb3J0IHsgSnNvbldlYlRva2VuVHlwZXMgfSBmcm9tICcuLi91dGlscy9Db25zdGFudHMubWpzJztcbmltcG9ydCB7IG1pc3NpbmdLaWRFcnJvciwgbWlzc2luZ0FsZ0Vycm9yIH0gZnJvbSAnLi4vZXJyb3IvSm9zZUhlYWRlckVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuY2xhc3MgSm9zZUhlYWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy50eXAgPSBvcHRpb25zLnR5cDtcclxuICAgICAgICB0aGlzLmFsZyA9IG9wdGlvbnMuYWxnO1xyXG4gICAgICAgIHRoaXMua2lkID0gb3B0aW9ucy5raWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEJ1aWxkcyBTaWduZWRIdHRwUmVxdWVzdCBmb3JtYXR0ZWQgSk9TRSBIZWFkZXIgZnJvbSB0aGVcclxuICAgICAqIEpPU0UgSGVhZGVyIG9wdGlvbnMgcHJvdmlkZWQgb3IgcHJldmlvdXNseSBzZXQgb24gdGhlIG9iamVjdCBhbmQgcmV0dXJuc1xyXG4gICAgICogdGhlIHN0cmluZ2lmaWVkIGhlYWRlciBvYmplY3QuXHJcbiAgICAgKiBUaHJvd3MgaWYga2V5SWQgb3IgYWxnb3JpdGhtIGFyZW4ndCBwcm92aWRlZCBzaW5jZSB0aGV5IGFyZSByZXF1aXJlZCBmb3IgQWNjZXNzIFRva2VuIEJpbmRpbmcuXHJcbiAgICAgKiBAcGFyYW0gc2hySGVhZGVyT3B0aW9uc1xyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFNockhlYWRlclN0cmluZyhzaHJIZWFkZXJPcHRpb25zKSB7XHJcbiAgICAgICAgLy8gS2V5SUQgaXMgcmVxdWlyZWQgb24gdGhlIFNIUiBoZWFkZXJcclxuICAgICAgICBpZiAoIXNockhlYWRlck9wdGlvbnMua2lkKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUpvc2VIZWFkZXJFcnJvcihtaXNzaW5nS2lkRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBbGcgaXMgcmVxdWlyZWQgb24gdGhlIFNIUiBoZWFkZXJcclxuICAgICAgICBpZiAoIXNockhlYWRlck9wdGlvbnMuYWxnKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUpvc2VIZWFkZXJFcnJvcihtaXNzaW5nQWxnRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaHJIZWFkZXIgPSBuZXcgSm9zZUhlYWRlcih7XHJcbiAgICAgICAgICAgIC8vIEFjY2VzcyBUb2tlbiBQb1AgaGVhZGVycyBtdXN0IGhhdmUgdHlwZSBwb3AsIGJ1dCB0aGUgdHlwZSBoZWFkZXIgY2FuIGJlIG92ZXJyaWRlbiBmb3Igc3BlY2lhbCBjYXNlc1xyXG4gICAgICAgICAgICB0eXA6IHNockhlYWRlck9wdGlvbnMudHlwIHx8IEpzb25XZWJUb2tlblR5cGVzLlBvcCxcclxuICAgICAgICAgICAga2lkOiBzaHJIZWFkZXJPcHRpb25zLmtpZCxcclxuICAgICAgICAgICAgYWxnOiBzaHJIZWFkZXJPcHRpb25zLmFsZyxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc2hySGVhZGVyKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBKb3NlSGVhZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Kb3NlSGVhZGVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVKb3NlSGVhZGVyRXJyb3IiLCJKc29uV2ViVG9rZW5UeXBlcyIsIm1pc3NpbmdLaWRFcnJvciIsIm1pc3NpbmdBbGdFcnJvciIsIkpvc2VIZWFkZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ0eXAiLCJhbGciLCJraWQiLCJnZXRTaHJIZWFkZXJTdHJpbmciLCJzaHJIZWFkZXJPcHRpb25zIiwic2hySGVhZGVyIiwiUG9wIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/crypto/JoseHeader.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PopTokenGenerator: () => (/* binding */ PopTokenGenerator)\n/* harmony export */ });\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const KeyLocation = {\n    SW: \"sw\",\n    UHW: \"uhw\"\n};\n/** @internal */ class PopTokenGenerator {\n    constructor(cryptoUtils, performanceClient){\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */ async generateCnf(request, logger) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n        const reqCnf = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.generateKid.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\n        const reqCnfString = this.cryptoUtils.base64UrlEncode(JSON.stringify(reqCnf));\n        return {\n            kid: reqCnf.kid,\n            reqCnfString\n        };\n    }\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */ async generateKid(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */ async signPopToken(accessToken, keyId, request) {\n        return this.signPayload(accessToken, keyId, request);\n    }\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */ async signPayload(payload, keyId, request, claims) {\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions } = request;\n        const resourceUrlString = resourceRequestUri ? new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_2__.UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return this.cryptoUtils.signJwt({\n            at: payload,\n            ts: (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.nowSeconds)(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: resourceUrlComponents?.QueryString ? [\n                [],\n                resourceUrlComponents.QueryString\n            ] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, keyId, shrOptions, request.correlationId);\n    }\n}\n //# sourceMappingURL=PopTokenGenerator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/AuthError.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthError: () => (/* binding */ AuthError),\n/* harmony export */   AuthErrorCodes: () => (/* reexport module object */ _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   AuthErrorMessage: () => (/* binding */ AuthErrorMessage),\n/* harmony export */   AuthErrorMessages: () => (/* binding */ AuthErrorMessages),\n/* harmony export */   createAuthError: () => (/* binding */ createAuthError)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const AuthErrorMessages = {\n    [_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError]: \"Unexpected error in authentication.\",\n    [_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\"\n};\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */ const AuthErrorMessage = {\n    unexpectedError: {\n        code: _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError,\n        desc: AuthErrorMessages[_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError]\n    },\n    postRequestFailed: {\n        code: _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed,\n        desc: AuthErrorMessages[_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]\n    }\n};\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */ class AuthError extends Error {\n    constructor(errorCode, errorMessage, suberror){\n        const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;\n        super(errorString);\n        Object.setPrototypeOf(this, AuthError.prototype);\n        this.errorCode = errorCode || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.errorMessage = errorMessage || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.subError = suberror || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.name = \"AuthError\";\n    }\n    setCorrelationId(correlationId) {\n        this.correlationId = correlationId;\n    }\n}\nfunction createAuthError(code, additionalMessage) {\n    return new AuthError(code, additionalMessage ? `${AuthErrorMessages[code]} ${additionalMessage}` : AuthErrorMessages[code]);\n}\n //# sourceMappingURL=AuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQXV0aEVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ21EO0FBQ3VCO0FBQ25CO0FBQzdCO0FBRTFCOzs7Q0FHQyxHQUNELE1BQU1JLG9CQUFvQjtJQUN0QixDQUFDSCxnRUFBZUEsQ0FBQyxFQUFFO0lBQ25CLENBQUNDLGtFQUFpQkEsQ0FBQyxFQUFFO0FBQ3pCO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUcsbUJBQW1CO0lBQ3JCSixpQkFBaUI7UUFDYkssTUFBTUwsZ0VBQWVBO1FBQ3JCTSxNQUFNSCxpQkFBaUIsQ0FBQ0gsZ0VBQWVBLENBQUM7SUFDNUM7SUFDQUMsbUJBQW1CO1FBQ2ZJLE1BQU1KLGtFQUFpQkE7UUFDdkJLLE1BQU1ILGlCQUFpQixDQUFDRixrRUFBaUJBLENBQUM7SUFDOUM7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTU0sa0JBQWtCQztJQUNwQkMsWUFBWUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLFFBQVEsQ0FBRTtRQUMzQyxNQUFNQyxjQUFjRixlQUNkLENBQUMsRUFBRUQsVUFBVSxFQUFFLEVBQUVDLGFBQWEsQ0FBQyxHQUMvQkQ7UUFDTixLQUFLLENBQUNHO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUVSLFVBQVVTLFNBQVM7UUFDL0MsSUFBSSxDQUFDTixTQUFTLEdBQUdBLGFBQWFYLDJEQUFTQSxDQUFDa0IsWUFBWTtRQUNwRCxJQUFJLENBQUNOLFlBQVksR0FBR0EsZ0JBQWdCWiwyREFBU0EsQ0FBQ2tCLFlBQVk7UUFDMUQsSUFBSSxDQUFDQyxRQUFRLEdBQUdOLFlBQVliLDJEQUFTQSxDQUFDa0IsWUFBWTtRQUNsRCxJQUFJLENBQUNFLElBQUksR0FBRztJQUNoQjtJQUNBQyxpQkFBaUJDLGFBQWEsRUFBRTtRQUM1QixJQUFJLENBQUNBLGFBQWEsR0FBR0E7SUFDekI7QUFDSjtBQUNBLFNBQVNDLGdCQUFnQmpCLElBQUksRUFBRWtCLGlCQUFpQjtJQUM1QyxPQUFPLElBQUloQixVQUFVRixNQUFNa0Isb0JBQ3JCLENBQUMsRUFBRXBCLGlCQUFpQixDQUFDRSxLQUFLLENBQUMsQ0FBQyxFQUFFa0Isa0JBQWtCLENBQUMsR0FDakRwQixpQkFBaUIsQ0FBQ0UsS0FBSztBQUNqQztBQUUyRSxDQUMzRSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQXV0aEVycm9yLm1qcz8zNGU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyB1bmV4cGVjdGVkRXJyb3IsIHBvc3RSZXF1ZXN0RmFpbGVkIH0gZnJvbSAnLi9BdXRoRXJyb3JDb2Rlcy5tanMnO1xuaW1wb3J0ICogYXMgQXV0aEVycm9yQ29kZXMgZnJvbSAnLi9BdXRoRXJyb3JDb2Rlcy5tanMnO1xuZXhwb3J0IHsgQXV0aEVycm9yQ29kZXMgfTtcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEF1dGhFcnJvck1lc3NhZ2VzID0ge1xyXG4gICAgW3VuZXhwZWN0ZWRFcnJvcl06IFwiVW5leHBlY3RlZCBlcnJvciBpbiBhdXRoZW50aWNhdGlvbi5cIixcclxuICAgIFtwb3N0UmVxdWVzdEZhaWxlZF06IFwiUG9zdCByZXF1ZXN0IGZhaWxlZCBmcm9tIHRoZSBuZXR3b3JrLCBjb3VsZCBiZSBhIDR4eC81eHggb3IgYSBuZXR3b3JrIHVuYXZhaWxhYmlsaXR5LiBQbGVhc2UgY2hlY2sgdGhlIGV4YWN0IGVycm9yIGNvZGUgZm9yIGRldGFpbHMuXCIsXHJcbn07XHJcbi8qKlxyXG4gKiBBdXRoRXJyb3JNZXNzYWdlIGNsYXNzIGNvbnRhaW5pbmcgc3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcy5cclxuICogQGRlcHJlY2F0ZWQgVXNlIEF1dGhFcnJvckNvZGVzIGluc3RlYWRcclxuICovXHJcbmNvbnN0IEF1dGhFcnJvck1lc3NhZ2UgPSB7XHJcbiAgICB1bmV4cGVjdGVkRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiB1bmV4cGVjdGVkRXJyb3IsXHJcbiAgICAgICAgZGVzYzogQXV0aEVycm9yTWVzc2FnZXNbdW5leHBlY3RlZEVycm9yXSxcclxuICAgIH0sXHJcbiAgICBwb3N0UmVxdWVzdEZhaWxlZDoge1xyXG4gICAgICAgIGNvZGU6IHBvc3RSZXF1ZXN0RmFpbGVkLFxyXG4gICAgICAgIGRlc2M6IEF1dGhFcnJvck1lc3NhZ2VzW3Bvc3RSZXF1ZXN0RmFpbGVkXSxcclxuICAgIH0sXHJcbn07XHJcbi8qKlxyXG4gKiBHZW5lcmFsIGVycm9yIGNsYXNzIHRocm93biBieSB0aGUgTVNBTC5qcyBsaWJyYXJ5LlxyXG4gKi9cclxuY2xhc3MgQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UsIHN1YmVycm9yKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JTdHJpbmcgPSBlcnJvck1lc3NhZ2VcclxuICAgICAgICAgICAgPyBgJHtlcnJvckNvZGV9OiAke2Vycm9yTWVzc2FnZX1gXHJcbiAgICAgICAgICAgIDogZXJyb3JDb2RlO1xyXG4gICAgICAgIHN1cGVyKGVycm9yU3RyaW5nKTtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGUgfHwgQ29uc3RhbnRzLkVNUFRZX1NUUklORztcclxuICAgICAgICB0aGlzLmVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZSB8fCBDb25zdGFudHMuRU1QVFlfU1RSSU5HO1xyXG4gICAgICAgIHRoaXMuc3ViRXJyb3IgPSBzdWJlcnJvciB8fCBDb25zdGFudHMuRU1QVFlfU1RSSU5HO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiQXV0aEVycm9yXCI7XHJcbiAgICB9XHJcbiAgICBzZXRDb3JyZWxhdGlvbklkKGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICB0aGlzLmNvcnJlbGF0aW9uSWQgPSBjb3JyZWxhdGlvbklkO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUF1dGhFcnJvcihjb2RlLCBhZGRpdGlvbmFsTWVzc2FnZSkge1xyXG4gICAgcmV0dXJuIG5ldyBBdXRoRXJyb3IoY29kZSwgYWRkaXRpb25hbE1lc3NhZ2VcclxuICAgICAgICA/IGAke0F1dGhFcnJvck1lc3NhZ2VzW2NvZGVdfSAke2FkZGl0aW9uYWxNZXNzYWdlfWBcclxuICAgICAgICA6IEF1dGhFcnJvck1lc3NhZ2VzW2NvZGVdKTtcclxufVxuXG5leHBvcnQgeyBBdXRoRXJyb3IsIEF1dGhFcnJvck1lc3NhZ2UsIEF1dGhFcnJvck1lc3NhZ2VzLCBjcmVhdGVBdXRoRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1dGhFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwidW5leHBlY3RlZEVycm9yIiwicG9zdFJlcXVlc3RGYWlsZWQiLCJBdXRoRXJyb3JDb2RlcyIsIkF1dGhFcnJvck1lc3NhZ2VzIiwiQXV0aEVycm9yTWVzc2FnZSIsImNvZGUiLCJkZXNjIiwiQXV0aEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsInN1YmVycm9yIiwiZXJyb3JTdHJpbmciLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIkVNUFRZX1NUUklORyIsInN1YkVycm9yIiwibmFtZSIsInNldENvcnJlbGF0aW9uSWQiLCJjb3JyZWxhdGlvbklkIiwiY3JlYXRlQXV0aEVycm9yIiwiYWRkaXRpb25hbE1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postRequestFailed: () => (/* binding */ postRequestFailed),\n/* harmony export */   unexpectedError: () => (/* binding */ unexpectedError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const unexpectedError = \"unexpected_error\";\nconst postRequestFailed = \"post_request_failed\";\n //# sourceMappingURL=AuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQXV0aEVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNQSxrQkFBa0I7QUFDeEIsTUFBTUMsb0JBQW9CO0FBRW9CLENBQzlDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9BdXRoRXJyb3JDb2Rlcy5tanM/Y2M3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQXV0aEVycm9yTWVzc2FnZSBjbGFzcyBjb250YWluaW5nIHN0cmluZyBjb25zdGFudHMgdXNlZCBieSBlcnJvciBjb2RlcyBhbmQgbWVzc2FnZXMuXHJcbiAqL1xyXG5jb25zdCB1bmV4cGVjdGVkRXJyb3IgPSBcInVuZXhwZWN0ZWRfZXJyb3JcIjtcclxuY29uc3QgcG9zdFJlcXVlc3RGYWlsZWQgPSBcInBvc3RfcmVxdWVzdF9mYWlsZWRcIjtcblxuZXhwb3J0IHsgcG9zdFJlcXVlc3RGYWlsZWQsIHVuZXhwZWN0ZWRFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aEVycm9yQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbInVuZXhwZWN0ZWRFcnJvciIsInBvc3RSZXF1ZXN0RmFpbGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/CacheError.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheError: () => (/* binding */ CacheError),\n/* harmony export */   CacheErrorCodes: () => (/* reexport module object */ _CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   CacheErrorMessages: () => (/* binding */ CacheErrorMessages)\n/* harmony export */ });\n/* harmony import */ var _CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CacheErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CacheErrorMessages = {\n    [_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheQuotaExceededErrorCode]: \"Exceeded cache storage capacity.\",\n    [_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheUnknownErrorCode]: \"Unexpected error occurred when using cache storage.\"\n};\n/**\r\n * Error thrown when there is an error with the cache\r\n */ class CacheError extends Error {\n    constructor(errorCode, errorMessage){\n        const message = errorMessage || (CacheErrorMessages[errorCode] ? CacheErrorMessages[errorCode] : CacheErrorMessages[_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheUnknownErrorCode]);\n        super(`${errorCode}: ${message}`);\n        Object.setPrototypeOf(this, CacheError.prototype);\n        this.name = \"CacheError\";\n        this.errorCode = errorCode;\n        this.errorMessage = message;\n    }\n}\n //# sourceMappingURL=CacheError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUMyRjtBQUNsQztBQUM5QjtBQUUzQjs7O0NBR0MsR0FDRCxNQUFNRyxxQkFBcUI7SUFDdkIsQ0FBQ0YsNkVBQTJCQSxDQUFDLEVBQUU7SUFDL0IsQ0FBQ0QsdUVBQXFCQSxDQUFDLEVBQUU7QUFDN0I7QUFDQTs7Q0FFQyxHQUNELE1BQU1JLG1CQUFtQkM7SUFDckJDLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxDQUFFO1FBQ2pDLE1BQU1DLFVBQVVELGdCQUNYTCxDQUFBQSxrQkFBa0IsQ0FBQ0ksVUFBVSxHQUN4Qkosa0JBQWtCLENBQUNJLFVBQVUsR0FDN0JKLGtCQUFrQixDQUFDSCx1RUFBcUJBLENBQUM7UUFDbkQsS0FBSyxDQUFDLENBQUMsRUFBRU8sVUFBVSxFQUFFLEVBQUVFLFFBQVEsQ0FBQztRQUNoQ0MsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRVAsV0FBV1EsU0FBUztRQUNoRCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ04sU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNDLFlBQVksR0FBR0M7SUFDeEI7QUFDSjtBQUUwQyxDQUMxQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvci5tanM/MTBiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNhY2hlVW5rbm93bkVycm9yQ29kZSwgY2FjaGVRdW90YUV4Y2VlZGVkRXJyb3JDb2RlIH0gZnJvbSAnLi9DYWNoZUVycm9yQ29kZXMubWpzJztcbmltcG9ydCAqIGFzIENhY2hlRXJyb3JDb2RlcyBmcm9tICcuL0NhY2hlRXJyb3JDb2Rlcy5tanMnO1xuZXhwb3J0IHsgQ2FjaGVFcnJvckNvZGVzIH07XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBDYWNoZUVycm9yTWVzc2FnZXMgPSB7XHJcbiAgICBbY2FjaGVRdW90YUV4Y2VlZGVkRXJyb3JDb2RlXTogXCJFeGNlZWRlZCBjYWNoZSBzdG9yYWdlIGNhcGFjaXR5LlwiLFxyXG4gICAgW2NhY2hlVW5rbm93bkVycm9yQ29kZV06IFwiVW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCB3aGVuIHVzaW5nIGNhY2hlIHN0b3JhZ2UuXCIsXHJcbn07XHJcbi8qKlxyXG4gKiBFcnJvciB0aHJvd24gd2hlbiB0aGVyZSBpcyBhbiBlcnJvciB3aXRoIHRoZSBjYWNoZVxyXG4gKi9cclxuY2xhc3MgQ2FjaGVFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGVycm9yTWVzc2FnZSB8fFxyXG4gICAgICAgICAgICAoQ2FjaGVFcnJvck1lc3NhZ2VzW2Vycm9yQ29kZV1cclxuICAgICAgICAgICAgICAgID8gQ2FjaGVFcnJvck1lc3NhZ2VzW2Vycm9yQ29kZV1cclxuICAgICAgICAgICAgICAgIDogQ2FjaGVFcnJvck1lc3NhZ2VzW2NhY2hlVW5rbm93bkVycm9yQ29kZV0pO1xyXG4gICAgICAgIHN1cGVyKGAke2Vycm9yQ29kZX06ICR7bWVzc2FnZX1gKTtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2FjaGVFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ2FjaGVFcnJvclwiO1xyXG4gICAgICAgIHRoaXMuZXJyb3JDb2RlID0gZXJyb3JDb2RlO1xyXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gbWVzc2FnZTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBDYWNoZUVycm9yLCBDYWNoZUVycm9yTWVzc2FnZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhY2hlRXJyb3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNhY2hlVW5rbm93bkVycm9yQ29kZSIsImNhY2hlUXVvdGFFeGNlZWRlZEVycm9yQ29kZSIsIkNhY2hlRXJyb3JDb2RlcyIsIkNhY2hlRXJyb3JNZXNzYWdlcyIsIkNhY2hlRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JDb2RlIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheQuotaExceededErrorCode: () => (/* binding */ cacheQuotaExceededErrorCode),\n/* harmony export */   cacheUnknownErrorCode: () => (/* binding */ cacheUnknownErrorCode)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const cacheQuotaExceededErrorCode = \"cache_quota_exceeded\";\nconst cacheUnknownErrorCode = \"cache_error_unknown\";\n //# sourceMappingURL=CacheErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLDhCQUE4QjtBQUNwQyxNQUFNQyx3QkFBd0I7QUFFZ0MsQ0FDOUQsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL0NhY2hlRXJyb3JDb2Rlcy5tanM/OTA1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBjYWNoZVF1b3RhRXhjZWVkZWRFcnJvckNvZGUgPSBcImNhY2hlX3F1b3RhX2V4Y2VlZGVkXCI7XHJcbmNvbnN0IGNhY2hlVW5rbm93bkVycm9yQ29kZSA9IFwiY2FjaGVfZXJyb3JfdW5rbm93blwiO1xuXG5leHBvcnQgeyBjYWNoZVF1b3RhRXhjZWVkZWRFcnJvckNvZGUsIGNhY2hlVW5rbm93bkVycm9yQ29kZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FjaGVFcnJvckNvZGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjYWNoZVF1b3RhRXhjZWVkZWRFcnJvckNvZGUiLCJjYWNoZVVua25vd25FcnJvckNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientAuthError: () => (/* binding */ ClientAuthError),\n/* harmony export */   ClientAuthErrorCodes: () => (/* reexport module object */ _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   ClientAuthErrorMessage: () => (/* binding */ ClientAuthErrorMessage),\n/* harmony export */   ClientAuthErrorMessages: () => (/* binding */ ClientAuthErrorMessages),\n/* harmony export */   createClientAuthError: () => (/* binding */ createClientAuthError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const ClientAuthErrorMessages = {\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError]: \"The client info was empty\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError]: \"Token cannot be parsed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken]: \"The token is null or empty\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError]: \"Endpoints cannot be resolved\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError]: \"Network request failed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized]: \"The hash parameters could not be deserialized\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState]: \"State was not the expected format\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch]: \"State mismatch error\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound]: \"State not found\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch]: \"Nonce mismatch error\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet]: \"Cannot append ScopeSet\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired]: \"Device code is expired.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord]: \"Cache record object was null or undefined.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound]: \"No account found in cache for given key.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject]: \"No crypto object detected.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType]: \"Unexpected credential type.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached]: \"User defined timeout for device code polling reached\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled]: \"User cancelled the flow.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.methodNotImplemented]: \"This method has not been implemented\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\"\n};\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */ const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError]\n    },\n    clientInfoEmptyError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError]\n    },\n    tokenParsingError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError]\n    },\n    nullOrEmptyToken: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken]\n    },\n    endpointResolutionError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError]\n    },\n    networkError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError]\n    },\n    unableToGetOpenidConfigError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError]\n    },\n    hashNotDeserialized: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized]\n    },\n    invalidStateError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState]\n    },\n    stateMismatchError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch]\n    },\n    stateNotFoundError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound]\n    },\n    nonceMismatchError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch]\n    },\n    authTimeNotFoundError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound]\n    },\n    maxAgeTranspired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired]\n    },\n    multipleMatchingTokens: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens]\n    },\n    multipleMatchingAccounts: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts]\n    },\n    multipleMatchingAppMetadata: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata]\n    },\n    tokenRequestCannotBeMade: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade]\n    },\n    removeEmptyScopeError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope]\n    },\n    appendScopeSetError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet]\n    },\n    emptyInputScopeSetError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet]\n    },\n    DeviceCodePollingCancelled: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled]\n    },\n    DeviceCodeExpired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired]\n    },\n    DeviceCodeUnknownError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError]\n    },\n    NoAccountInSilentRequest: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest]\n    },\n    invalidCacheRecord: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord]\n    },\n    invalidCacheEnvironment: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment]\n    },\n    noAccountFound: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound]\n    },\n    noCryptoObj: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject]\n    },\n    unexpectedCredentialType: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType]\n    },\n    invalidAssertion: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion]\n    },\n    invalidClientCredential: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential]\n    },\n    tokenRefreshRequired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired]\n    },\n    userTimeoutReached: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached]\n    },\n    tokenClaimsRequired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt]\n    },\n    noAuthorizationCodeFromServer: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse]\n    },\n    bindingKeyNotRemovedError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved]\n    },\n    logoutNotSupported: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported]\n    },\n    keyIdMissing: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing]\n    },\n    noNetworkConnectivity: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]\n    },\n    userCanceledError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled]\n    },\n    missingTenantIdError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError]\n    },\n    nestedAppAuthBridgeDisabled: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled]\n    }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */ class ClientAuthError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, additionalMessage){\n        super(errorCode, additionalMessage ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}` : ClientAuthErrorMessages[errorCode]);\n        this.name = \"ClientAuthError\";\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n}\nfunction createClientAuthError(errorCode, additionalMessage) {\n    return new ClientAuthError(errorCode, additionalMessage);\n}\n //# sourceMappingURL=ClientAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authTimeNotFound: () => (/* binding */ authTimeNotFound),\n/* harmony export */   authorizationCodeMissingFromServerResponse: () => (/* binding */ authorizationCodeMissingFromServerResponse),\n/* harmony export */   bindingKeyNotRemoved: () => (/* binding */ bindingKeyNotRemoved),\n/* harmony export */   cannotAppendScopeSet: () => (/* binding */ cannotAppendScopeSet),\n/* harmony export */   cannotRemoveEmptyScope: () => (/* binding */ cannotRemoveEmptyScope),\n/* harmony export */   clientInfoDecodingError: () => (/* binding */ clientInfoDecodingError),\n/* harmony export */   clientInfoEmptyError: () => (/* binding */ clientInfoEmptyError),\n/* harmony export */   deviceCodeExpired: () => (/* binding */ deviceCodeExpired),\n/* harmony export */   deviceCodePollingCancelled: () => (/* binding */ deviceCodePollingCancelled),\n/* harmony export */   deviceCodeUnknownError: () => (/* binding */ deviceCodeUnknownError),\n/* harmony export */   emptyInputScopeSet: () => (/* binding */ emptyInputScopeSet),\n/* harmony export */   endSessionEndpointNotSupported: () => (/* binding */ endSessionEndpointNotSupported),\n/* harmony export */   endpointResolutionError: () => (/* binding */ endpointResolutionError),\n/* harmony export */   hashNotDeserialized: () => (/* binding */ hashNotDeserialized),\n/* harmony export */   invalidAssertion: () => (/* binding */ invalidAssertion),\n/* harmony export */   invalidCacheEnvironment: () => (/* binding */ invalidCacheEnvironment),\n/* harmony export */   invalidCacheRecord: () => (/* binding */ invalidCacheRecord),\n/* harmony export */   invalidClientCredential: () => (/* binding */ invalidClientCredential),\n/* harmony export */   invalidState: () => (/* binding */ invalidState),\n/* harmony export */   keyIdMissing: () => (/* binding */ keyIdMissing),\n/* harmony export */   maxAgeTranspired: () => (/* binding */ maxAgeTranspired),\n/* harmony export */   methodNotImplemented: () => (/* binding */ methodNotImplemented),\n/* harmony export */   missingTenantIdError: () => (/* binding */ missingTenantIdError),\n/* harmony export */   multipleMatchingAccounts: () => (/* binding */ multipleMatchingAccounts),\n/* harmony export */   multipleMatchingAppMetadata: () => (/* binding */ multipleMatchingAppMetadata),\n/* harmony export */   multipleMatchingTokens: () => (/* binding */ multipleMatchingTokens),\n/* harmony export */   nestedAppAuthBridgeDisabled: () => (/* binding */ nestedAppAuthBridgeDisabled),\n/* harmony export */   networkError: () => (/* binding */ networkError),\n/* harmony export */   noAccountFound: () => (/* binding */ noAccountFound),\n/* harmony export */   noAccountInSilentRequest: () => (/* binding */ noAccountInSilentRequest),\n/* harmony export */   noCryptoObject: () => (/* binding */ noCryptoObject),\n/* harmony export */   noNetworkConnectivity: () => (/* binding */ noNetworkConnectivity),\n/* harmony export */   nonceMismatch: () => (/* binding */ nonceMismatch),\n/* harmony export */   nullOrEmptyToken: () => (/* binding */ nullOrEmptyToken),\n/* harmony export */   openIdConfigError: () => (/* binding */ openIdConfigError),\n/* harmony export */   requestCannotBeMade: () => (/* binding */ requestCannotBeMade),\n/* harmony export */   stateMismatch: () => (/* binding */ stateMismatch),\n/* harmony export */   stateNotFound: () => (/* binding */ stateNotFound),\n/* harmony export */   tokenClaimsCnfRequiredForSignedJwt: () => (/* binding */ tokenClaimsCnfRequiredForSignedJwt),\n/* harmony export */   tokenParsingError: () => (/* binding */ tokenParsingError),\n/* harmony export */   tokenRefreshRequired: () => (/* binding */ tokenRefreshRequired),\n/* harmony export */   unexpectedCredentialType: () => (/* binding */ unexpectedCredentialType),\n/* harmony export */   userCanceled: () => (/* binding */ userCanceled),\n/* harmony export */   userTimeoutReached: () => (/* binding */ userTimeoutReached)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const clientInfoDecodingError = \"client_info_decoding_error\";\nconst clientInfoEmptyError = \"client_info_empty_error\";\nconst tokenParsingError = \"token_parsing_error\";\nconst nullOrEmptyToken = \"null_or_empty_token\";\nconst endpointResolutionError = \"endpoints_resolution_error\";\nconst networkError = \"network_error\";\nconst openIdConfigError = \"openid_config_error\";\nconst hashNotDeserialized = \"hash_not_deserialized\";\nconst invalidState = \"invalid_state\";\nconst stateMismatch = \"state_mismatch\";\nconst stateNotFound = \"state_not_found\";\nconst nonceMismatch = \"nonce_mismatch\";\nconst authTimeNotFound = \"auth_time_not_found\";\nconst maxAgeTranspired = \"max_age_transpired\";\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\nconst requestCannotBeMade = \"request_cannot_be_made\";\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\nconst emptyInputScopeSet = \"empty_input_scopeset\";\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\nconst deviceCodeExpired = \"device_code_expired\";\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\nconst invalidCacheRecord = \"invalid_cache_record\";\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\nconst noAccountFound = \"no_account_found\";\nconst noCryptoObject = \"no_crypto_object\";\nconst unexpectedCredentialType = \"unexpected_credential_type\";\nconst invalidAssertion = \"invalid_assertion\";\nconst invalidClientCredential = \"invalid_client_credential\";\nconst tokenRefreshRequired = \"token_refresh_required\";\nconst userTimeoutReached = \"user_timeout_reached\";\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\nconst keyIdMissing = \"key_id_missing\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst userCanceled = \"user_canceled\";\nconst missingTenantIdError = \"missing_tenant_id_error\";\nconst methodNotImplemented = \"method_not_implemented\";\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n //# sourceMappingURL=ClientAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientConfigurationError: () => (/* binding */ ClientConfigurationError),\n/* harmony export */   ClientConfigurationErrorCodes: () => (/* reexport module object */ _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   ClientConfigurationErrorMessage: () => (/* binding */ ClientConfigurationErrorMessage),\n/* harmony export */   ClientConfigurationErrorMessages: () => (/* binding */ ClientConfigurationErrorMessages),\n/* harmony export */   createClientConfigurationError: () => (/* binding */ createClientConfigurationError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const ClientConfigurationErrorMessages = {\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError]: \"Could not parse the given claims request object.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError]: \"URL could not be parsed into appropriate segments.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError]: \"URL was empty or null.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue]: \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty]: \"The logout request was null or undefined.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader]: \"Invalid authentication header provided\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker]: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\n};\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */ const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty]\n    },\n    claimsRequestParsingError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError]\n    },\n    authorityUriInsecure: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure]\n    },\n    urlParseError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError]\n    },\n    urlEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError]\n    },\n    emptyScopesError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError]\n    },\n    invalidPrompt: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue]\n    },\n    invalidClaimsRequest: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims]\n    },\n    tokenRequestEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty]\n    },\n    logoutRequestEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty]\n    },\n    invalidCodeChallengeMethod: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod]\n    },\n    invalidCodeChallengeParams: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing]\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata]\n    },\n    invalidAuthorityMetadata: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata]\n    },\n    untrustedAuthority: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority]\n    },\n    missingSshJwk: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk]\n    },\n    missingSshKid: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid]\n    },\n    missingNonceAuthenticationHeader: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader]\n    },\n    invalidAuthenticationHeader: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader]\n    },\n    cannotSetOIDCOptions: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions]\n    },\n    cannotAllowNativeBroker: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker]\n    },\n    authorityMismatch: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch]\n    }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */ class ClientConfigurationError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode){\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n}\nfunction createClientConfigurationError(errorCode) {\n    return new ClientConfigurationError(errorCode);\n}\n //# sourceMappingURL=ClientConfigurationError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorityMismatch: () => (/* binding */ authorityMismatch),\n/* harmony export */   authorityUriInsecure: () => (/* binding */ authorityUriInsecure),\n/* harmony export */   cannotAllowNativeBroker: () => (/* binding */ cannotAllowNativeBroker),\n/* harmony export */   cannotSetOIDCOptions: () => (/* binding */ cannotSetOIDCOptions),\n/* harmony export */   claimsRequestParsingError: () => (/* binding */ claimsRequestParsingError),\n/* harmony export */   emptyInputScopesError: () => (/* binding */ emptyInputScopesError),\n/* harmony export */   invalidAuthenticationHeader: () => (/* binding */ invalidAuthenticationHeader),\n/* harmony export */   invalidAuthorityMetadata: () => (/* binding */ invalidAuthorityMetadata),\n/* harmony export */   invalidClaims: () => (/* binding */ invalidClaims),\n/* harmony export */   invalidCloudDiscoveryMetadata: () => (/* binding */ invalidCloudDiscoveryMetadata),\n/* harmony export */   invalidCodeChallengeMethod: () => (/* binding */ invalidCodeChallengeMethod),\n/* harmony export */   invalidPromptValue: () => (/* binding */ invalidPromptValue),\n/* harmony export */   logoutRequestEmpty: () => (/* binding */ logoutRequestEmpty),\n/* harmony export */   missingNonceAuthenticationHeader: () => (/* binding */ missingNonceAuthenticationHeader),\n/* harmony export */   missingSshJwk: () => (/* binding */ missingSshJwk),\n/* harmony export */   missingSshKid: () => (/* binding */ missingSshKid),\n/* harmony export */   pkceParamsMissing: () => (/* binding */ pkceParamsMissing),\n/* harmony export */   redirectUriEmpty: () => (/* binding */ redirectUriEmpty),\n/* harmony export */   tokenRequestEmpty: () => (/* binding */ tokenRequestEmpty),\n/* harmony export */   untrustedAuthority: () => (/* binding */ untrustedAuthority),\n/* harmony export */   urlEmptyError: () => (/* binding */ urlEmptyError),\n/* harmony export */   urlParseError: () => (/* binding */ urlParseError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const redirectUriEmpty = \"redirect_uri_empty\";\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\nconst authorityUriInsecure = \"authority_uri_insecure\";\nconst urlParseError = \"url_parse_error\";\nconst urlEmptyError = \"empty_url_error\";\nconst emptyInputScopesError = \"empty_input_scopes_error\";\nconst invalidPromptValue = \"invalid_prompt_value\";\nconst invalidClaims = \"invalid_claims\";\nconst tokenRequestEmpty = \"token_request_empty\";\nconst logoutRequestEmpty = \"logout_request_empty\";\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\nconst pkceParamsMissing = \"pkce_params_missing\";\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\nconst untrustedAuthority = \"untrusted_authority\";\nconst missingSshJwk = \"missing_ssh_jwk\";\nconst missingSshKid = \"missing_ssh_kid\";\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\nconst cannotAllowNativeBroker = \"cannot_allow_native_broker\";\nconst authorityMismatch = \"authority_mismatch\";\n //# sourceMappingURL=ClientConfigurationErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQSxtQkFBbUI7QUFDekIsTUFBTUMsNEJBQTRCO0FBQ2xDLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLHdCQUF3QjtBQUM5QixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsNkJBQTZCO0FBQ25DLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxnQ0FBZ0M7QUFDdEMsTUFBTUMsMkJBQTJCO0FBQ2pDLE1BQU1DLHFCQUFxQjtBQUMzQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG1DQUFtQztBQUN6QyxNQUFNQyw4QkFBOEI7QUFDcEMsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyxvQkFBb0I7QUFFNmMsQ0FDdmUsMERBQTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLm1qcz9jZmQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IHJlZGlyZWN0VXJpRW1wdHkgPSBcInJlZGlyZWN0X3VyaV9lbXB0eVwiO1xyXG5jb25zdCBjbGFpbXNSZXF1ZXN0UGFyc2luZ0Vycm9yID0gXCJjbGFpbXNfcmVxdWVzdF9wYXJzaW5nX2Vycm9yXCI7XHJcbmNvbnN0IGF1dGhvcml0eVVyaUluc2VjdXJlID0gXCJhdXRob3JpdHlfdXJpX2luc2VjdXJlXCI7XHJcbmNvbnN0IHVybFBhcnNlRXJyb3IgPSBcInVybF9wYXJzZV9lcnJvclwiO1xyXG5jb25zdCB1cmxFbXB0eUVycm9yID0gXCJlbXB0eV91cmxfZXJyb3JcIjtcclxuY29uc3QgZW1wdHlJbnB1dFNjb3Blc0Vycm9yID0gXCJlbXB0eV9pbnB1dF9zY29wZXNfZXJyb3JcIjtcclxuY29uc3QgaW52YWxpZFByb21wdFZhbHVlID0gXCJpbnZhbGlkX3Byb21wdF92YWx1ZVwiO1xyXG5jb25zdCBpbnZhbGlkQ2xhaW1zID0gXCJpbnZhbGlkX2NsYWltc1wiO1xyXG5jb25zdCB0b2tlblJlcXVlc3RFbXB0eSA9IFwidG9rZW5fcmVxdWVzdF9lbXB0eVwiO1xyXG5jb25zdCBsb2dvdXRSZXF1ZXN0RW1wdHkgPSBcImxvZ291dF9yZXF1ZXN0X2VtcHR5XCI7XHJcbmNvbnN0IGludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kID0gXCJpbnZhbGlkX2NvZGVfY2hhbGxlbmdlX21ldGhvZFwiO1xyXG5jb25zdCBwa2NlUGFyYW1zTWlzc2luZyA9IFwicGtjZV9wYXJhbXNfbWlzc2luZ1wiO1xyXG5jb25zdCBpbnZhbGlkQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YSA9IFwiaW52YWxpZF9jbG91ZF9kaXNjb3ZlcnlfbWV0YWRhdGFcIjtcclxuY29uc3QgaW52YWxpZEF1dGhvcml0eU1ldGFkYXRhID0gXCJpbnZhbGlkX2F1dGhvcml0eV9tZXRhZGF0YVwiO1xyXG5jb25zdCB1bnRydXN0ZWRBdXRob3JpdHkgPSBcInVudHJ1c3RlZF9hdXRob3JpdHlcIjtcclxuY29uc3QgbWlzc2luZ1NzaEp3ayA9IFwibWlzc2luZ19zc2hfandrXCI7XHJcbmNvbnN0IG1pc3NpbmdTc2hLaWQgPSBcIm1pc3Npbmdfc3NoX2tpZFwiO1xyXG5jb25zdCBtaXNzaW5nTm9uY2VBdXRoZW50aWNhdGlvbkhlYWRlciA9IFwibWlzc2luZ19ub25jZV9hdXRoZW50aWNhdGlvbl9oZWFkZXJcIjtcclxuY29uc3QgaW52YWxpZEF1dGhlbnRpY2F0aW9uSGVhZGVyID0gXCJpbnZhbGlkX2F1dGhlbnRpY2F0aW9uX2hlYWRlclwiO1xyXG5jb25zdCBjYW5ub3RTZXRPSURDT3B0aW9ucyA9IFwiY2Fubm90X3NldF9PSURDT3B0aW9uc1wiO1xyXG5jb25zdCBjYW5ub3RBbGxvd05hdGl2ZUJyb2tlciA9IFwiY2Fubm90X2FsbG93X25hdGl2ZV9icm9rZXJcIjtcclxuY29uc3QgYXV0aG9yaXR5TWlzbWF0Y2ggPSBcImF1dGhvcml0eV9taXNtYXRjaFwiO1xuXG5leHBvcnQgeyBhdXRob3JpdHlNaXNtYXRjaCwgYXV0aG9yaXR5VXJpSW5zZWN1cmUsIGNhbm5vdEFsbG93TmF0aXZlQnJva2VyLCBjYW5ub3RTZXRPSURDT3B0aW9ucywgY2xhaW1zUmVxdWVzdFBhcnNpbmdFcnJvciwgZW1wdHlJbnB1dFNjb3Blc0Vycm9yLCBpbnZhbGlkQXV0aGVudGljYXRpb25IZWFkZXIsIGludmFsaWRBdXRob3JpdHlNZXRhZGF0YSwgaW52YWxpZENsYWltcywgaW52YWxpZENsb3VkRGlzY292ZXJ5TWV0YWRhdGEsIGludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kLCBpbnZhbGlkUHJvbXB0VmFsdWUsIGxvZ291dFJlcXVlc3RFbXB0eSwgbWlzc2luZ05vbmNlQXV0aGVudGljYXRpb25IZWFkZXIsIG1pc3NpbmdTc2hKd2ssIG1pc3NpbmdTc2hLaWQsIHBrY2VQYXJhbXNNaXNzaW5nLCByZWRpcmVjdFVyaUVtcHR5LCB0b2tlblJlcXVlc3RFbXB0eSwgdW50cnVzdGVkQXV0aG9yaXR5LCB1cmxFbXB0eUVycm9yLCB1cmxQYXJzZUVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbGllbnRDb25maWd1cmF0aW9uRXJyb3JDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsicmVkaXJlY3RVcmlFbXB0eSIsImNsYWltc1JlcXVlc3RQYXJzaW5nRXJyb3IiLCJhdXRob3JpdHlVcmlJbnNlY3VyZSIsInVybFBhcnNlRXJyb3IiLCJ1cmxFbXB0eUVycm9yIiwiZW1wdHlJbnB1dFNjb3Blc0Vycm9yIiwiaW52YWxpZFByb21wdFZhbHVlIiwiaW52YWxpZENsYWltcyIsInRva2VuUmVxdWVzdEVtcHR5IiwibG9nb3V0UmVxdWVzdEVtcHR5IiwiaW52YWxpZENvZGVDaGFsbGVuZ2VNZXRob2QiLCJwa2NlUGFyYW1zTWlzc2luZyIsImludmFsaWRDbG91ZERpc2NvdmVyeU1ldGFkYXRhIiwiaW52YWxpZEF1dGhvcml0eU1ldGFkYXRhIiwidW50cnVzdGVkQXV0aG9yaXR5IiwibWlzc2luZ1NzaEp3ayIsIm1pc3NpbmdTc2hLaWQiLCJtaXNzaW5nTm9uY2VBdXRoZW50aWNhdGlvbkhlYWRlciIsImludmFsaWRBdXRoZW50aWNhdGlvbkhlYWRlciIsImNhbm5vdFNldE9JRENPcHRpb25zIiwiY2Fubm90QWxsb3dOYXRpdmVCcm9rZXIiLCJhdXRob3JpdHlNaXNtYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractionRequiredAuthError: () => (/* binding */ InteractionRequiredAuthError),\n/* harmony export */   InteractionRequiredAuthErrorCodes: () => (/* reexport module object */ _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   InteractionRequiredAuthErrorMessage: () => (/* binding */ InteractionRequiredAuthErrorMessage),\n/* harmony export */   InteractionRequiredAuthSubErrorMessage: () => (/* binding */ InteractionRequiredAuthSubErrorMessage),\n/* harmony export */   InteractionRequiredServerErrorMessage: () => (/* binding */ InteractionRequiredServerErrorMessage),\n/* harmony export */   createInteractionRequiredAuthError: () => (/* binding */ createInteractionRequiredAuthError),\n/* harmony export */   isInteractionRequiredError: () => (/* binding */ isInteractionRequiredError)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InteractionRequiredAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */ const InteractionRequiredServerErrorMessage = [\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.consentRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.loginRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken\n];\nconst InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n    \"bad_token\"\n];\nconst InteractionRequiredAuthErrorMessages = {\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.refreshTokenExpired]: \"Refresh token has expired.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\"\n};\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */ const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound]\n    },\n    native_account_unavailable: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable]\n    },\n    bad_token: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken]\n    }\n};\n/**\r\n * Error thrown when user interaction is required.\r\n */ class InteractionRequiredAuthError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo){\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n        this.timestamp = timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.traceId = traceId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.correlationId = correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.claims = claims || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n        this.errorNo = errorNo;\n    }\n}\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */ function isInteractionRequiredError(errorCode, errorString, subError) {\n    const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some((irErrorCode)=>{\n        return errorString.indexOf(irErrorCode) > -1;\n    });\n    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n}\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */ function createInteractionRequiredAuthError(errorCode) {\n    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\n}\n //# sourceMappingURL=InteractionRequiredAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   badToken: () => (/* binding */ badToken),\n/* harmony export */   consentRequired: () => (/* binding */ consentRequired),\n/* harmony export */   interactionRequired: () => (/* binding */ interactionRequired),\n/* harmony export */   loginRequired: () => (/* binding */ loginRequired),\n/* harmony export */   nativeAccountUnavailable: () => (/* binding */ nativeAccountUnavailable),\n/* harmony export */   noTokensFound: () => (/* binding */ noTokensFound),\n/* harmony export */   refreshTokenExpired: () => (/* binding */ refreshTokenExpired)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Codes defined by MSAL\nconst noTokensFound = \"no_tokens_found\";\nconst nativeAccountUnavailable = \"native_account_unavailable\";\nconst refreshTokenExpired = \"refresh_token_expired\";\n// Codes potentially returned by server\nconst interactionRequired = \"interaction_required\";\nconst consentRequired = \"consent_required\";\nconst loginRequired = \"login_required\";\nconst badToken = \"bad_token\";\n //# sourceMappingURL=InteractionRequiredAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Qsd0JBQXdCO0FBQ3hCLE1BQU1BLGdCQUFnQjtBQUN0QixNQUFNQywyQkFBMkI7QUFDakMsTUFBTUMsc0JBQXNCO0FBQzVCLHVDQUF1QztBQUN2QyxNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxXQUFXO0FBRXNILENBQ3ZJLDhEQUE4RCIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9JbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMubWpzPzRmMDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29kZXMgZGVmaW5lZCBieSBNU0FMXHJcbmNvbnN0IG5vVG9rZW5zRm91bmQgPSBcIm5vX3Rva2Vuc19mb3VuZFwiO1xyXG5jb25zdCBuYXRpdmVBY2NvdW50VW5hdmFpbGFibGUgPSBcIm5hdGl2ZV9hY2NvdW50X3VuYXZhaWxhYmxlXCI7XHJcbmNvbnN0IHJlZnJlc2hUb2tlbkV4cGlyZWQgPSBcInJlZnJlc2hfdG9rZW5fZXhwaXJlZFwiO1xyXG4vLyBDb2RlcyBwb3RlbnRpYWxseSByZXR1cm5lZCBieSBzZXJ2ZXJcclxuY29uc3QgaW50ZXJhY3Rpb25SZXF1aXJlZCA9IFwiaW50ZXJhY3Rpb25fcmVxdWlyZWRcIjtcclxuY29uc3QgY29uc2VudFJlcXVpcmVkID0gXCJjb25zZW50X3JlcXVpcmVkXCI7XHJcbmNvbnN0IGxvZ2luUmVxdWlyZWQgPSBcImxvZ2luX3JlcXVpcmVkXCI7XHJcbmNvbnN0IGJhZFRva2VuID0gXCJiYWRfdG9rZW5cIjtcblxuZXhwb3J0IHsgYmFkVG9rZW4sIGNvbnNlbnRSZXF1aXJlZCwgaW50ZXJhY3Rpb25SZXF1aXJlZCwgbG9naW5SZXF1aXJlZCwgbmF0aXZlQWNjb3VudFVuYXZhaWxhYmxlLCBub1Rva2Vuc0ZvdW5kLCByZWZyZXNoVG9rZW5FeHBpcmVkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5vVG9rZW5zRm91bmQiLCJuYXRpdmVBY2NvdW50VW5hdmFpbGFibGUiLCJyZWZyZXNoVG9rZW5FeHBpcmVkIiwiaW50ZXJhY3Rpb25SZXF1aXJlZCIsImNvbnNlbnRSZXF1aXJlZCIsImxvZ2luUmVxdWlyZWQiLCJiYWRUb2tlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JoseHeaderError: () => (/* binding */ JoseHeaderError),\n/* harmony export */   JoseHeaderErrorMessages: () => (/* binding */ JoseHeaderErrorMessages),\n/* harmony export */   createJoseHeaderError: () => (/* binding */ createJoseHeaderError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JoseHeaderErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const JoseHeaderErrorMessages = {\n    [_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingKidError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided.\",\n    [_JoseHeaderErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingAlgError]: \"The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided.\"\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */ class JoseHeaderError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        this.name = \"JoseHeaderError\";\n        Object.setPrototypeOf(this, JoseHeaderError.prototype);\n    }\n}\n/** Returns JoseHeaderError object */ function createJoseHeaderError(code) {\n    return new JoseHeaderError(code, JoseHeaderErrorMessages[code]);\n}\n //# sourceMappingURL=JoseHeaderError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSm9zZUhlYWRlckVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUM0QztBQUNrQztBQUU5RTs7O0NBR0MsR0FDRCxNQUFNRywwQkFBMEI7SUFDNUIsQ0FBQ0Ysc0VBQWVBLENBQUMsRUFBRTtJQUNuQixDQUFDQyxzRUFBZUEsQ0FBQyxFQUFFO0FBQ3ZCO0FBQ0E7O0NBRUMsR0FDRCxNQUFNRSx3QkFBd0JKLHFEQUFTQTtJQUNuQ0ssWUFBWUMsU0FBUyxFQUFFQyxZQUFZLENBQUU7UUFDakMsS0FBSyxDQUFDRCxXQUFXQztRQUNqQixJQUFJLENBQUNDLElBQUksR0FBRztRQUNaQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFTixnQkFBZ0JPLFNBQVM7SUFDekQ7QUFDSjtBQUNBLG1DQUFtQyxHQUNuQyxTQUFTQyxzQkFBc0JDLElBQUk7SUFDL0IsT0FBTyxJQUFJVCxnQkFBZ0JTLE1BQU1WLHVCQUF1QixDQUFDVSxLQUFLO0FBQ2xFO0FBRTJFLENBQzNFLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9Kb3NlSGVhZGVyRXJyb3IubWpzP2NlMDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3IgfSBmcm9tICcuL0F1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgbWlzc2luZ0tpZEVycm9yLCBtaXNzaW5nQWxnRXJyb3IgfSBmcm9tICcuL0pvc2VIZWFkZXJFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBKb3NlSGVhZGVyRXJyb3JNZXNzYWdlcyA9IHtcclxuICAgIFttaXNzaW5nS2lkRXJyb3JdOiBcIlRoZSBKT1NFIEhlYWRlciBmb3IgdGhlIHJlcXVlc3RlZCBKV1QsIEpXUyBvciBKV0sgb2JqZWN0IHJlcXVpcmVzIGEga2V5SWQgdG8gYmUgY29uZmlndXJlZCBhcyB0aGUgJ2tpZCcgaGVhZGVyIGNsYWltLiBObyAna2lkJyB2YWx1ZSB3YXMgcHJvdmlkZWQuXCIsXHJcbiAgICBbbWlzc2luZ0FsZ0Vycm9yXTogXCJUaGUgSk9TRSBIZWFkZXIgZm9yIHRoZSByZXF1ZXN0ZWQgSldULCBKV1Mgb3IgSldLIG9iamVjdCByZXF1aXJlcyBhbiBhbGdvcml0aG0gdG8gYmUgc3BlY2lmaWVkIGFzIHRoZSAnYWxnJyBoZWFkZXIgY2xhaW0uIE5vICdhbGcnIHZhbHVlIHdhcyBwcm92aWRlZC5cIixcclxufTtcclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIGluIHRoZSBjbGllbnQgY29kZSBydW5uaW5nIG9uIHRoZSBicm93c2VyLlxyXG4gKi9cclxuY2xhc3MgSm9zZUhlYWRlckVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiSm9zZUhlYWRlckVycm9yXCI7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEpvc2VIZWFkZXJFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKiBSZXR1cm5zIEpvc2VIZWFkZXJFcnJvciBvYmplY3QgKi9cclxuZnVuY3Rpb24gY3JlYXRlSm9zZUhlYWRlckVycm9yKGNvZGUpIHtcclxuICAgIHJldHVybiBuZXcgSm9zZUhlYWRlckVycm9yKGNvZGUsIEpvc2VIZWFkZXJFcnJvck1lc3NhZ2VzW2NvZGVdKTtcclxufVxuXG5leHBvcnQgeyBKb3NlSGVhZGVyRXJyb3IsIEpvc2VIZWFkZXJFcnJvck1lc3NhZ2VzLCBjcmVhdGVKb3NlSGVhZGVyRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUpvc2VIZWFkZXJFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aEVycm9yIiwibWlzc2luZ0tpZEVycm9yIiwibWlzc2luZ0FsZ0Vycm9yIiwiSm9zZUhlYWRlckVycm9yTWVzc2FnZXMiLCJKb3NlSGVhZGVyRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsIm5hbWUiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImNyZWF0ZUpvc2VIZWFkZXJFcnJvciIsImNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   missingAlgError: () => (/* binding */ missingAlgError),\n/* harmony export */   missingKidError: () => (/* binding */ missingKidError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const missingKidError = \"missing_kid_error\";\nconst missingAlgError = \"missing_alg_error\";\n //# sourceMappingURL=JoseHeaderErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSm9zZUhlYWRlckVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUEsa0JBQWtCO0FBQ3hCLE1BQU1DLGtCQUFrQjtBQUVvQixDQUM1QyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSm9zZUhlYWRlckVycm9yQ29kZXMubWpzPzgzZTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgbWlzc2luZ0tpZEVycm9yID0gXCJtaXNzaW5nX2tpZF9lcnJvclwiO1xyXG5jb25zdCBtaXNzaW5nQWxnRXJyb3IgPSBcIm1pc3NpbmdfYWxnX2Vycm9yXCI7XG5cbmV4cG9ydCB7IG1pc3NpbmdBbGdFcnJvciwgbWlzc2luZ0tpZEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Kb3NlSGVhZGVyRXJyb3JDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsibWlzc2luZ0tpZEVycm9yIiwibWlzc2luZ0FsZ0Vycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/JoseHeaderErrorCodes.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/NetworkError.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   createNetworkError: () => (/* binding */ createNetworkError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Represents network related errors\r\n */ class NetworkError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(error, httpStatus, responseHeaders){\n        super(error.errorCode, error.errorMessage, error.subError);\n        Object.setPrototypeOf(this, NetworkError.prototype);\n        this.name = \"NetworkError\";\n        this.error = error;\n        this.httpStatus = httpStatus;\n        this.responseHeaders = responseHeaders;\n    }\n}\n/**\r\n * Creates NetworkError object for a failed network request\r\n * @param error - Error to be thrown back to the caller\r\n * @param httpStatus - Status code of the network request\r\n * @param responseHeaders - Response headers of the network request, when available\r\n * @returns NetworkError object\r\n */ function createNetworkError(error, httpStatus, responseHeaders) {\n    return new NetworkError(error, httpStatus, responseHeaders);\n}\n //# sourceMappingURL=NetworkError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvTmV0d29ya0Vycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNEM7QUFFNUM7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNQyxxQkFBcUJELHFEQUFTQTtJQUNoQ0UsWUFBWUMsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLGVBQWUsQ0FBRTtRQUM1QyxLQUFLLENBQUNGLE1BQU1HLFNBQVMsRUFBRUgsTUFBTUksWUFBWSxFQUFFSixNQUFNSyxRQUFRO1FBQ3pEQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFVCxhQUFhVSxTQUFTO1FBQ2xELElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDVCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtJQUMzQjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsbUJBQW1CVixLQUFLLEVBQUVDLFVBQVUsRUFBRUMsZUFBZTtJQUMxRCxPQUFPLElBQUlKLGFBQWFFLE9BQU9DLFlBQVlDO0FBQy9DO0FBRTRDLENBQzVDLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9OZXR3b3JrRXJyb3IubWpzP2JiMmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBBdXRoRXJyb3IgfSBmcm9tICcuL0F1dGhFcnJvci5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgbmV0d29yayByZWxhdGVkIGVycm9yc1xyXG4gKi9cclxuY2xhc3MgTmV0d29ya0Vycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yLCBodHRwU3RhdHVzLCByZXNwb25zZUhlYWRlcnMpIHtcclxuICAgICAgICBzdXBlcihlcnJvci5lcnJvckNvZGUsIGVycm9yLmVycm9yTWVzc2FnZSwgZXJyb3Iuc3ViRXJyb3IpO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBOZXR3b3JrRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIk5ldHdvcmtFcnJvclwiO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICB0aGlzLmh0dHBTdGF0dXMgPSBodHRwU3RhdHVzO1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VIZWFkZXJzID0gcmVzcG9uc2VIZWFkZXJzO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIE5ldHdvcmtFcnJvciBvYmplY3QgZm9yIGEgZmFpbGVkIG5ldHdvcmsgcmVxdWVzdFxyXG4gKiBAcGFyYW0gZXJyb3IgLSBFcnJvciB0byBiZSB0aHJvd24gYmFjayB0byB0aGUgY2FsbGVyXHJcbiAqIEBwYXJhbSBodHRwU3RhdHVzIC0gU3RhdHVzIGNvZGUgb2YgdGhlIG5ldHdvcmsgcmVxdWVzdFxyXG4gKiBAcGFyYW0gcmVzcG9uc2VIZWFkZXJzIC0gUmVzcG9uc2UgaGVhZGVycyBvZiB0aGUgbmV0d29yayByZXF1ZXN0LCB3aGVuIGF2YWlsYWJsZVxyXG4gKiBAcmV0dXJucyBOZXR3b3JrRXJyb3Igb2JqZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVOZXR3b3JrRXJyb3IoZXJyb3IsIGh0dHBTdGF0dXMsIHJlc3BvbnNlSGVhZGVycykge1xyXG4gICAgcmV0dXJuIG5ldyBOZXR3b3JrRXJyb3IoZXJyb3IsIGh0dHBTdGF0dXMsIHJlc3BvbnNlSGVhZGVycyk7XHJcbn1cblxuZXhwb3J0IHsgTmV0d29ya0Vycm9yLCBjcmVhdGVOZXR3b3JrRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5ldHdvcmtFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aEVycm9yIiwiTmV0d29ya0Vycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvciIsImh0dHBTdGF0dXMiLCJyZXNwb25zZUhlYWRlcnMiLCJlcnJvckNvZGUiLCJlcnJvck1lc3NhZ2UiLCJzdWJFcnJvciIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwibmFtZSIsImNyZWF0ZU5ldHdvcmtFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ServerError.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerError: () => (/* binding */ ServerError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */ class ServerError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(errorCode, errorMessage, subError, errorNo, status){\n        super(errorCode, errorMessage, subError);\n        this.name = \"ServerError\";\n        this.errorNo = errorNo;\n        this.status = status;\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n}\n //# sourceMappingURL=ServerError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvU2VydmVyRXJyb3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQzRDO0FBRTVDOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUMsb0JBQW9CRCxxREFBU0E7SUFDL0JFLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxDQUFFO1FBQzVELEtBQUssQ0FBQ0osV0FBV0MsY0FBY0M7UUFDL0IsSUFBSSxDQUFDRyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNGLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZEUsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRVQsWUFBWVUsU0FBUztJQUNyRDtBQUNKO0FBRXVCLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9TZXJ2ZXJFcnJvci5tanM/ZjUwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gJy4vQXV0aEVycm9yLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXJyb3IgdGhyb3duIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3Igd2l0aCB0aGUgc2VydmVyIGNvZGUsIGZvciBleGFtcGxlLCB1bmF2YWlsYWJpbGl0eS5cclxuICovXHJcbmNsYXNzIFNlcnZlckVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlLCBzdWJFcnJvciwgZXJyb3JObywgc3RhdHVzKSB7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UsIHN1YkVycm9yKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIlNlcnZlckVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5lcnJvck5vID0gZXJyb3JObztcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgU2VydmVyRXJyb3IucHJvdG90eXBlKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBTZXJ2ZXJFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VydmVyRXJyb3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhFcnJvciIsIlNlcnZlckVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvckNvZGUiLCJlcnJvck1lc3NhZ2UiLCJzdWJFcnJvciIsImVycm9yTm8iLCJzdGF0dXMiLCJuYW1lIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/logger/Logger.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   Logger: () => (/* binding */ Logger)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Log message level.\r\n */ var LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */ class Logger {\n    constructor(loggerOptions, packageName, packageVersion){\n        // Current log level, defaults to info.\n        this.level = LogLevel.Info;\n        const defaultLoggerCallback = ()=>{\n            return;\n        };\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\n        this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n        this.level = typeof setLoggerOptions.logLevel === \"number\" ? setLoggerOptions.logLevel : LogLevel.Info;\n        this.correlationId = setLoggerOptions.correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.packageName = packageName || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n    }\n    static createDefaultLoggerOptions() {\n        return {\n            loggerCallback: ()=>{\n            // allow users to not set loggerCallback\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Info\n        };\n    }\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */ clone(packageName, packageVersion, correlationId) {\n        return new Logger({\n            loggerCallback: this.localCallback,\n            piiLoggingEnabled: this.piiLoggingEnabled,\n            logLevel: this.level,\n            correlationId: correlationId || this.correlationId\n        }, packageName, packageVersion);\n    }\n    /**\r\n     * Log message with required options.\r\n     */ logMessage(logMessage, options) {\n        if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n    /**\r\n     * Execute callback with message.\r\n     */ executeCallback(level, message, containsPii) {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n    /**\r\n     * Logs error messages.\r\n     */ error(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs error messages with PII.\r\n     */ errorPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs warning messages.\r\n     */ warning(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs warning messages with PII.\r\n     */ warningPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs info messages.\r\n     */ info(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs info messages with PII.\r\n     */ infoPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs verbose messages.\r\n     */ verbose(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs verbose messages with PII.\r\n     */ verbosePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs trace messages.\r\n     */ trace(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs trace messages with PII.\r\n     */ tracePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */ isPiiLoggingEnabled() {\n        return this.piiLoggingEnabled || false;\n    }\n}\n //# sourceMappingURL=Logger.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StubbedNetworkModule: () => (/* binding */ StubbedNetworkModule)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const StubbedNetworkModule = {\n    sendGetRequestAsync: ()=>{\n        return Promise.reject((0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented));\n    },\n    sendPostRequestAsync: ()=>{\n        return Promise.reject((0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented));\n    }\n};\n //# sourceMappingURL=INetworkModule.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvbmV0d29yay9JTmV0d29ya01vZHVsZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3FFO0FBQ0k7QUFFekU7OztDQUdDLEdBQ0QsTUFBTUUsdUJBQXVCO0lBQ3pCQyxxQkFBcUI7UUFDakIsT0FBT0MsUUFBUUMsTUFBTSxDQUFDTCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEU7SUFDQUssc0JBQXNCO1FBQ2xCLE9BQU9GLFFBQVFDLE1BQU0sQ0FBQ0wsaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BFO0FBQ0o7QUFFZ0MsQ0FDaEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L25ldHdvcmsvSU5ldHdvcmtNb2R1bGUubWpzPzE2OGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IG1ldGhvZE5vdEltcGxlbWVudGVkIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IFN0dWJiZWROZXR3b3JrTW9kdWxlID0ge1xyXG4gICAgc2VuZEdldFJlcXVlc3RBc3luYzogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpKTtcclxuICAgIH0sXHJcbiAgICBzZW5kUG9zdFJlcXVlc3RBc3luYzogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpKTtcclxuICAgIH0sXHJcbn07XG5cbmV4cG9ydCB7IFN0dWJiZWROZXR3b3JrTW9kdWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JTmV0d29ya01vZHVsZS5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwibWV0aG9kTm90SW1wbGVtZW50ZWQiLCJTdHViYmVkTmV0d29ya01vZHVsZSIsInNlbmRHZXRSZXF1ZXN0QXN5bmMiLCJQcm9taXNlIiwicmVqZWN0Iiwic2VuZFBvc3RSZXF1ZXN0QXN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/network/INetworkModule.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThrottlingUtils: () => (/* binding */ ThrottlingUtils)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class ThrottlingUtils {\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */ static generateThrottlingStorageKey(thumbprint) {\n        return `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */ static preProcess(cacheManager, thumbprint) {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_1__.ServerError(value.errorCodes?.join(\" \") || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */ static postProcess(cacheManager, thumbprint, response) {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n        }\n    }\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */ static checkResponseStatus(response) {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */ static checkResponseForRetryAfter(response) {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */ static calculateThrottleTime(throttleTime) {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(currentSeconds + (time || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n    }\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n        const thumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n //# sourceMappingURL=ThrottlingUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/packageMetadata.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/* eslint-disable header/header */ const name = \"@azure/msal-common\";\nconst version = \"14.16.0\";\n //# sourceMappingURL=packageMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcGFja2FnZU1ldGFkYXRhLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBLGdDQUFnQyxHQUNoQyxNQUFNQSxPQUFPO0FBQ2IsTUFBTUMsVUFBVTtBQUVTLENBQ3pCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9wYWNrYWdlTWV0YWRhdGEubWpzP2UwZjEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBoZWFkZXIvaGVhZGVyICovXHJcbmNvbnN0IG5hbWUgPSBcIkBhenVyZS9tc2FsLWNvbW1vblwiO1xyXG5jb25zdCB2ZXJzaW9uID0gXCIxNC4xNi4wXCI7XG5cbmV4cG9ydCB7IG5hbWUsIHZlcnNpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhY2thZ2VNZXRhZGF0YS5tanMubWFwXG4iXSwibmFtZXMiOlsibmFtZSIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestParameterBuilder: () => (/* binding */ RequestParameterBuilder)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScopeSet.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestValidator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function instrumentBrokerParams(parameters, correlationId, performanceClient) {\n    if (!correlationId) {\n        return;\n    }\n    const clientId = parameters.get(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ID);\n    if (clientId && parameters.has(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_CLIENT_ID)) {\n        performanceClient?.addFields({\n            embeddedClientId: clientId,\n            embeddedRedirectUri: parameters.get(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REDIRECT_URI)\n        }, correlationId);\n    }\n}\n/** @internal */ class RequestParameterBuilder {\n    constructor(correlationId, performanceClient){\n        this.parameters = new Map();\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n    /**\r\n     * add response_type = code\r\n     */ addResponseTypeCode() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_TYPE, encodeURIComponent(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CODE_RESPONSE_TYPE));\n    }\n    /**\r\n     * add response_type = token id_token\r\n     */ addResponseTypeForTokenAndIdToken() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_TYPE, encodeURIComponent(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.TOKEN_RESPONSE_TYPE} ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.ID_TOKEN_RESPONSE_TYPE}`));\n    }\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */ addResponseMode(responseMode) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ResponseMode.QUERY));\n    }\n    /**\r\n     * Add flag to indicate STS should attempt to use WAM if available\r\n     */ addNativeBroker() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.NATIVE_BROKER, encodeURIComponent(\"1\"));\n    }\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */ addScopes(scopes, addOidcScopes = true, defaultScopes = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES) {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes ? [\n            ...scopes || [],\n            ...defaultScopes\n        ] : scopes || [];\n        const scopeSet = new _ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_2__.ScopeSet(requestScopes);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */ addClientId(clientId) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ID, encodeURIComponent(clientId));\n    }\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */ addRedirectUri(redirectUri) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */ addPostLogoutRedirectUri(redirectUri) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */ addIdTokenHint(idTokenHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */ addDomainHint(domainHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */ addLoginHint(loginHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */ addCcsUpn(loginHint) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */ addCcsOid(clientInfo) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */ addSid(sid) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.SID, encodeURIComponent(sid));\n    }\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */ addClaims(claims, clientCapabilities) {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */ addCorrelationId(correlationId) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */ addLibraryInfo(libraryInfo) {\n        // Telemetry Info\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_VER, libraryInfo.version);\n        if (libraryInfo.os) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_CPU, libraryInfo.cpu);\n        }\n    }\n    /**\r\n     * Add client telemetry parameters\r\n     * @param appTelemetry\r\n     */ addApplicationTelemetry(appTelemetry) {\n        if (appTelemetry?.appName) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_APP_NAME, appTelemetry.appName);\n        }\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_APP_VER, appTelemetry.appVersion);\n        }\n    }\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */ addPrompt(prompt) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.PROMPT}`, encodeURIComponent(prompt));\n    }\n    /**\r\n     * add state\r\n     * @param state\r\n     */ addState(state) {\n        if (state) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.STATE, encodeURIComponent(state));\n        }\n    }\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */ addNonce(nonce) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.NONCE, encodeURIComponent(nonce));\n    }\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */ addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        } else {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.pkceParamsMissing);\n        }\n    }\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */ addAuthorizationCode(code) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE, encodeURIComponent(code));\n    }\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */ addDeviceCode(code) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.DEVICE_CODE, encodeURIComponent(code));\n    }\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */ addRefreshToken(refreshToken) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */ addCodeVerifier(codeVerifier) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */ addClientSecret(clientSecret) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */ addClientAssertion(clientAssertion) {\n        if (clientAssertion) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n        }\n    }\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */ addClientAssertionType(clientAssertionType) {\n        if (clientAssertionType) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n        }\n    }\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */ addOboAssertion(oboAssertion) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */ addRequestTokenUse(tokenUse) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */ addGrantType(grantType) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n    /**\r\n     * add client info\r\n     *\r\n     */ addClientInfo() {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CLIENT_INFO, \"1\");\n    }\n    /**\r\n     * add extraQueryParams\r\n     * @param eQParams\r\n     */ addExtraQueryParameters(eQParams) {\n        Object.entries(eQParams).forEach(([key, value])=>{\n            if (!this.parameters.has(key) && value) {\n                this.parameters.set(key, value);\n            }\n        });\n    }\n    addClientCapabilitiesToClaims(claims, clientCapabilities) {\n        let mergedClaims;\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch (e) {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.invalidClaims);\n            }\n        }\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN][_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities\n            };\n        }\n        return JSON.stringify(mergedClaims);\n    }\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */ addUsername(username) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.PasswordGrantConstants.username, encodeURIComponent(username));\n    }\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */ addPassword(password) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.PasswordGrantConstants.password, encodeURIComponent(password));\n    }\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */ addPopToken(cnfString) {\n        if (cnfString) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.TOKEN_TYPE, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.POP);\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n    /**\r\n     * add SSH JWK and key ID to query params\r\n     */ addSshJwk(sshJwkString) {\n        if (sshJwkString) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.TOKEN_TYPE, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.SSH);\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */ addServerTelemetry(serverTelemetryManager) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */ addThrottling() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_MS_LIB_CAPABILITY, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n    /**\r\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n     */ addLogoutHint(logoutHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n    addBrokerParameters(params) {\n        const brokerParams = {};\n        brokerParams[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_CLIENT_ID] = params.brokerClientId;\n        brokerParams[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_REDIRECT_URI] = params.brokerRedirectUri;\n        this.addExtraQueryParameters(brokerParams);\n    }\n    /**\r\n     * Utility to create a URL from the params map\r\n     */ createQueryString() {\n        const queryParameterArray = new Array();\n        this.parameters.forEach((value, key)=>{\n            queryParameterArray.push(`${key}=${value}`);\n        });\n        instrumentBrokerParams(this.parameters, this.correlationId, this.performanceClient);\n        return queryParameterArray.join(\"&\");\n    }\n}\n //# sourceMappingURL=RequestParameterBuilder.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcmVxdWVzdC9SZXF1ZXN0UGFyYW1ldGVyQnVpbGRlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNzTTtBQUNpYztBQUM3bEI7QUFDNkM7QUFDN0I7QUFDb0M7QUFFOUY7OztDQUdDLEdBQ0QsU0FBU3dELHVCQUF1QkMsVUFBVSxFQUFFQyxhQUFhLEVBQUVDLGlCQUFpQjtJQUN4RSxJQUFJLENBQUNELGVBQWU7UUFDaEI7SUFDSjtJQUNBLE1BQU1FLFdBQVdILFdBQVdJLEdBQUcsQ0FBQ2hELHdFQUFTQTtJQUN6QyxJQUFJK0MsWUFBWUgsV0FBV0ssR0FBRyxDQUFDYiwrRUFBZ0JBLEdBQUc7UUFDOUNVLG1CQUFtQkksVUFBVTtZQUN6QkMsa0JBQWtCSjtZQUNsQksscUJBQXFCUixXQUFXSSxHQUFHLENBQUMvQywyRUFBWUE7UUFDcEQsR0FBRzRDO0lBQ1A7QUFDSjtBQUNBLGNBQWMsR0FDZCxNQUFNUTtJQUNGQyxZQUFZVCxhQUFhLEVBQUVDLGlCQUFpQixDQUFFO1FBQzFDLElBQUksQ0FBQ0YsVUFBVSxHQUFHLElBQUlXO1FBQ3RCLElBQUksQ0FBQ1QsaUJBQWlCLEdBQUdBO1FBQ3pCLElBQUksQ0FBQ0QsYUFBYSxHQUFHQTtJQUN6QjtJQUNBOztLQUVDLEdBQ0RXLHNCQUFzQjtRQUNsQixJQUFJLENBQUNaLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDN0QsNEVBQWFBLEVBQUU4RCxtQkFBbUJ2RSwyREFBU0EsQ0FBQ3dFLGtCQUFrQjtJQUN0RjtJQUNBOztLQUVDLEdBQ0RDLG9DQUFvQztRQUNoQyxJQUFJLENBQUNoQixVQUFVLENBQUNhLEdBQUcsQ0FBQzdELDRFQUFhQSxFQUFFOEQsbUJBQW1CLENBQUMsRUFBRXZFLDJEQUFTQSxDQUFDMEUsbUJBQW1CLENBQUMsQ0FBQyxFQUFFMUUsMkRBQVNBLENBQUMyRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQ2hJO0lBQ0E7OztLQUdDLEdBQ0RDLGdCQUFnQkMsWUFBWSxFQUFFO1FBQzFCLElBQUksQ0FBQ3BCLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDNUQsNEVBQWFBLEVBQUU2RCxtQkFBbUJNLGVBQWVBLGVBQWU1RSw4REFBWUEsQ0FBQzZFLEtBQUs7SUFDMUc7SUFDQTs7S0FFQyxHQUNEQyxrQkFBa0I7UUFDZCxJQUFJLENBQUN0QixVQUFVLENBQUNhLEdBQUcsQ0FBQzNELDRFQUFhQSxFQUFFNEQsbUJBQW1CO0lBQzFEO0lBQ0E7Ozs7S0FJQyxHQUNEUyxVQUFVQyxNQUFNLEVBQUVDLGdCQUFnQixJQUFJLEVBQUVDLGdCQUFnQmpGLHFFQUFtQixFQUFFO1FBQ3pFLDBEQUEwRDtRQUMxRCxJQUFJZ0YsaUJBQ0EsQ0FBQ0MsY0FBY0MsUUFBUSxDQUFDLGFBQ3hCLENBQUNILE9BQU9HLFFBQVEsQ0FBQyxXQUFXO1lBQzVCRCxjQUFjRSxJQUFJLENBQUM7UUFDdkI7UUFDQSxNQUFNQyxnQkFBZ0JKLGdCQUNoQjtlQUFLRCxVQUFVLEVBQUU7ZUFBTUU7U0FBYyxHQUNyQ0YsVUFBVSxFQUFFO1FBQ2xCLE1BQU1NLFdBQVcsSUFBSXBDLG1EQUFRQSxDQUFDbUM7UUFDOUIsSUFBSSxDQUFDN0IsVUFBVSxDQUFDYSxHQUFHLENBQUMxRCxvRUFBS0EsRUFBRTJELG1CQUFtQmdCLFNBQVNDLFdBQVc7SUFDdEU7SUFDQTs7O0tBR0MsR0FDREMsWUFBWTdCLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUNILFVBQVUsQ0FBQ2EsR0FBRyxDQUFDekQsd0VBQVNBLEVBQUUwRCxtQkFBbUJYO0lBQ3REO0lBQ0E7OztLQUdDLEdBQ0Q4QixlQUFlQyxXQUFXLEVBQUU7UUFDeEJ0QyxtRUFBZ0JBLENBQUN1QyxtQkFBbUIsQ0FBQ0Q7UUFDckMsSUFBSSxDQUFDbEMsVUFBVSxDQUFDYSxHQUFHLENBQUN4RCwyRUFBWUEsRUFBRXlELG1CQUFtQm9CO0lBQ3pEO0lBQ0E7OztLQUdDLEdBQ0RFLHlCQUF5QkYsV0FBVyxFQUFFO1FBQ2xDdEMsbUVBQWdCQSxDQUFDdUMsbUJBQW1CLENBQUNEO1FBQ3JDLElBQUksQ0FBQ2xDLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDdkQsOEVBQWVBLEVBQUV3RCxtQkFBbUJvQjtJQUM1RDtJQUNBOzs7S0FHQyxHQUNERyxlQUFlQyxXQUFXLEVBQUU7UUFDeEIsSUFBSSxDQUFDdEMsVUFBVSxDQUFDYSxHQUFHLENBQUN0RCw0RUFBYUEsRUFBRXVELG1CQUFtQndCO0lBQzFEO0lBQ0E7OztLQUdDLEdBQ0RDLGNBQWNDLFVBQVUsRUFBRTtRQUN0QixJQUFJLENBQUN4QyxVQUFVLENBQUNhLEdBQUcsQ0FBQ3JELDBFQUFXQSxFQUFFc0QsbUJBQW1CMEI7SUFDeEQ7SUFDQTs7O0tBR0MsR0FDREMsYUFBYUMsU0FBUyxFQUFFO1FBQ3BCLElBQUksQ0FBQzFDLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDcEQseUVBQVVBLEVBQUVxRCxtQkFBbUI0QjtJQUN2RDtJQUNBOzs7S0FHQyxHQUNEQyxVQUFVRCxTQUFTLEVBQUU7UUFDakIsSUFBSSxDQUFDMUMsVUFBVSxDQUFDYSxHQUFHLENBQUNuRSw2REFBV0EsQ0FBQ2tHLFVBQVUsRUFBRTlCLG1CQUFtQixDQUFDLElBQUksRUFBRTRCLFVBQVUsQ0FBQztJQUNyRjtJQUNBOzs7S0FHQyxHQUNERyxVQUFVQyxVQUFVLEVBQUU7UUFDbEIsSUFBSSxDQUFDOUMsVUFBVSxDQUFDYSxHQUFHLENBQUNuRSw2REFBV0EsQ0FBQ2tHLFVBQVUsRUFBRTlCLG1CQUFtQixDQUFDLElBQUksRUFBRWdDLFdBQVdDLEdBQUcsQ0FBQyxDQUFDLEVBQUVELFdBQVdFLElBQUksQ0FBQyxDQUFDO0lBQzdHO0lBQ0E7OztLQUdDLEdBQ0RDLE9BQU9DLEdBQUcsRUFBRTtRQUNSLElBQUksQ0FBQ2xELFVBQVUsQ0FBQ2EsR0FBRyxDQUFDbkQsa0VBQUdBLEVBQUVvRCxtQkFBbUJvQztJQUNoRDtJQUNBOzs7S0FHQyxHQUNEQyxVQUFVQyxNQUFNLEVBQUVDLGtCQUFrQixFQUFFO1FBQ2xDLE1BQU1DLGVBQWUsSUFBSSxDQUFDQyw2QkFBNkIsQ0FBQ0gsUUFBUUM7UUFDaEV6RCxtRUFBZ0JBLENBQUM0RCxjQUFjLENBQUNGO1FBQ2hDLElBQUksQ0FBQ3RELFVBQVUsQ0FBQ2EsR0FBRyxDQUFDbEQscUVBQU1BLEVBQUVtRCxtQkFBbUJ3QztJQUNuRDtJQUNBOzs7S0FHQyxHQUNERyxpQkFBaUJ4RCxhQUFhLEVBQUU7UUFDNUIsSUFBSSxDQUFDRCxVQUFVLENBQUNhLEdBQUcsQ0FBQ2pELGdGQUFpQkEsRUFBRWtELG1CQUFtQmI7SUFDOUQ7SUFDQTs7O0tBR0MsR0FDRHlELGVBQWVDLFdBQVcsRUFBRTtRQUN4QixpQkFBaUI7UUFDakIsSUFBSSxDQUFDM0QsVUFBVSxDQUFDYSxHQUFHLENBQUNoRCwyRUFBWUEsRUFBRThGLFlBQVlDLEdBQUc7UUFDakQsSUFBSSxDQUFDNUQsVUFBVSxDQUFDYSxHQUFHLENBQUMvQywyRUFBWUEsRUFBRTZGLFlBQVlFLE9BQU87UUFDckQsSUFBSUYsWUFBWUcsRUFBRSxFQUFFO1lBQ2hCLElBQUksQ0FBQzlELFVBQVUsQ0FBQ2EsR0FBRyxDQUFDOUMsMEVBQVdBLEVBQUU0RixZQUFZRyxFQUFFO1FBQ25EO1FBQ0EsSUFBSUgsWUFBWUksR0FBRyxFQUFFO1lBQ2pCLElBQUksQ0FBQy9ELFVBQVUsQ0FBQ2EsR0FBRyxDQUFDN0MsMkVBQVlBLEVBQUUyRixZQUFZSSxHQUFHO1FBQ3JEO0lBQ0o7SUFDQTs7O0tBR0MsR0FDREMsd0JBQXdCQyxZQUFZLEVBQUU7UUFDbEMsSUFBSUEsY0FBY0MsU0FBUztZQUN2QixJQUFJLENBQUNsRSxVQUFVLENBQUNhLEdBQUcsQ0FBQzVDLHlFQUFVQSxFQUFFZ0csYUFBYUMsT0FBTztRQUN4RDtRQUNBLElBQUlELGNBQWNFLFlBQVk7WUFDMUIsSUFBSSxDQUFDbkUsVUFBVSxDQUFDYSxHQUFHLENBQUMzQyx3RUFBU0EsRUFBRStGLGFBQWFFLFVBQVU7UUFDMUQ7SUFDSjtJQUNBOzs7S0FHQyxHQUNEQyxVQUFVQyxNQUFNLEVBQUU7UUFDZHpFLG1FQUFnQkEsQ0FBQzBFLGNBQWMsQ0FBQ0Q7UUFDaEMsSUFBSSxDQUFDckUsVUFBVSxDQUFDYSxHQUFHLENBQUMsQ0FBQyxFQUFFMUMscUVBQU1BLENBQUMsQ0FBQyxFQUFFMkMsbUJBQW1CdUQ7SUFDeEQ7SUFDQTs7O0tBR0MsR0FDREUsU0FBU0MsS0FBSyxFQUFFO1FBQ1osSUFBSUEsT0FBTztZQUNQLElBQUksQ0FBQ3hFLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDekMsb0VBQUtBLEVBQUUwQyxtQkFBbUIwRDtRQUNsRDtJQUNKO0lBQ0E7OztLQUdDLEdBQ0RDLFNBQVNDLEtBQUssRUFBRTtRQUNaLElBQUksQ0FBQzFFLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDeEMsb0VBQUtBLEVBQUV5QyxtQkFBbUI0RDtJQUNsRDtJQUNBOzs7OztLQUtDLEdBQ0RDLHVCQUF1QkMsYUFBYSxFQUFFQyxtQkFBbUIsRUFBRTtRQUN2RGpGLG1FQUFnQkEsQ0FBQ2tGLDJCQUEyQixDQUFDRixlQUFlQztRQUM1RCxJQUFJRCxpQkFBaUJDLHFCQUFxQjtZQUN0QyxJQUFJLENBQUM3RSxVQUFVLENBQUNhLEdBQUcsQ0FBQ3ZDLDZFQUFjQSxFQUFFd0MsbUJBQW1COEQ7WUFDdkQsSUFBSSxDQUFDNUUsVUFBVSxDQUFDYSxHQUFHLENBQUN0QyxvRkFBcUJBLEVBQUV1QyxtQkFBbUIrRDtRQUNsRSxPQUNLO1lBQ0QsTUFBTWxGLG1HQUE4QkEsQ0FBQ0UsdUZBQWlCQTtRQUMxRDtJQUNKO0lBQ0E7OztLQUdDLEdBQ0RrRixxQkFBcUJDLElBQUksRUFBRTtRQUN2QixJQUFJLENBQUNoRixVQUFVLENBQUNhLEdBQUcsQ0FBQ3JDLG1FQUFJQSxFQUFFc0MsbUJBQW1Ca0U7SUFDakQ7SUFDQTs7O0tBR0MsR0FDREMsY0FBY0QsSUFBSSxFQUFFO1FBQ2hCLElBQUksQ0FBQ2hGLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDcEMsMEVBQVdBLEVBQUVxQyxtQkFBbUJrRTtJQUN4RDtJQUNBOzs7S0FHQyxHQUNERSxnQkFBZ0JDLFlBQVksRUFBRTtRQUMxQixJQUFJLENBQUNuRixVQUFVLENBQUNhLEdBQUcsQ0FBQ25DLDRFQUFhQSxFQUFFb0MsbUJBQW1CcUU7SUFDMUQ7SUFDQTs7O0tBR0MsR0FDREMsZ0JBQWdCQyxZQUFZLEVBQUU7UUFDMUIsSUFBSSxDQUFDckYsVUFBVSxDQUFDYSxHQUFHLENBQUNsQyw0RUFBYUEsRUFBRW1DLG1CQUFtQnVFO0lBQzFEO0lBQ0E7OztLQUdDLEdBQ0RDLGdCQUFnQkMsWUFBWSxFQUFFO1FBQzFCLElBQUksQ0FBQ3ZGLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDakMsNEVBQWFBLEVBQUVrQyxtQkFBbUJ5RTtJQUMxRDtJQUNBOzs7S0FHQyxHQUNEQyxtQkFBbUJDLGVBQWUsRUFBRTtRQUNoQyxJQUFJQSxpQkFBaUI7WUFDakIsSUFBSSxDQUFDekYsVUFBVSxDQUFDYSxHQUFHLENBQUNoQywrRUFBZ0JBLEVBQUVpQyxtQkFBbUIyRTtRQUM3RDtJQUNKO0lBQ0E7OztLQUdDLEdBQ0RDLHVCQUF1QkMsbUJBQW1CLEVBQUU7UUFDeEMsSUFBSUEscUJBQXFCO1lBQ3JCLElBQUksQ0FBQzNGLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDL0Isb0ZBQXFCQSxFQUFFZ0MsbUJBQW1CNkU7UUFDbEU7SUFDSjtJQUNBOzs7S0FHQyxHQUNEQyxnQkFBZ0JDLFlBQVksRUFBRTtRQUMxQixJQUFJLENBQUM3RixVQUFVLENBQUNhLEdBQUcsQ0FBQzlCLDRFQUFhQSxFQUFFK0IsbUJBQW1CK0U7SUFDMUQ7SUFDQTs7O0tBR0MsR0FDREMsbUJBQW1CQyxRQUFRLEVBQUU7UUFDekIsSUFBSSxDQUFDL0YsVUFBVSxDQUFDYSxHQUFHLENBQUM3QixrRkFBbUJBLEVBQUU4QixtQkFBbUJpRjtJQUNoRTtJQUNBOzs7S0FHQyxHQUNEQyxhQUFhQyxTQUFTLEVBQUU7UUFDcEIsSUFBSSxDQUFDakcsVUFBVSxDQUFDYSxHQUFHLENBQUM1Qix5RUFBVUEsRUFBRTZCLG1CQUFtQm1GO0lBQ3ZEO0lBQ0E7OztLQUdDLEdBQ0RDLGdCQUFnQjtRQUNaLElBQUksQ0FBQ2xHLFVBQVUsQ0FBQ2EsR0FBRyxDQUFDbEUsNkRBQVdBLEVBQUU7SUFDckM7SUFDQTs7O0tBR0MsR0FDRHdKLHdCQUF3QkMsUUFBUSxFQUFFO1FBQzlCQyxPQUFPQyxPQUFPLENBQUNGLFVBQVVHLE9BQU8sQ0FBQyxDQUFDLENBQUNDLEtBQUtDLE1BQU07WUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQ3pHLFVBQVUsQ0FBQ0ssR0FBRyxDQUFDbUcsUUFBUUMsT0FBTztnQkFDcEMsSUFBSSxDQUFDekcsVUFBVSxDQUFDYSxHQUFHLENBQUMyRixLQUFLQztZQUM3QjtRQUNKO0lBQ0o7SUFDQWxELDhCQUE4QkgsTUFBTSxFQUFFQyxrQkFBa0IsRUFBRTtRQUN0RCxJQUFJQztRQUNKLG9FQUFvRTtRQUNwRSxJQUFJLENBQUNGLFFBQVE7WUFDVEUsZUFBZSxDQUFDO1FBQ3BCLE9BQ0s7WUFDRCxJQUFJO2dCQUNBQSxlQUFlb0QsS0FBS0MsS0FBSyxDQUFDdkQ7WUFDOUIsRUFDQSxPQUFPd0QsR0FBRztnQkFDTixNQUFNakgsbUdBQThCQSxDQUFDRyxtRkFBYUE7WUFDdEQ7UUFDSjtRQUNBLElBQUl1RCxzQkFBc0JBLG1CQUFtQndELE1BQU0sR0FBRyxHQUFHO1lBQ3JELElBQUksQ0FBQ3ZELGFBQWF3RCxjQUFjLENBQUNsSyxtRUFBaUJBLENBQUNtSyxZQUFZLEdBQUc7Z0JBQzlELHdDQUF3QztnQkFDeEN6RCxZQUFZLENBQUMxRyxtRUFBaUJBLENBQUNtSyxZQUFZLENBQUMsR0FBRyxDQUFDO1lBQ3BEO1lBQ0Esd0VBQXdFO1lBQ3hFekQsWUFBWSxDQUFDMUcsbUVBQWlCQSxDQUFDbUssWUFBWSxDQUFDLENBQUNuSyxtRUFBaUJBLENBQUNvSyxNQUFNLENBQUMsR0FBRztnQkFDckVDLFFBQVE1RDtZQUNaO1FBQ0o7UUFDQSxPQUFPcUQsS0FBS1EsU0FBUyxDQUFDNUQ7SUFDMUI7SUFDQTs7O0tBR0MsR0FDRDZELFlBQVlDLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUNwSCxVQUFVLENBQUNhLEdBQUcsQ0FBQ2hFLHdFQUFzQkEsQ0FBQ3VLLFFBQVEsRUFBRXRHLG1CQUFtQnNHO0lBQzVFO0lBQ0E7OztLQUdDLEdBQ0RDLFlBQVlDLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUN0SCxVQUFVLENBQUNhLEdBQUcsQ0FBQ2hFLHdFQUFzQkEsQ0FBQ3lLLFFBQVEsRUFBRXhHLG1CQUFtQndHO0lBQzVFO0lBQ0E7OztLQUdDLEdBQ0RDLFlBQVlDLFNBQVMsRUFBRTtRQUNuQixJQUFJQSxXQUFXO1lBQ1gsSUFBSSxDQUFDeEgsVUFBVSxDQUFDYSxHQUFHLENBQUMzQix5RUFBVUEsRUFBRXBDLHNFQUFvQkEsQ0FBQzJLLEdBQUc7WUFDeEQsSUFBSSxDQUFDekgsVUFBVSxDQUFDYSxHQUFHLENBQUMxQixzRUFBT0EsRUFBRTJCLG1CQUFtQjBHO1FBQ3BEO0lBQ0o7SUFDQTs7S0FFQyxHQUNERSxVQUFVQyxZQUFZLEVBQUU7UUFDcEIsSUFBSUEsY0FBYztZQUNkLElBQUksQ0FBQzNILFVBQVUsQ0FBQ2EsR0FBRyxDQUFDM0IseUVBQVVBLEVBQUVwQyxzRUFBb0JBLENBQUM4SyxHQUFHO1lBQ3hELElBQUksQ0FBQzVILFVBQVUsQ0FBQ2EsR0FBRyxDQUFDMUIsc0VBQU9BLEVBQUUyQixtQkFBbUI2RztRQUNwRDtJQUNKO0lBQ0E7OztLQUdDLEdBQ0RFLG1CQUFtQkMsc0JBQXNCLEVBQUU7UUFDdkMsSUFBSSxDQUFDOUgsVUFBVSxDQUFDYSxHQUFHLENBQUN6QixrRkFBbUJBLEVBQUUwSSx1QkFBdUJDLGlDQUFpQztRQUNqRyxJQUFJLENBQUMvSCxVQUFVLENBQUNhLEdBQUcsQ0FBQ3hCLGtGQUFtQkEsRUFBRXlJLHVCQUF1QkUsOEJBQThCO0lBQ2xHO0lBQ0E7O0tBRUMsR0FDREMsZ0JBQWdCO1FBQ1osSUFBSSxDQUFDakksVUFBVSxDQUFDYSxHQUFHLENBQUN2QixrRkFBbUJBLEVBQUV2QyxxRUFBbUJBLENBQUNtTCx5QkFBeUI7SUFDMUY7SUFDQTs7S0FFQyxHQUNEQyxjQUFjQyxVQUFVLEVBQUU7UUFDdEIsSUFBSSxDQUFDcEksVUFBVSxDQUFDYSxHQUFHLENBQUN0QiwwRUFBV0EsRUFBRXVCLG1CQUFtQnNIO0lBQ3hEO0lBQ0FDLG9CQUFvQkMsTUFBTSxFQUFFO1FBQ3hCLE1BQU1DLGVBQWUsQ0FBQztRQUN0QkEsWUFBWSxDQUFDL0ksK0VBQWdCQSxDQUFDLEdBQzFCOEksT0FBT0UsY0FBYztRQUN6QkQsWUFBWSxDQUFDOUksa0ZBQW1CQSxDQUFDLEdBQzdCNkksT0FBT0csaUJBQWlCO1FBQzVCLElBQUksQ0FBQ3RDLHVCQUF1QixDQUFDb0M7SUFDakM7SUFDQTs7S0FFQyxHQUNERyxvQkFBb0I7UUFDaEIsTUFBTUMsc0JBQXNCLElBQUlDO1FBQ2hDLElBQUksQ0FBQzVJLFVBQVUsQ0FBQ3VHLE9BQU8sQ0FBQyxDQUFDRSxPQUFPRDtZQUM1Qm1DLG9CQUFvQi9HLElBQUksQ0FBQyxDQUFDLEVBQUU0RSxJQUFJLENBQUMsRUFBRUMsTUFBTSxDQUFDO1FBQzlDO1FBQ0ExRyx1QkFBdUIsSUFBSSxDQUFDQyxVQUFVLEVBQUUsSUFBSSxDQUFDQyxhQUFhLEVBQUUsSUFBSSxDQUFDQyxpQkFBaUI7UUFDbEYsT0FBT3lJLG9CQUFvQkUsSUFBSSxDQUFDO0lBQ3BDO0FBQ0o7QUFFbUMsQ0FDbkMsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3JlcXVlc3QvUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIubWpzPzZhMTciXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBDb25zdGFudHMsIFJlc3BvbnNlTW9kZSwgT0lEQ19ERUZBVUxUX1NDT1BFUywgSGVhZGVyTmFtZXMsIENMSUVOVF9JTkZPLCBDbGFpbXNSZXF1ZXN0S2V5cywgUGFzc3dvcmRHcmFudENvbnN0YW50cywgQXV0aGVudGljYXRpb25TY2hlbWUsIFRocm90dGxpbmdDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9Db25zdGFudHMubWpzJztcbmltcG9ydCB7IFJFU1BPTlNFX1RZUEUsIFJFU1BPTlNFX01PREUsIE5BVElWRV9CUk9LRVIsIFNDT1BFLCBDTElFTlRfSUQsIFJFRElSRUNUX1VSSSwgUE9TVF9MT0dPVVRfVVJJLCBJRF9UT0tFTl9ISU5ULCBET01BSU5fSElOVCwgTE9HSU5fSElOVCwgU0lELCBDTEFJTVMsIENMSUVOVF9SRVFVRVNUX0lELCBYX0NMSUVOVF9TS1UsIFhfQ0xJRU5UX1ZFUiwgWF9DTElFTlRfT1MsIFhfQ0xJRU5UX0NQVSwgWF9BUFBfTkFNRSwgWF9BUFBfVkVSLCBQUk9NUFQsIFNUQVRFLCBOT05DRSwgQ09ERV9DSEFMTEVOR0UsIENPREVfQ0hBTExFTkdFX01FVEhPRCwgQ09ERSwgREVWSUNFX0NPREUsIFJFRlJFU0hfVE9LRU4sIENPREVfVkVSSUZJRVIsIENMSUVOVF9TRUNSRVQsIENMSUVOVF9BU1NFUlRJT04sIENMSUVOVF9BU1NFUlRJT05fVFlQRSwgT0JPX0FTU0VSVElPTiwgUkVRVUVTVEVEX1RPS0VOX1VTRSwgR1JBTlRfVFlQRSwgVE9LRU5fVFlQRSwgUkVRX0NORiwgWF9DTElFTlRfQ1VSUl9URUxFTSwgWF9DTElFTlRfTEFTVF9URUxFTSwgWF9NU19MSUJfQ0FQQUJJTElUWSwgTE9HT1VUX0hJTlQsIEJST0tFUl9DTElFTlRfSUQsIEJST0tFUl9SRURJUkVDVF9VUkkgfSBmcm9tICcuLi9jb25zdGFudHMvQUFEU2VydmVyUGFyYW1LZXlzLm1qcyc7XG5pbXBvcnQgeyBTY29wZVNldCB9IGZyb20gJy4vU2NvcGVTZXQubWpzJztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvci5tanMnO1xuaW1wb3J0IHsgUmVxdWVzdFZhbGlkYXRvciB9IGZyb20gJy4vUmVxdWVzdFZhbGlkYXRvci5tanMnO1xuaW1wb3J0IHsgcGtjZVBhcmFtc01pc3NpbmcsIGludmFsaWRDbGFpbXMgfSBmcm9tICcuLi9lcnJvci9DbGllbnRDb25maWd1cmF0aW9uRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gaW5zdHJ1bWVudEJyb2tlclBhcmFtcyhwYXJhbWV0ZXJzLCBjb3JyZWxhdGlvbklkLCBwZXJmb3JtYW5jZUNsaWVudCkge1xyXG4gICAgaWYgKCFjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2xpZW50SWQgPSBwYXJhbWV0ZXJzLmdldChDTElFTlRfSUQpO1xyXG4gICAgaWYgKGNsaWVudElkICYmIHBhcmFtZXRlcnMuaGFzKEJST0tFUl9DTElFTlRfSUQpKSB7XHJcbiAgICAgICAgcGVyZm9ybWFuY2VDbGllbnQ/LmFkZEZpZWxkcyh7XHJcbiAgICAgICAgICAgIGVtYmVkZGVkQ2xpZW50SWQ6IGNsaWVudElkLFxyXG4gICAgICAgICAgICBlbWJlZGRlZFJlZGlyZWN0VXJpOiBwYXJhbWV0ZXJzLmdldChSRURJUkVDVF9VUkkpLFxyXG4gICAgICAgIH0sIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgfVxyXG59XHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuY2xhc3MgUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIge1xyXG4gICAgY29uc3RydWN0b3IoY29ycmVsYXRpb25JZCwgcGVyZm9ybWFuY2VDbGllbnQpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCA9IHBlcmZvcm1hbmNlQ2xpZW50O1xyXG4gICAgICAgIHRoaXMuY29ycmVsYXRpb25JZCA9IGNvcnJlbGF0aW9uSWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCByZXNwb25zZV90eXBlID0gY29kZVxyXG4gICAgICovXHJcbiAgICBhZGRSZXNwb25zZVR5cGVDb2RlKCkge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoUkVTUE9OU0VfVFlQRSwgZW5jb2RlVVJJQ29tcG9uZW50KENvbnN0YW50cy5DT0RFX1JFU1BPTlNFX1RZUEUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHJlc3BvbnNlX3R5cGUgPSB0b2tlbiBpZF90b2tlblxyXG4gICAgICovXHJcbiAgICBhZGRSZXNwb25zZVR5cGVGb3JUb2tlbkFuZElkVG9rZW4oKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChSRVNQT05TRV9UWVBFLCBlbmNvZGVVUklDb21wb25lbnQoYCR7Q29uc3RhbnRzLlRPS0VOX1JFU1BPTlNFX1RZUEV9ICR7Q29uc3RhbnRzLklEX1RPS0VOX1JFU1BPTlNFX1RZUEV9YCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgcmVzcG9uc2VfbW9kZS4gZGVmYXVsdHMgdG8gcXVlcnkuXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VNb2RlXHJcbiAgICAgKi9cclxuICAgIGFkZFJlc3BvbnNlTW9kZShyZXNwb25zZU1vZGUpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFJFU1BPTlNFX01PREUsIGVuY29kZVVSSUNvbXBvbmVudChyZXNwb25zZU1vZGUgPyByZXNwb25zZU1vZGUgOiBSZXNwb25zZU1vZGUuUVVFUlkpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGZsYWcgdG8gaW5kaWNhdGUgU1RTIHNob3VsZCBhdHRlbXB0IHRvIHVzZSBXQU0gaWYgYXZhaWxhYmxlXHJcbiAgICAgKi9cclxuICAgIGFkZE5hdGl2ZUJyb2tlcigpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KE5BVElWRV9CUk9LRVIsIGVuY29kZVVSSUNvbXBvbmVudChcIjFcIikpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgc2NvcGVzLiBzZXQgYWRkT2lkY1Njb3BlcyB0byBmYWxzZSB0byBwcmV2ZW50IGRlZmF1bHQgc2NvcGVzIGluIG5vbi11c2VyIHNjZW5hcmlvc1xyXG4gICAgICogQHBhcmFtIHNjb3BlU2V0XHJcbiAgICAgKiBAcGFyYW0gYWRkT2lkY1Njb3Blc1xyXG4gICAgICovXHJcbiAgICBhZGRTY29wZXMoc2NvcGVzLCBhZGRPaWRjU2NvcGVzID0gdHJ1ZSwgZGVmYXVsdFNjb3BlcyA9IE9JRENfREVGQVVMVF9TQ09QRVMpIHtcclxuICAgICAgICAvLyBBbHdheXMgYWRkIG9wZW5pZCB0byB0aGUgc2NvcGVzIHdoZW4gYWRkaW5nIE9JREMgc2NvcGVzXHJcbiAgICAgICAgaWYgKGFkZE9pZGNTY29wZXMgJiZcclxuICAgICAgICAgICAgIWRlZmF1bHRTY29wZXMuaW5jbHVkZXMoXCJvcGVuaWRcIikgJiZcclxuICAgICAgICAgICAgIXNjb3Blcy5pbmNsdWRlcyhcIm9wZW5pZFwiKSkge1xyXG4gICAgICAgICAgICBkZWZhdWx0U2NvcGVzLnB1c2goXCJvcGVuaWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3RTY29wZXMgPSBhZGRPaWRjU2NvcGVzXHJcbiAgICAgICAgICAgID8gWy4uLihzY29wZXMgfHwgW10pLCAuLi5kZWZhdWx0U2NvcGVzXVxyXG4gICAgICAgICAgICA6IHNjb3BlcyB8fCBbXTtcclxuICAgICAgICBjb25zdCBzY29wZVNldCA9IG5ldyBTY29wZVNldChyZXF1ZXN0U2NvcGVzKTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFNDT1BFLCBlbmNvZGVVUklDb21wb25lbnQoc2NvcGVTZXQucHJpbnRTY29wZXMoKSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xpZW50SWRcclxuICAgICAqIEBwYXJhbSBjbGllbnRJZFxyXG4gICAgICovXHJcbiAgICBhZGRDbGllbnRJZChjbGllbnRJZCkge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQ0xJRU5UX0lELCBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50SWQpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHJlZGlyZWN0X3VyaVxyXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJpXHJcbiAgICAgKi9cclxuICAgIGFkZFJlZGlyZWN0VXJpKHJlZGlyZWN0VXJpKSB7XHJcbiAgICAgICAgUmVxdWVzdFZhbGlkYXRvci52YWxpZGF0ZVJlZGlyZWN0VXJpKHJlZGlyZWN0VXJpKTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFJFRElSRUNUX1VSSSwgZW5jb2RlVVJJQ29tcG9uZW50KHJlZGlyZWN0VXJpKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCBwb3N0IGxvZ291dCByZWRpcmVjdFVyaVxyXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJpXHJcbiAgICAgKi9cclxuICAgIGFkZFBvc3RMb2dvdXRSZWRpcmVjdFVyaShyZWRpcmVjdFVyaSkge1xyXG4gICAgICAgIFJlcXVlc3RWYWxpZGF0b3IudmFsaWRhdGVSZWRpcmVjdFVyaShyZWRpcmVjdFVyaSk7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChQT1NUX0xPR09VVF9VUkksIGVuY29kZVVSSUNvbXBvbmVudChyZWRpcmVjdFVyaSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgaWRfdG9rZW5faGludCB0byBsb2dvdXQgcmVxdWVzdFxyXG4gICAgICogQHBhcmFtIGlkVG9rZW5IaW50XHJcbiAgICAgKi9cclxuICAgIGFkZElkVG9rZW5IaW50KGlkVG9rZW5IaW50KSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChJRF9UT0tFTl9ISU5ULCBlbmNvZGVVUklDb21wb25lbnQoaWRUb2tlbkhpbnQpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIGRvbWFpbl9oaW50XHJcbiAgICAgKiBAcGFyYW0gZG9tYWluSGludFxyXG4gICAgICovXHJcbiAgICBhZGREb21haW5IaW50KGRvbWFpbkhpbnQpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KERPTUFJTl9ISU5ULCBlbmNvZGVVUklDb21wb25lbnQoZG9tYWluSGludCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgbG9naW5faGludFxyXG4gICAgICogQHBhcmFtIGxvZ2luSGludFxyXG4gICAgICovXHJcbiAgICBhZGRMb2dpbkhpbnQobG9naW5IaW50KSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChMT0dJTl9ISU5ULCBlbmNvZGVVUklDb21wb25lbnQobG9naW5IaW50KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdGhlIENDUyAoQ2FjaGUgQ3JlZGVudGlhbCBTZXJ2aWNlKSBxdWVyeSBwYXJhbWV0ZXIgZm9yIGxvZ2luX2hpbnRcclxuICAgICAqIEBwYXJhbSBsb2dpbkhpbnRcclxuICAgICAqL1xyXG4gICAgYWRkQ2NzVXBuKGxvZ2luSGludCkge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoSGVhZGVyTmFtZXMuQ0NTX0hFQURFUiwgZW5jb2RlVVJJQ29tcG9uZW50KGBVUE46JHtsb2dpbkhpbnR9YCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBDQ1MgKENhY2hlIENyZWRlbnRpYWwgU2VydmljZSkgcXVlcnkgcGFyYW1ldGVyIGZvciBhY2NvdW50IG9iamVjdFxyXG4gICAgICogQHBhcmFtIGxvZ2luSGludFxyXG4gICAgICovXHJcbiAgICBhZGRDY3NPaWQoY2xpZW50SW5mbykge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoSGVhZGVyTmFtZXMuQ0NTX0hFQURFUiwgZW5jb2RlVVJJQ29tcG9uZW50KGBPaWQ6JHtjbGllbnRJbmZvLnVpZH1AJHtjbGllbnRJbmZvLnV0aWR9YCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgc2lkXHJcbiAgICAgKiBAcGFyYW0gc2lkXHJcbiAgICAgKi9cclxuICAgIGFkZFNpZChzaWQpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFNJRCwgZW5jb2RlVVJJQ29tcG9uZW50KHNpZCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xhaW1zXHJcbiAgICAgKiBAcGFyYW0gY2xhaW1zXHJcbiAgICAgKi9cclxuICAgIGFkZENsYWltcyhjbGFpbXMsIGNsaWVudENhcGFiaWxpdGllcykge1xyXG4gICAgICAgIGNvbnN0IG1lcmdlZENsYWltcyA9IHRoaXMuYWRkQ2xpZW50Q2FwYWJpbGl0aWVzVG9DbGFpbXMoY2xhaW1zLCBjbGllbnRDYXBhYmlsaXRpZXMpO1xyXG4gICAgICAgIFJlcXVlc3RWYWxpZGF0b3IudmFsaWRhdGVDbGFpbXMobWVyZ2VkQ2xhaW1zKTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KENMQUlNUywgZW5jb2RlVVJJQ29tcG9uZW50KG1lcmdlZENsYWltcykpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY29ycmVsYXRpb25JZFxyXG4gICAgICogQHBhcmFtIGNvcnJlbGF0aW9uSWRcclxuICAgICAqL1xyXG4gICAgYWRkQ29ycmVsYXRpb25JZChjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChDTElFTlRfUkVRVUVTVF9JRCwgZW5jb2RlVVJJQ29tcG9uZW50KGNvcnJlbGF0aW9uSWQpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIGxpYnJhcnkgaW5mbyBxdWVyeSBwYXJhbXNcclxuICAgICAqIEBwYXJhbSBsaWJyYXJ5SW5mb1xyXG4gICAgICovXHJcbiAgICBhZGRMaWJyYXJ5SW5mbyhsaWJyYXJ5SW5mbykge1xyXG4gICAgICAgIC8vIFRlbGVtZXRyeSBJbmZvXHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChYX0NMSUVOVF9TS1UsIGxpYnJhcnlJbmZvLnNrdSk7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChYX0NMSUVOVF9WRVIsIGxpYnJhcnlJbmZvLnZlcnNpb24pO1xyXG4gICAgICAgIGlmIChsaWJyYXJ5SW5mby5vcykge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFhfQ0xJRU5UX09TLCBsaWJyYXJ5SW5mby5vcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsaWJyYXJ5SW5mby5jcHUpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChYX0NMSUVOVF9DUFUsIGxpYnJhcnlJbmZvLmNwdSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgY2xpZW50IHRlbGVtZXRyeSBwYXJhbWV0ZXJzXHJcbiAgICAgKiBAcGFyYW0gYXBwVGVsZW1ldHJ5XHJcbiAgICAgKi9cclxuICAgIGFkZEFwcGxpY2F0aW9uVGVsZW1ldHJ5KGFwcFRlbGVtZXRyeSkge1xyXG4gICAgICAgIGlmIChhcHBUZWxlbWV0cnk/LmFwcE5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChYX0FQUF9OQU1FLCBhcHBUZWxlbWV0cnkuYXBwTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcHBUZWxlbWV0cnk/LmFwcFZlcnNpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChYX0FQUF9WRVIsIGFwcFRlbGVtZXRyeS5hcHBWZXJzaW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCBwcm9tcHRcclxuICAgICAqIEBwYXJhbSBwcm9tcHRcclxuICAgICAqL1xyXG4gICAgYWRkUHJvbXB0KHByb21wdCkge1xyXG4gICAgICAgIFJlcXVlc3RWYWxpZGF0b3IudmFsaWRhdGVQcm9tcHQocHJvbXB0KTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KGAke1BST01QVH1gLCBlbmNvZGVVUklDb21wb25lbnQocHJvbXB0KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCBzdGF0ZVxyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGFkZFN0YXRlKHN0YXRlKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoU1RBVEUsIGVuY29kZVVSSUNvbXBvbmVudChzdGF0ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIG5vbmNlXHJcbiAgICAgKiBAcGFyYW0gbm9uY2VcclxuICAgICAqL1xyXG4gICAgYWRkTm9uY2Uobm9uY2UpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KE5PTkNFLCBlbmNvZGVVUklDb21wb25lbnQobm9uY2UpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIGNvZGVfY2hhbGxlbmdlIGFuZCBjb2RlX2NoYWxsZW5nZV9tZXRob2RcclxuICAgICAqIC0gdGhyb3cgaWYgZWl0aGVyIG9mIHRoZW0gYXJlIG5vdCBwYXNzZWRcclxuICAgICAqIEBwYXJhbSBjb2RlQ2hhbGxlbmdlXHJcbiAgICAgKiBAcGFyYW0gY29kZUNoYWxsZW5nZU1ldGhvZFxyXG4gICAgICovXHJcbiAgICBhZGRDb2RlQ2hhbGxlbmdlUGFyYW1zKGNvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2QpIHtcclxuICAgICAgICBSZXF1ZXN0VmFsaWRhdG9yLnZhbGlkYXRlQ29kZUNoYWxsZW5nZVBhcmFtcyhjb2RlQ2hhbGxlbmdlLCBjb2RlQ2hhbGxlbmdlTWV0aG9kKTtcclxuICAgICAgICBpZiAoY29kZUNoYWxsZW5nZSAmJiBjb2RlQ2hhbGxlbmdlTWV0aG9kKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQ09ERV9DSEFMTEVOR0UsIGVuY29kZVVSSUNvbXBvbmVudChjb2RlQ2hhbGxlbmdlKSk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQ09ERV9DSEFMTEVOR0VfTUVUSE9ELCBlbmNvZGVVUklDb21wb25lbnQoY29kZUNoYWxsZW5nZU1ldGhvZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKHBrY2VQYXJhbXNNaXNzaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCB0aGUgYGF1dGhvcml6YXRpb25fY29kZWAgcGFzc2VkIGJ5IHRoZSB1c2VyIHRvIGV4Y2hhbmdlIGZvciBhIHRva2VuXHJcbiAgICAgKiBAcGFyYW0gY29kZVxyXG4gICAgICovXHJcbiAgICBhZGRBdXRob3JpemF0aW9uQ29kZShjb2RlKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChDT0RFLCBlbmNvZGVVUklDb21wb25lbnQoY29kZSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgdGhlIGBhdXRob3JpemF0aW9uX2NvZGVgIHBhc3NlZCBieSB0aGUgdXNlciB0byBleGNoYW5nZSBmb3IgYSB0b2tlblxyXG4gICAgICogQHBhcmFtIGNvZGVcclxuICAgICAqL1xyXG4gICAgYWRkRGV2aWNlQ29kZShjb2RlKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChERVZJQ0VfQ09ERSwgZW5jb2RlVVJJQ29tcG9uZW50KGNvZGUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHRoZSBgcmVmcmVzaFRva2VuYCBwYXNzZWQgYnkgdGhlIHVzZXJcclxuICAgICAqIEBwYXJhbSByZWZyZXNoVG9rZW5cclxuICAgICAqL1xyXG4gICAgYWRkUmVmcmVzaFRva2VuKHJlZnJlc2hUb2tlbikge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoUkVGUkVTSF9UT0tFTiwgZW5jb2RlVVJJQ29tcG9uZW50KHJlZnJlc2hUb2tlbikpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgdGhlIGBjb2RlX3ZlcmlmaWVyYCBwYXNzZWQgYnkgdGhlIHVzZXIgdG8gZXhjaGFuZ2UgZm9yIGEgdG9rZW5cclxuICAgICAqIEBwYXJhbSBjb2RlVmVyaWZpZXJcclxuICAgICAqL1xyXG4gICAgYWRkQ29kZVZlcmlmaWVyKGNvZGVWZXJpZmllcikge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQ09ERV9WRVJJRklFUiwgZW5jb2RlVVJJQ29tcG9uZW50KGNvZGVWZXJpZmllcikpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xpZW50X3NlY3JldFxyXG4gICAgICogQHBhcmFtIGNsaWVudFNlY3JldFxyXG4gICAgICovXHJcbiAgICBhZGRDbGllbnRTZWNyZXQoY2xpZW50U2VjcmV0KSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChDTElFTlRfU0VDUkVULCBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50U2VjcmV0KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCBjbGllbnRBc3NlcnRpb24gZm9yIGNvbmZpZGVudGlhbCBjbGllbnQgZmxvd3NcclxuICAgICAqIEBwYXJhbSBjbGllbnRBc3NlcnRpb25cclxuICAgICAqL1xyXG4gICAgYWRkQ2xpZW50QXNzZXJ0aW9uKGNsaWVudEFzc2VydGlvbikge1xyXG4gICAgICAgIGlmIChjbGllbnRBc3NlcnRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChDTElFTlRfQVNTRVJUSU9OLCBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50QXNzZXJ0aW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgY2xpZW50QXNzZXJ0aW9uVHlwZSBmb3IgY29uZmlkZW50aWFsIGNsaWVudCBmbG93c1xyXG4gICAgICogQHBhcmFtIGNsaWVudEFzc2VydGlvblR5cGVcclxuICAgICAqL1xyXG4gICAgYWRkQ2xpZW50QXNzZXJ0aW9uVHlwZShjbGllbnRBc3NlcnRpb25UeXBlKSB7XHJcbiAgICAgICAgaWYgKGNsaWVudEFzc2VydGlvblR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChDTElFTlRfQVNTRVJUSU9OX1RZUEUsIGVuY29kZVVSSUNvbXBvbmVudChjbGllbnRBc3NlcnRpb25UeXBlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgT0JPIGFzc2VydGlvbiBmb3IgY29uZmlkZW50aWFsIGNsaWVudCBmbG93c1xyXG4gICAgICogQHBhcmFtIGNsaWVudEFzc2VydGlvblxyXG4gICAgICovXHJcbiAgICBhZGRPYm9Bc3NlcnRpb24ob2JvQXNzZXJ0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChPQk9fQVNTRVJUSU9OLCBlbmNvZGVVUklDb21wb25lbnQob2JvQXNzZXJ0aW9uKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCBncmFudCB0eXBlXHJcbiAgICAgKiBAcGFyYW0gZ3JhbnRUeXBlXHJcbiAgICAgKi9cclxuICAgIGFkZFJlcXVlc3RUb2tlblVzZSh0b2tlblVzZSkge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoUkVRVUVTVEVEX1RPS0VOX1VTRSwgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuVXNlKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCBncmFudCB0eXBlXHJcbiAgICAgKiBAcGFyYW0gZ3JhbnRUeXBlXHJcbiAgICAgKi9cclxuICAgIGFkZEdyYW50VHlwZShncmFudFR5cGUpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KEdSQU5UX1RZUEUsIGVuY29kZVVSSUNvbXBvbmVudChncmFudFR5cGUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIGNsaWVudCBpbmZvXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBhZGRDbGllbnRJbmZvKCkge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoQ0xJRU5UX0lORk8sIFwiMVwiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIGV4dHJhUXVlcnlQYXJhbXNcclxuICAgICAqIEBwYXJhbSBlUVBhcmFtc1xyXG4gICAgICovXHJcbiAgICBhZGRFeHRyYVF1ZXJ5UGFyYW1ldGVycyhlUVBhcmFtcykge1xyXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGVRUGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmFtZXRlcnMuaGFzKGtleSkgJiYgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFkZENsaWVudENhcGFiaWxpdGllc1RvQ2xhaW1zKGNsYWltcywgY2xpZW50Q2FwYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgbGV0IG1lcmdlZENsYWltcztcclxuICAgICAgICAvLyBQYXJzZSBwcm92aWRlZCBjbGFpbXMgaW50byBKU09OIG9iamVjdCBvciBpbml0aWFsaXplIGVtcHR5IG9iamVjdFxyXG4gICAgICAgIGlmICghY2xhaW1zKSB7XHJcbiAgICAgICAgICAgIG1lcmdlZENsYWltcyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIG1lcmdlZENsYWltcyA9IEpTT04ucGFyc2UoY2xhaW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKGludmFsaWRDbGFpbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGllbnRDYXBhYmlsaXRpZXMgJiYgY2xpZW50Q2FwYWJpbGl0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaWYgKCFtZXJnZWRDbGFpbXMuaGFzT3duUHJvcGVydHkoQ2xhaW1zUmVxdWVzdEtleXMuQUNDRVNTX1RPS0VOKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIGFjY2Vzc190b2tlbiBrZXkgdG8gY2xhaW1zIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgbWVyZ2VkQ2xhaW1zW0NsYWltc1JlcXVlc3RLZXlzLkFDQ0VTU19UT0tFTl0gPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBBZGQgeG1zX2NjIGNsYWltIHdpdGggcHJvdmlkZWQgY2xpZW50Q2FwYWJpbGl0aWVzIHRvIGFjY2Vzc190b2tlbiBrZXlcclxuICAgICAgICAgICAgbWVyZ2VkQ2xhaW1zW0NsYWltc1JlcXVlc3RLZXlzLkFDQ0VTU19UT0tFTl1bQ2xhaW1zUmVxdWVzdEtleXMuWE1TX0NDXSA9IHtcclxuICAgICAgICAgICAgICAgIHZhbHVlczogY2xpZW50Q2FwYWJpbGl0aWVzLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobWVyZ2VkQ2xhaW1zKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkcyBgdXNlcm5hbWVgIGZvciBQYXNzd29yZCBHcmFudCBmbG93XHJcbiAgICAgKiBAcGFyYW0gdXNlcm5hbWVcclxuICAgICAqL1xyXG4gICAgYWRkVXNlcm5hbWUodXNlcm5hbWUpIHtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFBhc3N3b3JkR3JhbnRDb25zdGFudHMudXNlcm5hbWUsIGVuY29kZVVSSUNvbXBvbmVudCh1c2VybmFtZSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGRzIGBwYXNzd29yZGAgZm9yIFBhc3N3b3JkIEdyYW50IGZsb3dcclxuICAgICAqIEBwYXJhbSBwYXNzd29yZFxyXG4gICAgICovXHJcbiAgICBhZGRQYXNzd29yZChwYXNzd29yZCkge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoUGFzc3dvcmRHcmFudENvbnN0YW50cy5wYXNzd29yZCwgZW5jb2RlVVJJQ29tcG9uZW50KHBhc3N3b3JkKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGFkZCBwb3BfandrIHRvIHF1ZXJ5IHBhcmFtc1xyXG4gICAgICogQHBhcmFtIGNuZlN0cmluZ1xyXG4gICAgICovXHJcbiAgICBhZGRQb3BUb2tlbihjbmZTdHJpbmcpIHtcclxuICAgICAgICBpZiAoY25mU3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoVE9LRU5fVFlQRSwgQXV0aGVudGljYXRpb25TY2hlbWUuUE9QKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChSRVFfQ05GLCBlbmNvZGVVUklDb21wb25lbnQoY25mU3RyaW5nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgU1NIIEpXSyBhbmQga2V5IElEIHRvIHF1ZXJ5IHBhcmFtc1xyXG4gICAgICovXHJcbiAgICBhZGRTc2hKd2soc3NoSndrU3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHNzaEp3a1N0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMuc2V0KFRPS0VOX1RZUEUsIEF1dGhlbnRpY2F0aW9uU2NoZW1lLlNTSCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoUkVRX0NORiwgZW5jb2RlVVJJQ29tcG9uZW50KHNzaEp3a1N0cmluZykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogYWRkIHNlcnZlciB0ZWxlbWV0cnkgZmllbGRzXHJcbiAgICAgKiBAcGFyYW0gc2VydmVyVGVsZW1ldHJ5TWFuYWdlclxyXG4gICAgICovXHJcbiAgICBhZGRTZXJ2ZXJUZWxlbWV0cnkoc2VydmVyVGVsZW1ldHJ5TWFuYWdlcikge1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5zZXQoWF9DTElFTlRfQ1VSUl9URUxFTSwgc2VydmVyVGVsZW1ldHJ5TWFuYWdlci5nZW5lcmF0ZUN1cnJlbnRSZXF1ZXN0SGVhZGVyVmFsdWUoKSk7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChYX0NMSUVOVF9MQVNUX1RFTEVNLCBzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyLmdlbmVyYXRlTGFzdFJlcXVlc3RIZWFkZXJWYWx1ZSgpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBwYXJhbWV0ZXIgdGhhdCBpbmRpY2F0ZXMgdG8gdGhlIHNlcnZlciB0aGF0IHRocm90dGxpbmcgaXMgc3VwcG9ydGVkXHJcbiAgICAgKi9cclxuICAgIGFkZFRocm90dGxpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChYX01TX0xJQl9DQVBBQklMSVRZLCBUaHJvdHRsaW5nQ29uc3RhbnRzLlhfTVNfTElCX0NBUEFCSUxJVFlfVkFMVUUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGxvZ291dF9oaW50IHBhcmFtZXRlciBmb3IgXCJzaWxlbnRcIiBsb2dvdXQgd2hpY2ggcHJldmVudCBzZXJ2ZXIgYWNjb3VudCBwaWNrZXJcclxuICAgICAqL1xyXG4gICAgYWRkTG9nb3V0SGludChsb2dvdXRIaW50KSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnNldChMT0dPVVRfSElOVCwgZW5jb2RlVVJJQ29tcG9uZW50KGxvZ291dEhpbnQpKTtcclxuICAgIH1cclxuICAgIGFkZEJyb2tlclBhcmFtZXRlcnMocGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3QgYnJva2VyUGFyYW1zID0ge307XHJcbiAgICAgICAgYnJva2VyUGFyYW1zW0JST0tFUl9DTElFTlRfSURdID1cclxuICAgICAgICAgICAgcGFyYW1zLmJyb2tlckNsaWVudElkO1xyXG4gICAgICAgIGJyb2tlclBhcmFtc1tCUk9LRVJfUkVESVJFQ1RfVVJJXSA9XHJcbiAgICAgICAgICAgIHBhcmFtcy5icm9rZXJSZWRpcmVjdFVyaTtcclxuICAgICAgICB0aGlzLmFkZEV4dHJhUXVlcnlQYXJhbWV0ZXJzKGJyb2tlclBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gY3JlYXRlIGEgVVJMIGZyb20gdGhlIHBhcmFtcyBtYXBcclxuICAgICAqL1xyXG4gICAgY3JlYXRlUXVlcnlTdHJpbmcoKSB7XHJcbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbWV0ZXJBcnJheSA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMucGFyYW1ldGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVyQXJyYXkucHVzaChgJHtrZXl9PSR7dmFsdWV9YCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaW5zdHJ1bWVudEJyb2tlclBhcmFtcyh0aGlzLnBhcmFtZXRlcnMsIHRoaXMuY29ycmVsYXRpb25JZCwgdGhpcy5wZXJmb3JtYW5jZUNsaWVudCk7XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5UGFyYW1ldGVyQXJyYXkuam9pbihcIiZcIik7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJSZXNwb25zZU1vZGUiLCJPSURDX0RFRkFVTFRfU0NPUEVTIiwiSGVhZGVyTmFtZXMiLCJDTElFTlRfSU5GTyIsIkNsYWltc1JlcXVlc3RLZXlzIiwiUGFzc3dvcmRHcmFudENvbnN0YW50cyIsIkF1dGhlbnRpY2F0aW9uU2NoZW1lIiwiVGhyb3R0bGluZ0NvbnN0YW50cyIsIlJFU1BPTlNFX1RZUEUiLCJSRVNQT05TRV9NT0RFIiwiTkFUSVZFX0JST0tFUiIsIlNDT1BFIiwiQ0xJRU5UX0lEIiwiUkVESVJFQ1RfVVJJIiwiUE9TVF9MT0dPVVRfVVJJIiwiSURfVE9LRU5fSElOVCIsIkRPTUFJTl9ISU5UIiwiTE9HSU5fSElOVCIsIlNJRCIsIkNMQUlNUyIsIkNMSUVOVF9SRVFVRVNUX0lEIiwiWF9DTElFTlRfU0tVIiwiWF9DTElFTlRfVkVSIiwiWF9DTElFTlRfT1MiLCJYX0NMSUVOVF9DUFUiLCJYX0FQUF9OQU1FIiwiWF9BUFBfVkVSIiwiUFJPTVBUIiwiU1RBVEUiLCJOT05DRSIsIkNPREVfQ0hBTExFTkdFIiwiQ09ERV9DSEFMTEVOR0VfTUVUSE9EIiwiQ09ERSIsIkRFVklDRV9DT0RFIiwiUkVGUkVTSF9UT0tFTiIsIkNPREVfVkVSSUZJRVIiLCJDTElFTlRfU0VDUkVUIiwiQ0xJRU5UX0FTU0VSVElPTiIsIkNMSUVOVF9BU1NFUlRJT05fVFlQRSIsIk9CT19BU1NFUlRJT04iLCJSRVFVRVNURURfVE9LRU5fVVNFIiwiR1JBTlRfVFlQRSIsIlRPS0VOX1RZUEUiLCJSRVFfQ05GIiwiWF9DTElFTlRfQ1VSUl9URUxFTSIsIlhfQ0xJRU5UX0xBU1RfVEVMRU0iLCJYX01TX0xJQl9DQVBBQklMSVRZIiwiTE9HT1VUX0hJTlQiLCJCUk9LRVJfQ0xJRU5UX0lEIiwiQlJPS0VSX1JFRElSRUNUX1VSSSIsIlNjb3BlU2V0IiwiY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIiwiUmVxdWVzdFZhbGlkYXRvciIsInBrY2VQYXJhbXNNaXNzaW5nIiwiaW52YWxpZENsYWltcyIsImluc3RydW1lbnRCcm9rZXJQYXJhbXMiLCJwYXJhbWV0ZXJzIiwiY29ycmVsYXRpb25JZCIsInBlcmZvcm1hbmNlQ2xpZW50IiwiY2xpZW50SWQiLCJnZXQiLCJoYXMiLCJhZGRGaWVsZHMiLCJlbWJlZGRlZENsaWVudElkIiwiZW1iZWRkZWRSZWRpcmVjdFVyaSIsIlJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyIiwiY29uc3RydWN0b3IiLCJNYXAiLCJhZGRSZXNwb25zZVR5cGVDb2RlIiwic2V0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQ09ERV9SRVNQT05TRV9UWVBFIiwiYWRkUmVzcG9uc2VUeXBlRm9yVG9rZW5BbmRJZFRva2VuIiwiVE9LRU5fUkVTUE9OU0VfVFlQRSIsIklEX1RPS0VOX1JFU1BPTlNFX1RZUEUiLCJhZGRSZXNwb25zZU1vZGUiLCJyZXNwb25zZU1vZGUiLCJRVUVSWSIsImFkZE5hdGl2ZUJyb2tlciIsImFkZFNjb3BlcyIsInNjb3BlcyIsImFkZE9pZGNTY29wZXMiLCJkZWZhdWx0U2NvcGVzIiwiaW5jbHVkZXMiLCJwdXNoIiwicmVxdWVzdFNjb3BlcyIsInNjb3BlU2V0IiwicHJpbnRTY29wZXMiLCJhZGRDbGllbnRJZCIsImFkZFJlZGlyZWN0VXJpIiwicmVkaXJlY3RVcmkiLCJ2YWxpZGF0ZVJlZGlyZWN0VXJpIiwiYWRkUG9zdExvZ291dFJlZGlyZWN0VXJpIiwiYWRkSWRUb2tlbkhpbnQiLCJpZFRva2VuSGludCIsImFkZERvbWFpbkhpbnQiLCJkb21haW5IaW50IiwiYWRkTG9naW5IaW50IiwibG9naW5IaW50IiwiYWRkQ2NzVXBuIiwiQ0NTX0hFQURFUiIsImFkZENjc09pZCIsImNsaWVudEluZm8iLCJ1aWQiLCJ1dGlkIiwiYWRkU2lkIiwic2lkIiwiYWRkQ2xhaW1zIiwiY2xhaW1zIiwiY2xpZW50Q2FwYWJpbGl0aWVzIiwibWVyZ2VkQ2xhaW1zIiwiYWRkQ2xpZW50Q2FwYWJpbGl0aWVzVG9DbGFpbXMiLCJ2YWxpZGF0ZUNsYWltcyIsImFkZENvcnJlbGF0aW9uSWQiLCJhZGRMaWJyYXJ5SW5mbyIsImxpYnJhcnlJbmZvIiwic2t1IiwidmVyc2lvbiIsIm9zIiwiY3B1IiwiYWRkQXBwbGljYXRpb25UZWxlbWV0cnkiLCJhcHBUZWxlbWV0cnkiLCJhcHBOYW1lIiwiYXBwVmVyc2lvbiIsImFkZFByb21wdCIsInByb21wdCIsInZhbGlkYXRlUHJvbXB0IiwiYWRkU3RhdGUiLCJzdGF0ZSIsImFkZE5vbmNlIiwibm9uY2UiLCJhZGRDb2RlQ2hhbGxlbmdlUGFyYW1zIiwiY29kZUNoYWxsZW5nZSIsImNvZGVDaGFsbGVuZ2VNZXRob2QiLCJ2YWxpZGF0ZUNvZGVDaGFsbGVuZ2VQYXJhbXMiLCJhZGRBdXRob3JpemF0aW9uQ29kZSIsImNvZGUiLCJhZGREZXZpY2VDb2RlIiwiYWRkUmVmcmVzaFRva2VuIiwicmVmcmVzaFRva2VuIiwiYWRkQ29kZVZlcmlmaWVyIiwiY29kZVZlcmlmaWVyIiwiYWRkQ2xpZW50U2VjcmV0IiwiY2xpZW50U2VjcmV0IiwiYWRkQ2xpZW50QXNzZXJ0aW9uIiwiY2xpZW50QXNzZXJ0aW9uIiwiYWRkQ2xpZW50QXNzZXJ0aW9uVHlwZSIsImNsaWVudEFzc2VydGlvblR5cGUiLCJhZGRPYm9Bc3NlcnRpb24iLCJvYm9Bc3NlcnRpb24iLCJhZGRSZXF1ZXN0VG9rZW5Vc2UiLCJ0b2tlblVzZSIsImFkZEdyYW50VHlwZSIsImdyYW50VHlwZSIsImFkZENsaWVudEluZm8iLCJhZGRFeHRyYVF1ZXJ5UGFyYW1ldGVycyIsImVRUGFyYW1zIiwiT2JqZWN0IiwiZW50cmllcyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsIkpTT04iLCJwYXJzZSIsImUiLCJsZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsIkFDQ0VTU19UT0tFTiIsIlhNU19DQyIsInZhbHVlcyIsInN0cmluZ2lmeSIsImFkZFVzZXJuYW1lIiwidXNlcm5hbWUiLCJhZGRQYXNzd29yZCIsInBhc3N3b3JkIiwiYWRkUG9wVG9rZW4iLCJjbmZTdHJpbmciLCJQT1AiLCJhZGRTc2hKd2siLCJzc2hKd2tTdHJpbmciLCJTU0giLCJhZGRTZXJ2ZXJUZWxlbWV0cnkiLCJzZXJ2ZXJUZWxlbWV0cnlNYW5hZ2VyIiwiZ2VuZXJhdGVDdXJyZW50UmVxdWVzdEhlYWRlclZhbHVlIiwiZ2VuZXJhdGVMYXN0UmVxdWVzdEhlYWRlclZhbHVlIiwiYWRkVGhyb3R0bGluZyIsIlhfTVNfTElCX0NBUEFCSUxJVFlfVkFMVUUiLCJhZGRMb2dvdXRIaW50IiwibG9nb3V0SGludCIsImFkZEJyb2tlclBhcmFtZXRlcnMiLCJwYXJhbXMiLCJicm9rZXJQYXJhbXMiLCJicm9rZXJDbGllbnRJZCIsImJyb2tlclJlZGlyZWN0VXJpIiwiY3JlYXRlUXVlcnlTdHJpbmciLCJxdWVyeVBhcmFtZXRlckFycmF5IiwiQXJyYXkiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestValidator: () => (/* binding */ RequestValidator)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Validates server consumable params from the \"request\" objects\r\n */ class RequestValidator {\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */ static validateRedirectUri(redirectUri) {\n        if (!redirectUri) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.redirectUriEmpty);\n        }\n    }\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */ static validatePrompt(prompt) {\n        const promptValues = [];\n        for(const value in _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.PromptValue){\n            promptValues.push(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.PromptValue[value]);\n        }\n        if (promptValues.indexOf(prompt) < 0) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidPromptValue);\n        }\n    }\n    static validateClaims(claims) {\n        try {\n            JSON.parse(claims);\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidClaims);\n        }\n    }\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */ static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        if (!codeChallenge || !codeChallengeMethod) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.pkceParamsMissing);\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */ static validateCodeChallengeMethod(codeChallengeMethod) {\n        if ([\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.PLAIN,\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.S256\n        ].indexOf(codeChallengeMethod) < 0) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidCodeChallengeMethod);\n        }\n    }\n}\n //# sourceMappingURL=RequestValidator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcmVxdWVzdC9SZXF1ZXN0VmFsaWRhdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3VGO0FBQ1A7QUFDZ0Y7QUFFaEs7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNUTtJQUNGOzs7S0FHQyxHQUNELE9BQU9DLG9CQUFvQkMsV0FBVyxFQUFFO1FBQ3BDLElBQUksQ0FBQ0EsYUFBYTtZQUNkLE1BQU1WLG1HQUE4QkEsQ0FBQ0csc0ZBQWdCQTtRQUN6RDtJQUNKO0lBQ0E7OztLQUdDLEdBQ0QsT0FBT1EsZUFBZUMsTUFBTSxFQUFFO1FBQzFCLE1BQU1DLGVBQWUsRUFBRTtRQUN2QixJQUFLLE1BQU1DLFNBQVNaLDZEQUFXQSxDQUFFO1lBQzdCVyxhQUFhRSxJQUFJLENBQUNiLDZEQUFXLENBQUNZLE1BQU07UUFDeEM7UUFDQSxJQUFJRCxhQUFhRyxPQUFPLENBQUNKLFVBQVUsR0FBRztZQUNsQyxNQUFNWixtR0FBOEJBLENBQUNJLHdGQUFrQkE7UUFDM0Q7SUFDSjtJQUNBLE9BQU9hLGVBQWVDLE1BQU0sRUFBRTtRQUMxQixJQUFJO1lBQ0FDLEtBQUtDLEtBQUssQ0FBQ0Y7UUFDZixFQUNBLE9BQU9HLEdBQUc7WUFDTixNQUFNckIsbUdBQThCQSxDQUFDSyxtRkFBYUE7UUFDdEQ7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPaUIsNEJBQTRCQyxhQUFhLEVBQUVDLG1CQUFtQixFQUFFO1FBQ25FLElBQUksQ0FBQ0QsaUJBQWlCLENBQUNDLHFCQUFxQjtZQUN4QyxNQUFNeEIsbUdBQThCQSxDQUFDTSx1RkFBaUJBO1FBQzFELE9BQ0s7WUFDRCxJQUFJLENBQUNtQiwyQkFBMkIsQ0FBQ0Q7UUFDckM7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE9BQU9DLDRCQUE0QkQsbUJBQW1CLEVBQUU7UUFDcEQsSUFBSTtZQUNBdkIsMkVBQXlCQSxDQUFDeUIsS0FBSztZQUMvQnpCLDJFQUF5QkEsQ0FBQzBCLElBQUk7U0FDakMsQ0FBQ1gsT0FBTyxDQUFDUSx1QkFBdUIsR0FBRztZQUNoQyxNQUFNeEIsbUdBQThCQSxDQUFDTyxnR0FBMEJBO1FBQ25FO0lBQ0o7QUFDSjtBQUU0QixDQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcmVxdWVzdC9SZXF1ZXN0VmFsaWRhdG9yLm1qcz8zNTkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yLm1qcyc7XG5pbXBvcnQgeyBDb2RlQ2hhbGxlbmdlTWV0aG9kVmFsdWVzLCBQcm9tcHRWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgcmVkaXJlY3RVcmlFbXB0eSwgaW52YWxpZFByb21wdFZhbHVlLCBpbnZhbGlkQ2xhaW1zLCBwa2NlUGFyYW1zTWlzc2luZywgaW52YWxpZENvZGVDaGFsbGVuZ2VNZXRob2QgfSBmcm9tICcuLi9lcnJvci9DbGllbnRDb25maWd1cmF0aW9uRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyBzZXJ2ZXIgY29uc3VtYWJsZSBwYXJhbXMgZnJvbSB0aGUgXCJyZXF1ZXN0XCIgb2JqZWN0c1xyXG4gKi9cclxuY2xhc3MgUmVxdWVzdFZhbGlkYXRvciB7XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gY2hlY2sgaWYgdGhlIGByZWRpcmVjdFVyaWAgaW4gdGhlIHJlcXVlc3QgaXMgYSBub24tbnVsbCB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHJlZGlyZWN0VXJpXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZVJlZGlyZWN0VXJpKHJlZGlyZWN0VXJpKSB7XHJcbiAgICAgICAgaWYgKCFyZWRpcmVjdFVyaSkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IocmVkaXJlY3RVcmlFbXB0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IHRvIHZhbGlkYXRlIHByb21wdCBzZW50IGJ5IHRoZSB1c2VyIGluIHRoZSByZXF1ZXN0XHJcbiAgICAgKiBAcGFyYW0gcHJvbXB0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZVByb21wdChwcm9tcHQpIHtcclxuICAgICAgICBjb25zdCBwcm9tcHRWYWx1ZXMgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIGluIFByb21wdFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHByb21wdFZhbHVlcy5wdXNoKFByb21wdFZhbHVlW3ZhbHVlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9tcHRWYWx1ZXMuaW5kZXhPZihwcm9tcHQpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoaW52YWxpZFByb21wdFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdmFsaWRhdGVDbGFpbXMoY2xhaW1zKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgSlNPTi5wYXJzZShjbGFpbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IoaW52YWxpZENsYWltcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IHRvIHZhbGlkYXRlIGNvZGVfY2hhbGxlbmdlIGFuZCBjb2RlX2NoYWxsZW5nZV9tZXRob2RcclxuICAgICAqIEBwYXJhbSBjb2RlQ2hhbGxlbmdlXHJcbiAgICAgKiBAcGFyYW0gY29kZUNoYWxsZW5nZU1ldGhvZFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdmFsaWRhdGVDb2RlQ2hhbGxlbmdlUGFyYW1zKGNvZGVDaGFsbGVuZ2UsIGNvZGVDaGFsbGVuZ2VNZXRob2QpIHtcclxuICAgICAgICBpZiAoIWNvZGVDaGFsbGVuZ2UgfHwgIWNvZGVDaGFsbGVuZ2VNZXRob2QpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKHBrY2VQYXJhbXNNaXNzaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVDb2RlQ2hhbGxlbmdlTWV0aG9kKGNvZGVDaGFsbGVuZ2VNZXRob2QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXRpbGl0eSB0byB2YWxpZGF0ZSBjb2RlX2NoYWxsZW5nZV9tZXRob2RcclxuICAgICAqIEBwYXJhbSBjb2RlQ2hhbGxlbmdlTWV0aG9kXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZUNvZGVDaGFsbGVuZ2VNZXRob2QoY29kZUNoYWxsZW5nZU1ldGhvZCkge1xyXG4gICAgICAgIGlmIChbXHJcbiAgICAgICAgICAgIENvZGVDaGFsbGVuZ2VNZXRob2RWYWx1ZXMuUExBSU4sXHJcbiAgICAgICAgICAgIENvZGVDaGFsbGVuZ2VNZXRob2RWYWx1ZXMuUzI1NixcclxuICAgICAgICBdLmluZGV4T2YoY29kZUNoYWxsZW5nZU1ldGhvZCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihpbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFJlcXVlc3RWYWxpZGF0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlcXVlc3RWYWxpZGF0b3IubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvciIsIkNvZGVDaGFsbGVuZ2VNZXRob2RWYWx1ZXMiLCJQcm9tcHRWYWx1ZSIsInJlZGlyZWN0VXJpRW1wdHkiLCJpbnZhbGlkUHJvbXB0VmFsdWUiLCJpbnZhbGlkQ2xhaW1zIiwicGtjZVBhcmFtc01pc3NpbmciLCJpbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZCIsIlJlcXVlc3RWYWxpZGF0b3IiLCJ2YWxpZGF0ZVJlZGlyZWN0VXJpIiwicmVkaXJlY3RVcmkiLCJ2YWxpZGF0ZVByb21wdCIsInByb21wdCIsInByb21wdFZhbHVlcyIsInZhbHVlIiwicHVzaCIsImluZGV4T2YiLCJ2YWxpZGF0ZUNsYWltcyIsImNsYWltcyIsIkpTT04iLCJwYXJzZSIsImUiLCJ2YWxpZGF0ZUNvZGVDaGFsbGVuZ2VQYXJhbXMiLCJjb2RlQ2hhbGxlbmdlIiwiY29kZUNoYWxsZW5nZU1ldGhvZCIsInZhbGlkYXRlQ29kZUNoYWxsZW5nZU1ldGhvZCIsIlBMQUlOIiwiUzI1NiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScopeSet: () => (/* binding */ ScopeSet)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */ class ScopeSet {\n    constructor(inputScopes){\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.StringUtils.trimArrayEntries([\n            ...inputScopes\n        ]) : [];\n        const filteredInput = scopeArr ? _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope)=>this.scopes.add(scope));\n    }\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */ static fromString(inputScopeString) {\n        const scopeString = inputScopeString || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        const inputScopes = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString\r\n     * @returns\r\n     */ static createSearchScopes(inputScopeString) {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        } else {\n            scopeSet.removeScope(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return scopeSet;\n    }\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */ validateInputScopes(inputScopes) {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.emptyInputScopesError);\n        }\n    }\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */ containsScope(scope) {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */ containsScopeSet(scopeSet) {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n        return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every((scope)=>this.containsScope(scope));\n    }\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */ containsOnlyOIDCScopes() {\n        let defaultScopeCount = 0;\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_SCOPES.forEach((defaultScope)=>{\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n        return this.scopes.size === defaultScopeCount;\n    }\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */ appendScope(newScope) {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */ appendScopes(newScopes) {\n        try {\n            newScopes.forEach((newScope)=>this.appendScope(newScope));\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.cannotAppendScopeSet);\n        }\n    }\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */ removeScope(scope) {\n        if (!scope) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.cannotRemoveEmptyScope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */ removeOIDCScopes() {\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_SCOPES.forEach((defaultScope)=>{\n            this.scopes.delete(defaultScope);\n        });\n    }\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */ unionScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.emptyInputScopeSet);\n        }\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */ intersectingScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.emptyInputScopeSet);\n        }\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n    /**\r\n     * Returns size of set of scopes.\r\n     */ getScopeCount() {\n        return this.scopes.size;\n    }\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */ asArray() {\n        const array = [];\n        this.scopes.forEach((val)=>array.push(val));\n        return array;\n    }\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */ printScopes() {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n    }\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */ printScopesLowerCase() {\n        return this.printScopes().toLowerCase();\n    }\n}\n //# sourceMappingURL=ScopeSet.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseHandler: () => (/* binding */ ResponseHandler),\n/* harmony export */   buildAccountToCache: () => (/* binding */ buildAccountToCache)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../request/ScopeSet.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/entities/AccountEntity.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _utils_ProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/ProtocolUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _cache_persistence_TokenCacheContext_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/persistence/TokenCacheContext.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../account/TokenClaims.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../account/AccountInfo.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function parseServerErrorNo(serverResponse) {\n    const errorCodePrefix = \"code=\";\n    const errorCodePrefixIndex = serverResponse.error_uri?.lastIndexOf(errorCodePrefix);\n    return errorCodePrefixIndex && errorCodePrefixIndex >= 0 ? serverResponse.error_uri?.substring(errorCodePrefixIndex + errorCodePrefix.length) : undefined;\n}\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */ class ResponseHandler {\n    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient){\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Function which validates server authorization code response.\r\n     * @param serverResponseHash\r\n     * @param requestState\r\n     * @param cryptoObj\r\n     */ validateServerAuthorizationCodeResponse(serverResponse, requestState) {\n        if (!serverResponse.state || !requestState) {\n            throw serverResponse.state ? (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateNotFound, \"Cached State\") : (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateNotFound, \"Server State\");\n        }\n        let decodedServerResponseState;\n        let decodedRequestState;\n        try {\n            decodedServerResponseState = decodeURIComponent(serverResponse.state);\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidState, serverResponse.state);\n        }\n        try {\n            decodedRequestState = decodeURIComponent(requestState);\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidState, serverResponse.state);\n        }\n        if (decodedServerResponseState !== decodedRequestState) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateMismatch);\n        }\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            const serverErrorNo = parseServerErrorNo(serverResponse);\n            if ((0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionRequiredAuthError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || \"\", serverResponse.trace_id || \"\", serverResponse.correlation_id || \"\", serverResponse.claims || \"\", serverErrorNo);\n            }\n            throw new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverErrorNo);\n        }\n    }\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     * @param refreshAccessToken\r\n     */ validateTokenResponse(serverResponse, refreshAccessToken) {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            const errString = `Error(s): ${serverResponse.error_codes || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Description: ${serverResponse.error_description || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE}`;\n            const serverErrorNo = serverResponse.error_codes?.length ? serverResponse.error_codes[0] : undefined;\n            const serverError = new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\n            // check if 500 error\n            if (refreshAccessToken && serverResponse.status && serverResponse.status >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_START && serverResponse.status <= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            // check if 400 error\n            } else if (refreshAccessToken && serverResponse.status && serverResponse.status >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_START && serverResponse.status <= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            }\n            if ((0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.trace_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.correlation_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.claims || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverErrorNo);\n            }\n            throw serverError;\n        }\n    }\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */ async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\n        // create an idToken object (not entity)\n        let idTokenClaims;\n        if (serverTokenResponse.id_token) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__.extractTokenClaims)(serverTokenResponse.id_token || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && authCodePayload.nonce) {\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nonceMismatch);\n                }\n            }\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n                const authTime = idTokenClaims.auth_time;\n                if (!authTime) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.authTimeNotFound);\n                }\n                (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__.checkMaxAge)(authTime, request.maxAge);\n            }\n        }\n        // generate homeAccountId\n        this.homeAccountIdentifier = _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__.AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n        // save the response tokens\n        let requestStateObj;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = _utils_ProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new _cache_persistence_TokenCacheContext_mjs__WEBPACK_IMPORTED_MODULE_9__.TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n             */ if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key, this.logger);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(cacheRecord, request.storeInCache, request.correlationId);\n        } finally{\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\n    }\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */ generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\n        const env = authority.getPreferredCache();\n        if (!env) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidCacheEnvironment);\n        }\n        const claimsTenantId = (0,_account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_10__.getTenantIdFromIdTokenClaims)(idTokenClaims);\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken;\n        let cachedAccount;\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\n            cachedIdToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createIdTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\n            cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined, this.logger);\n        }\n        // AccessToken\n        let cachedAccessToken = null;\n        if (serverTokenResponse.access_token) {\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(serverTokenResponse.scope) : new _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet(request.scopes || []);\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */ const expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createAccessTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n        }\n        // refreshToken\n        let cachedRefreshToken = null;\n        if (serverTokenResponse.refresh_token) {\n            let rtExpiresOn;\n            if (serverTokenResponse.refresh_token_expires_in) {\n                const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in === \"string\" ? parseInt(serverTokenResponse.refresh_token_expires_in, 10) : serverTokenResponse.refresh_token_expires_in;\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\n            }\n            cachedRefreshToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createRefreshTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\n        }\n        // appMetadata\n        let cachedAppMetadata = null;\n        if (serverTokenResponse.foci) {\n            cachedAppMetadata = {\n                clientId: this.clientId,\n                environment: env,\n                familyId: serverTokenResponse.foci\n            };\n        }\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata\n        };\n    }\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */ static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\n        let accessToken = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;\n        let responseScopes = [];\n        let expiresOn = null;\n        let extExpiresOn;\n        let refreshOn;\n        let familyId = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;\n        if (cacheRecord.accessToken) {\n            /*\r\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n             * the token will be returned unsigned\r\n             */ if (cacheRecord.accessToken.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.POP && !request.popKid) {\n                const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_13__.PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n                if (!keyId) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.keyIdMissing);\n                }\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            if (cacheRecord.accessToken.refreshOn) {\n                refreshOn = new Date(Number(cacheRecord.accessToken.refreshOn) * 1000);\n            }\n        }\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.THE_FAMILY_ID ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.THE_FAMILY_ID : \"\";\n        }\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n        const tid = idTokenClaims?.tid || \"\";\n        // for hybrid + native bridge enablement, send back the native account Id\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n            cacheRecord.account.nativeAccountId = serverTokenResponse?.spa_accountid;\n        }\n        const accountInfo = cacheRecord.account ? (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__.updateAccountTenantProfileData)(cacheRecord.account.getAccountInfo(), undefined, idTokenClaims, cacheRecord.idToken?.secret) : null;\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountInfo,\n            idToken: cacheRecord?.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            refreshOn: refreshOn,\n            correlationId: request.correlationId,\n            requestId: requestId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            code: serverTokenResponse?.spa_code,\n            fromNativeBroker: false\n        };\n    }\n}\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\n    logger?.verbose(\"setCachedAccount called\");\n    // Check if base account is already cached\n    const accountKeys = cacheStorage.getAccountKeys();\n    const baseAccountKey = accountKeys.find((accountKey)=>{\n        return accountKey.startsWith(homeAccountId);\n    });\n    let cachedAccount = null;\n    if (baseAccountKey) {\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, logger);\n    }\n    const baseAccount = cachedAccount || _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__.AccountEntity.createAccount({\n        homeAccountId,\n        idTokenClaims,\n        clientInfo,\n        environment,\n        cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n        msGraphHost: authCodePayload?.msgraph_host,\n        nativeAccountId: nativeAccountId\n    }, authority, base64Decode);\n    const tenantProfiles = baseAccount.tenantProfiles || [];\n    const tenantId = claimsTenantId || baseAccount.realm;\n    if (tenantId && !tenantProfiles.find((tenantProfile)=>{\n        return tenantProfile.tenantId === tenantId;\n    })) {\n        const newTenantProfile = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__.buildTenantProfile)(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\n        tenantProfiles.push(newTenantProfile);\n    }\n    baseAccount.tenantProfiles = tenantProfiles;\n    return baseAccount;\n}\n //# sourceMappingURL=ResponseHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntFields: () => (/* binding */ IntFields),\n/* harmony export */   PerformanceEventAbbreviations: () => (/* binding */ PerformanceEventAbbreviations),\n/* harmony export */   PerformanceEventStatus: () => (/* binding */ PerformanceEventStatus),\n/* harmony export */   PerformanceEvents: () => (/* binding */ PerformanceEvents)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */ const PerformanceEvents = {\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */ AcquireTokenByCode: \"acquireTokenByCode\",\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */ AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */ AcquireTokenSilent: \"acquireTokenSilent\",\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */ AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */ AcquireTokenPopup: \"acquireTokenPopup\",\n    /**\r\n     * acquireTokenPreRedirect (msal-browser).\r\n     * First part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */ AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n    /**\r\n     * acquireTokenRedirect (msal-browser).\r\n     * Second part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */ AcquireTokenRedirect: \"acquireTokenRedirect\",\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */ CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */ CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */ SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */ SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\",\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */ SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */ SsoSilent: \"ssoSilent\",\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */ StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */ FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */ NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */ BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\r\n     * Time spent sending/waiting for the response of a request to the token endpoint\r\n     */ NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\n    RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n    AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */ BrokerHandhshake: \"brokerHandshake\",\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */ AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */ AcquireTokenByBroker: \"acquireTokenByBroker\",\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */ RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */ RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */ RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */ RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */ RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */ AcquireTokenFromCache: \"acquireTokenFromCache\",\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n    SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */ AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */ InitializeBaseRequest: \"initializeBaseRequest\",\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */ InitializeSilentRequest: \"initializeSilentRequest\",\n    InitializeClientApplication: \"initializeClientApplication\",\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */ SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n    /**\r\n     * SilentHandler\r\n     */ SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */ StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n    StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */ GetAuthCodeUrl: \"getAuthCodeUrl\",\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */ HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponse: \"handleCodeResponse\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */ AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */ PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */ HandleServerTokenResponse: \"handleServerTokenResponse\",\n    DeserializeResponse: \"deserializeResponse\",\n    /**\r\n     * Authority functions\r\n     */ AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n    /**\r\n     * Region Discovery functions\r\n     */ RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n    RemoveHiddenIframe: \"removeHiddenIframe\",\n    /**\r\n     * Cache operations\r\n     */ ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n    /**\r\n     * Crypto Operations\r\n     */ GeneratePkceCodes: \"generatePkceCodes\",\n    GenerateCodeVerifier: \"generateCodeVerifier\",\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n    Sha256Digest: \"sha256Digest\",\n    GetRandomValues: \"getRandomValues\"\n};\nconst PerformanceEventAbbreviations = new Map([\n    [\n        PerformanceEvents.AcquireTokenByCode,\n        \"ATByCode\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByRefreshToken,\n        \"ATByRT\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenSilent,\n        \"ATS\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenSilentAsync,\n        \"ATSAsync\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenPopup,\n        \"ATPopup\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenRedirect,\n        \"ATRedirect\"\n    ],\n    [\n        PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\n        \"CryptoGetPKThumb\"\n    ],\n    [\n        PerformanceEvents.CryptoOptsSignJwt,\n        \"CryptoSignJwt\"\n    ],\n    [\n        PerformanceEvents.SilentCacheClientAcquireToken,\n        \"SltCacheClientAT\"\n    ],\n    [\n        PerformanceEvents.SilentIframeClientAcquireToken,\n        \"SltIframeClientAT\"\n    ],\n    [\n        PerformanceEvents.SilentRefreshClientAcquireToken,\n        \"SltRClientAT\"\n    ],\n    [\n        PerformanceEvents.SsoSilent,\n        \"SsoSlt\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n        \"StdIntClientGetDiscAuth\"\n    ],\n    [\n        PerformanceEvents.FetchAccountIdWithNativeBroker,\n        \"FetchAccIdWithNtvBroker\"\n    ],\n    [\n        PerformanceEvents.NativeInteractionClientAcquireToken,\n        \"NtvIntClientAT\"\n    ],\n    [\n        PerformanceEvents.BaseClientCreateTokenRequestHeaders,\n        \"BaseClientCreateTReqHead\"\n    ],\n    [\n        PerformanceEvents.NetworkClientSendPostRequestAsync,\n        \"NetClientSendPost\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\n        \"RTClientExecPost\"\n    ],\n    [\n        PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\n        \"AuthCodeClientExecPost\"\n    ],\n    [\n        PerformanceEvents.BrokerHandhshake,\n        \"BrokerHandshake\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\n        \"ATByRTInBroker\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByBroker,\n        \"ATByBroker\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n        \"RTClientExecTReq\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireToken,\n        \"RTClientAT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n        \"RTClientATWithCachedRT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n        \"RTClientATByRT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n        \"RTClientCreateTReqBody\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenFromCache,\n        \"ATFromCache\"\n    ],\n    [\n        PerformanceEvents.SilentFlowClientAcquireCachedToken,\n        \"SltFlowClientATCached\"\n    ],\n    [\n        PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n        \"SltFlowClientGenResFromCache\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenBySilentIframe,\n        \"ATBySltIframe\"\n    ],\n    [\n        PerformanceEvents.InitializeBaseRequest,\n        \"InitBaseReq\"\n    ],\n    [\n        PerformanceEvents.InitializeSilentRequest,\n        \"InitSltReq\"\n    ],\n    [\n        PerformanceEvents.InitializeClientApplication,\n        \"InitClientApplication\"\n    ],\n    [\n        PerformanceEvents.SilentIframeClientTokenHelper,\n        \"SIClientTHelper\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\n        \"SHandlerInitAuthReq\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\n        \"SltHandlerMonitorIframeForHash\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerLoadFrame,\n        \"SHandlerLoadFrame\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerLoadFrameSync,\n        \"SHandlerLoadFrameSync\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n        \"StdIntClientCreateAuthCodeClient\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n        \"StdIntClientGetClientConf\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n        \"StdIntClientInitAuthReq\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n        \"StdIntClientInitAuthCodeReq\"\n    ],\n    [\n        PerformanceEvents.GetAuthCodeUrl,\n        \"GetAuthCodeUrl\"\n    ],\n    [\n        PerformanceEvents.HandleCodeResponseFromServer,\n        \"HandleCodeResFromServer\"\n    ],\n    [\n        PerformanceEvents.HandleCodeResponse,\n        \"HandleCodeResp\"\n    ],\n    [\n        PerformanceEvents.UpdateTokenEndpointAuthority,\n        \"UpdTEndpointAuth\"\n    ],\n    [\n        PerformanceEvents.AuthClientAcquireToken,\n        \"AuthClientAT\"\n    ],\n    [\n        PerformanceEvents.AuthClientExecuteTokenRequest,\n        \"AuthClientExecTReq\"\n    ],\n    [\n        PerformanceEvents.AuthClientCreateTokenRequestBody,\n        \"AuthClientCreateTReqBody\"\n    ],\n    [\n        PerformanceEvents.AuthClientCreateQueryString,\n        \"AuthClientCreateQueryStr\"\n    ],\n    [\n        PerformanceEvents.PopTokenGenerateCnf,\n        \"PopTGenCnf\"\n    ],\n    [\n        PerformanceEvents.PopTokenGenerateKid,\n        \"PopTGenKid\"\n    ],\n    [\n        PerformanceEvents.HandleServerTokenResponse,\n        \"HandleServerTRes\"\n    ],\n    [\n        PerformanceEvents.DeserializeResponse,\n        \"DeserializeRes\"\n    ],\n    [\n        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n        \"AuthFactCreateDiscInst\"\n    ],\n    [\n        PerformanceEvents.AuthorityResolveEndpointsAsync,\n        \"AuthResolveEndpointsAsync\"\n    ],\n    [\n        PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\n        \"AuthResolveEndpointsFromLocal\"\n    ],\n    [\n        PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\n        \"AuthGetCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\n        \"AuthUpdCDMeta\"\n    ],\n    [\n        PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\n        \"AuthUpdCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateEndpointMetadata,\n        \"AuthUpdEndpointMeta\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n        \"AuthUpdMetaWithRegInfo\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryDetectRegion,\n        \"RegDiscDetectReg\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n        \"RegDiscGetRegFromIMDS\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryGetCurrentVersion,\n        \"RegDiscGetCurrentVer\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByCodeAsync,\n        \"ATByCodeAsync\"\n    ],\n    [\n        PerformanceEvents.GetEndpointMetadataFromNetwork,\n        \"GetEndpointMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\n        \"GetCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.HandleRedirectPromiseMeasurement,\n        \"HandleRedirectPromise\"\n    ],\n    [\n        PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\n        \"HandleNtvRedirectPromise\"\n    ],\n    [\n        PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\n        \"UpdateCDMeta\"\n    ],\n    [\n        PerformanceEvents.UsernamePasswordClientAcquireToken,\n        \"UserPassClientAT\"\n    ],\n    [\n        PerformanceEvents.NativeMessageHandlerHandshake,\n        \"NtvMsgHandlerHandshake\"\n    ],\n    [\n        PerformanceEvents.NativeGenerateAuthResult,\n        \"NtvGenAuthRes\"\n    ],\n    [\n        PerformanceEvents.RemoveHiddenIframe,\n        \"RemoveHiddenIframe\"\n    ],\n    [\n        PerformanceEvents.ClearTokensAndKeysWithClaims,\n        \"ClearTAndKeysWithClaims\"\n    ],\n    [\n        PerformanceEvents.CacheManagerGetRefreshToken,\n        \"CacheManagerGetRT\"\n    ],\n    [\n        PerformanceEvents.GeneratePkceCodes,\n        \"GenPkceCodes\"\n    ],\n    [\n        PerformanceEvents.GenerateCodeVerifier,\n        \"GenCodeVerifier\"\n    ],\n    [\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        \"GenCodeChallengeFromVerifier\"\n    ],\n    [\n        PerformanceEvents.Sha256Digest,\n        \"Sha256Digest\"\n    ],\n    [\n        PerformanceEvents.GetRandomValues,\n        \"GetRandomValues\"\n    ]\n]);\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */ const PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2\n};\nconst IntFields = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n    \"multiMatchedAT\",\n    \"multiMatchedID\",\n    \"multiMatchedRT\"\n]);\n //# sourceMappingURL=PerformanceEvent.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StubPerformanceClient: () => (/* binding */ StubPerformanceClient),\n/* harmony export */   StubPerformanceMeasurement: () => (/* binding */ StubPerformanceMeasurement)\n/* harmony export */ });\n/* harmony import */ var _PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PerformanceEvent.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class StubPerformanceMeasurement {\n    startMeasurement() {\n        return;\n    }\n    endMeasurement() {\n        return;\n    }\n    flushMeasurement() {\n        return null;\n    }\n}\nclass StubPerformanceClient {\n    generateId() {\n        return \"callback-id\";\n    }\n    startMeasurement(measureName, correlationId) {\n        return {\n            end: ()=>null,\n            discard: ()=>{},\n            add: ()=>{},\n            increment: ()=>{},\n            event: {\n                eventId: this.generateId(),\n                status: _PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEventStatus.InProgress,\n                authority: \"\",\n                libraryName: \"\",\n                libraryVersion: \"\",\n                clientId: \"\",\n                name: measureName,\n                startTimeMs: Date.now(),\n                correlationId: correlationId || \"\"\n            },\n            measurement: new StubPerformanceMeasurement()\n        };\n    }\n    startPerformanceMeasurement() {\n        return new StubPerformanceMeasurement();\n    }\n    calculateQueuedTime() {\n        return 0;\n    }\n    addQueueMeasurement() {\n        return;\n    }\n    setPreQueueTime() {\n        return;\n    }\n    endMeasurement() {\n        return null;\n    }\n    discardMeasurements() {\n        return;\n    }\n    removePerformanceCallback() {\n        return true;\n    }\n    addPerformanceCallback() {\n        return \"\";\n    }\n    emitEvents() {\n        return;\n    }\n    addFields() {\n        return;\n    }\n    incrementFields() {\n        return;\n    }\n    cacheEventByCorrelationId() {\n        return;\n    }\n}\n //# sourceMappingURL=StubPerformanceClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdGVsZW1ldHJ5L3BlcmZvcm1hbmNlL1N0dWJQZXJmb3JtYW5jZUNsaWVudC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ2dFO0FBRWhFOzs7Q0FHQyxHQUNELE1BQU1DO0lBQ0ZDLG1CQUFtQjtRQUNmO0lBQ0o7SUFDQUMsaUJBQWlCO1FBQ2I7SUFDSjtJQUNBQyxtQkFBbUI7UUFDZixPQUFPO0lBQ1g7QUFDSjtBQUNBLE1BQU1DO0lBQ0ZDLGFBQWE7UUFDVCxPQUFPO0lBQ1g7SUFDQUosaUJBQWlCSyxXQUFXLEVBQUVDLGFBQWEsRUFBRTtRQUN6QyxPQUFPO1lBQ0hDLEtBQUssSUFBTTtZQUNYQyxTQUFTLEtBQVE7WUFDakJDLEtBQUssS0FBUTtZQUNiQyxXQUFXLEtBQVE7WUFDbkJDLE9BQU87Z0JBQ0hDLFNBQVMsSUFBSSxDQUFDUixVQUFVO2dCQUN4QlMsUUFBUWYseUVBQXNCQSxDQUFDZ0IsVUFBVTtnQkFDekNDLFdBQVc7Z0JBQ1hDLGFBQWE7Z0JBQ2JDLGdCQUFnQjtnQkFDaEJDLFVBQVU7Z0JBQ1ZDLE1BQU1kO2dCQUNOZSxhQUFhQyxLQUFLQyxHQUFHO2dCQUNyQmhCLGVBQWVBLGlCQUFpQjtZQUNwQztZQUNBaUIsYUFBYSxJQUFJeEI7UUFDckI7SUFDSjtJQUNBeUIsOEJBQThCO1FBQzFCLE9BQU8sSUFBSXpCO0lBQ2Y7SUFDQTBCLHNCQUFzQjtRQUNsQixPQUFPO0lBQ1g7SUFDQUMsc0JBQXNCO1FBQ2xCO0lBQ0o7SUFDQUMsa0JBQWtCO1FBQ2Q7SUFDSjtJQUNBMUIsaUJBQWlCO1FBQ2IsT0FBTztJQUNYO0lBQ0EyQixzQkFBc0I7UUFDbEI7SUFDSjtJQUNBQyw0QkFBNEI7UUFDeEIsT0FBTztJQUNYO0lBQ0FDLHlCQUF5QjtRQUNyQixPQUFPO0lBQ1g7SUFDQUMsYUFBYTtRQUNUO0lBQ0o7SUFDQUMsWUFBWTtRQUNSO0lBQ0o7SUFDQUMsa0JBQWtCO1FBQ2Q7SUFDSjtJQUNBQyw0QkFBNEI7UUFDeEI7SUFDSjtBQUNKO0FBRTZELENBQzdELGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC90ZWxlbWV0cnkvcGVyZm9ybWFuY2UvU3R1YlBlcmZvcm1hbmNlQ2xpZW50Lm1qcz8zMzFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgUGVyZm9ybWFuY2VFdmVudFN0YXR1cyB9IGZyb20gJy4vUGVyZm9ybWFuY2VFdmVudC5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgU3R1YlBlcmZvcm1hbmNlTWVhc3VyZW1lbnQge1xyXG4gICAgc3RhcnRNZWFzdXJlbWVudCgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBlbmRNZWFzdXJlbWVudCgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmbHVzaE1lYXN1cmVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIFN0dWJQZXJmb3JtYW5jZUNsaWVudCB7XHJcbiAgICBnZW5lcmF0ZUlkKCkge1xyXG4gICAgICAgIHJldHVybiBcImNhbGxiYWNrLWlkXCI7XHJcbiAgICB9XHJcbiAgICBzdGFydE1lYXN1cmVtZW50KG1lYXN1cmVOYW1lLCBjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZW5kOiAoKSA9PiBudWxsLFxyXG4gICAgICAgICAgICBkaXNjYXJkOiAoKSA9PiB7IH0sXHJcbiAgICAgICAgICAgIGFkZDogKCkgPT4geyB9LFxyXG4gICAgICAgICAgICBpbmNyZW1lbnQ6ICgpID0+IHsgfSxcclxuICAgICAgICAgICAgZXZlbnQ6IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50SWQ6IHRoaXMuZ2VuZXJhdGVJZCgpLFxyXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBQZXJmb3JtYW5jZUV2ZW50U3RhdHVzLkluUHJvZ3Jlc3MsXHJcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBsaWJyYXJ5TmFtZTogXCJcIixcclxuICAgICAgICAgICAgICAgIGxpYnJhcnlWZXJzaW9uOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBtZWFzdXJlTmFtZSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZU1zOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgY29ycmVsYXRpb25JZDogY29ycmVsYXRpb25JZCB8fCBcIlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtZWFzdXJlbWVudDogbmV3IFN0dWJQZXJmb3JtYW5jZU1lYXN1cmVtZW50KCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHN0YXJ0UGVyZm9ybWFuY2VNZWFzdXJlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFN0dWJQZXJmb3JtYW5jZU1lYXN1cmVtZW50KCk7XHJcbiAgICB9XHJcbiAgICBjYWxjdWxhdGVRdWV1ZWRUaW1lKCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgYWRkUXVldWVNZWFzdXJlbWVudCgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBzZXRQcmVRdWV1ZVRpbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZW5kTWVhc3VyZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBkaXNjYXJkTWVhc3VyZW1lbnRzKCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJlbW92ZVBlcmZvcm1hbmNlQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBhZGRQZXJmb3JtYW5jZUNhbGxiYWNrKCkge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gICAgZW1pdEV2ZW50cygpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBhZGRGaWVsZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaW5jcmVtZW50RmllbGRzKCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNhY2hlRXZlbnRCeUNvcnJlbGF0aW9uSWQoKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFN0dWJQZXJmb3JtYW5jZUNsaWVudCwgU3R1YlBlcmZvcm1hbmNlTWVhc3VyZW1lbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0dWJQZXJmb3JtYW5jZUNsaWVudC5tanMubWFwXG4iXSwibmFtZXMiOlsiUGVyZm9ybWFuY2VFdmVudFN0YXR1cyIsIlN0dWJQZXJmb3JtYW5jZU1lYXN1cmVtZW50Iiwic3RhcnRNZWFzdXJlbWVudCIsImVuZE1lYXN1cmVtZW50IiwiZmx1c2hNZWFzdXJlbWVudCIsIlN0dWJQZXJmb3JtYW5jZUNsaWVudCIsImdlbmVyYXRlSWQiLCJtZWFzdXJlTmFtZSIsImNvcnJlbGF0aW9uSWQiLCJlbmQiLCJkaXNjYXJkIiwiYWRkIiwiaW5jcmVtZW50IiwiZXZlbnQiLCJldmVudElkIiwic3RhdHVzIiwiSW5Qcm9ncmVzcyIsImF1dGhvcml0eSIsImxpYnJhcnlOYW1lIiwibGlicmFyeVZlcnNpb24iLCJjbGllbnRJZCIsIm5hbWUiLCJzdGFydFRpbWVNcyIsIkRhdGUiLCJub3ciLCJtZWFzdXJlbWVudCIsInN0YXJ0UGVyZm9ybWFuY2VNZWFzdXJlbWVudCIsImNhbGN1bGF0ZVF1ZXVlZFRpbWUiLCJhZGRRdWV1ZU1lYXN1cmVtZW50Iiwic2V0UHJlUXVldWVUaW1lIiwiZGlzY2FyZE1lYXN1cmVtZW50cyIsInJlbW92ZVBlcmZvcm1hbmNlQ2FsbGJhY2siLCJhZGRQZXJmb3JtYW5jZUNhbGxiYWNrIiwiZW1pdEV2ZW50cyIsImFkZEZpZWxkcyIsImluY3JlbWVudEZpZWxkcyIsImNhY2hlRXZlbnRCeUNvcnJlbGF0aW9uSWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerTelemetryManager: () => (/* binding */ ServerTelemetryManager)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/AuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const skuGroupSeparator = \",\";\nconst skuValueSeparator = \"|\";\nfunction makeExtraSkuString(params) {\n    const { skus, libraryName, libraryVersion, extensionName, extensionVersion } = params;\n    const skuMap = new Map([\n        [\n            0,\n            [\n                libraryName,\n                libraryVersion\n            ]\n        ],\n        [\n            2,\n            [\n                extensionName,\n                extensionVersion\n            ]\n        ]\n    ]);\n    let skuArr = [];\n    if (skus?.length) {\n        skuArr = skus.split(skuGroupSeparator);\n        // Ignore invalid input sku param\n        if (skuArr.length < 4) {\n            return skus;\n        }\n    } else {\n        skuArr = Array.from({\n            length: 4\n        }, ()=>skuValueSeparator);\n    }\n    skuMap.forEach((value, key)=>{\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\n            setSku({\n                skuArr,\n                index: key,\n                skuName: value[0],\n                skuVersion: value[1]\n            });\n        }\n    });\n    return skuArr.join(skuGroupSeparator);\n}\nfunction setSku(params) {\n    const { skuArr, index, skuName, skuVersion } = params;\n    if (index >= skuArr.length) {\n        return;\n    }\n    skuArr[index] = [\n        skuName,\n        skuVersion\n    ].join(skuValueSeparator);\n}\n/** @internal */ class ServerTelemetryManager {\n    constructor(telemetryRequest, cacheManager){\n        this.cacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheOutcome.NOT_APPLICABLE;\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.telemetryCacheKey = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n    }\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */ generateCurrentRequestHeaderValue() {\n        const request = `${this.apiId}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFieldsArr = [\n            this.wrapperSKU,\n            this.wrapperVer\n        ];\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\n        if (nativeBrokerErrorCode?.length) {\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\n        }\n        const platformFields = platformFieldsArr.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */ generateLastRequestHeaderValue() {\n        const lastRequests = this.getLastRequests();\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors.slice(0, maxErrors).join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [\n            errorCount,\n            overflow\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */ cacheFailedRequest(error) {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                } else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                } else {\n                    lastRequests.errors.push(error.toString());\n                }\n            } else {\n                lastRequests.errors.push(error.toString());\n            }\n        } else {\n            lastRequests.errors.push(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return;\n    }\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */ incrementCacheHits() {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */ getLastRequests() {\n        const initialValue = {\n            failedRequests: [],\n            errors: [],\n            cacheHits: 0\n        };\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n        return lastRequests || initialValue;\n    }\n    /**\r\n     * Remove server telemetry cache entry\r\n     */ clearTelemetryCache() {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = {\n                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\n                errors: lastRequests.errors.slice(numErrorsFlushed),\n                cacheHits: 0\n            };\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */ static maxErrorsToSend(serverTelemetryEntity) {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for(i = 0; i < errorCount; i++){\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n            if (dataSize < _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n        return maxErrors;\n    }\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */ getRegionDiscoveryFields() {\n        const regionDiscoveryFields = [];\n        regionDiscoveryFields.push(this.regionUsed || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionOutcome || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        return regionDiscoveryFields.join(\",\");\n    }\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */ updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n    /**\r\n     * Set cache outcome\r\n     */ setCacheOutcome(cacheOutcome) {\n        this.cacheOutcome = cacheOutcome;\n    }\n    setNativeBrokerErrorCode(errorCode) {\n        const lastRequests = this.getLastRequests();\n        lastRequests.nativeBrokerErrorCode = errorCode;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    }\n    getNativeBrokerErrorCode() {\n        return this.getLastRequests().nativeBrokerErrorCode;\n    }\n    clearNativeBrokerErrorCode() {\n        const lastRequests = this.getLastRequests();\n        delete lastRequests.nativeBrokerErrorCode;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    }\n    static makeExtraSkuString(params) {\n        return makeExtraSkuString(params);\n    }\n}\n //# sourceMappingURL=ServerTelemetryManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/url/UrlString.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UrlString: () => (/* binding */ UrlString)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_UrlUtils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/UrlUtils.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Url object class which can perform various transformations on url strings.\r\n */ class UrlString {\n    get urlString() {\n        return this._urlString;\n    }\n    constructor(url){\n        this._urlString = url;\n        if (!this._urlString) {\n            // Throws error if url is empty\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlEmptyError);\n        }\n        if (!url.includes(\"#\")) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */ static canonicalizeUri(url) {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n            if (_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            } else if (_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n            if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n            return lowerCaseUrl;\n        }\n        return url;\n    }\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */ validateAsUri() {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Throw error if uri is insecure.\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.authorityUriInsecure);\n        }\n    }\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */ static appendQueryString(url, queryString) {\n        if (!queryString) {\n            return url;\n        }\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n    }\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */ static removeHashFromUrl(url) {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */ replaceTenantPath(tenantId) {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (tenantId && pathArray.length !== 0 && (pathArray[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AADAuthorityConstants.COMMON || pathArray[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AADAuthorityConstants.ORGANIZATIONS)) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */ getUrlComponents() {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7]\n        };\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val)=>val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n        if (urlComponents.QueryString && urlComponents.QueryString.endsWith(\"/\")) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n        }\n        return urlComponents;\n    }\n    static getDomainFromUrl(url) {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n        const match = url.match(regEx);\n        if (!match) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        return match[2];\n    }\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\n        if (relativeUrl[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n        }\n        return relativeUrl;\n    }\n    static constructAuthorityUriFromObject(urlObject) {\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n    }\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     * @deprecated This API will be removed in a future version\r\n     */ static hashContainsKnownProperties(response) {\n        return !!(0,_utils_UrlUtils_mjs__WEBPACK_IMPORTED_MODULE_4__.getDeserializedResponse)(response);\n    }\n}\n //# sourceMappingURL=UrlString.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClientAssertion: () => (/* binding */ getClientAssertion)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ async function getClientAssertion(clientAssertion, clientId, tokenEndpoint) {\n    if (typeof clientAssertion === \"string\") {\n        return clientAssertion;\n    } else {\n        const config = {\n            clientId: clientId,\n            tokenEndpoint: tokenEndpoint\n        };\n        return clientAssertion(config);\n    }\n}\n //# sourceMappingURL=ClientAssertionUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvQ2xpZW50QXNzZXJ0aW9uVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxlQUFlQSxtQkFBbUJDLGVBQWUsRUFBRUMsUUFBUSxFQUFFQyxhQUFhO0lBQ3RFLElBQUksT0FBT0Ysb0JBQW9CLFVBQVU7UUFDckMsT0FBT0E7SUFDWCxPQUNLO1FBQ0QsTUFBTUcsU0FBUztZQUNYRixVQUFVQTtZQUNWQyxlQUFlQTtRQUNuQjtRQUNBLE9BQU9GLGdCQUFnQkc7SUFDM0I7QUFDSjtBQUU4QixDQUM5QixpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jZXJ0ZXgvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvQ2xpZW50QXNzZXJ0aW9uVXRpbHMubWpzPzFiMDQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0Q2xpZW50QXNzZXJ0aW9uKGNsaWVudEFzc2VydGlvbiwgY2xpZW50SWQsIHRva2VuRW5kcG9pbnQpIHtcclxuICAgIGlmICh0eXBlb2YgY2xpZW50QXNzZXJ0aW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsaWVudEFzc2VydGlvbjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgY2xpZW50SWQ6IGNsaWVudElkLFxyXG4gICAgICAgICAgICB0b2tlbkVuZHBvaW50OiB0b2tlbkVuZHBvaW50LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGNsaWVudEFzc2VydGlvbihjb25maWcpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IGdldENsaWVudEFzc2VydGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xpZW50QXNzZXJ0aW9uVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImdldENsaWVudEFzc2VydGlvbiIsImNsaWVudEFzc2VydGlvbiIsImNsaWVudElkIiwidG9rZW5FbmRwb2ludCIsImNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/Constants.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AADAuthorityConstants: () => (/* binding */ AADAuthorityConstants),\n/* harmony export */   APP_METADATA: () => (/* binding */ APP_METADATA),\n/* harmony export */   AUTHORITY_METADATA_CONSTANTS: () => (/* binding */ AUTHORITY_METADATA_CONSTANTS),\n/* harmony export */   AuthenticationScheme: () => (/* binding */ AuthenticationScheme),\n/* harmony export */   AuthorityMetadataSource: () => (/* binding */ AuthorityMetadataSource),\n/* harmony export */   CLIENT_INFO: () => (/* binding */ CLIENT_INFO),\n/* harmony export */   CacheAccountType: () => (/* binding */ CacheAccountType),\n/* harmony export */   CacheOutcome: () => (/* binding */ CacheOutcome),\n/* harmony export */   CacheType: () => (/* binding */ CacheType),\n/* harmony export */   ClaimsRequestKeys: () => (/* binding */ ClaimsRequestKeys),\n/* harmony export */   CodeChallengeMethodValues: () => (/* binding */ CodeChallengeMethodValues),\n/* harmony export */   Constants: () => (/* binding */ Constants),\n/* harmony export */   CredentialType: () => (/* binding */ CredentialType),\n/* harmony export */   DEFAULT_TOKEN_RENEWAL_OFFSET_SEC: () => (/* binding */ DEFAULT_TOKEN_RENEWAL_OFFSET_SEC),\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   GrantType: () => (/* binding */ GrantType),\n/* harmony export */   HeaderNames: () => (/* binding */ HeaderNames),\n/* harmony export */   HttpStatus: () => (/* binding */ HttpStatus),\n/* harmony export */   JsonWebTokenTypes: () => (/* binding */ JsonWebTokenTypes),\n/* harmony export */   OIDC_DEFAULT_SCOPES: () => (/* binding */ OIDC_DEFAULT_SCOPES),\n/* harmony export */   OIDC_SCOPES: () => (/* binding */ OIDC_SCOPES),\n/* harmony export */   ONE_DAY_IN_MS: () => (/* binding */ ONE_DAY_IN_MS),\n/* harmony export */   PasswordGrantConstants: () => (/* binding */ PasswordGrantConstants),\n/* harmony export */   PersistentCacheKeys: () => (/* binding */ PersistentCacheKeys),\n/* harmony export */   PromptValue: () => (/* binding */ PromptValue),\n/* harmony export */   RegionDiscoveryOutcomes: () => (/* binding */ RegionDiscoveryOutcomes),\n/* harmony export */   RegionDiscoverySources: () => (/* binding */ RegionDiscoverySources),\n/* harmony export */   ResponseCodes: () => (/* binding */ ResponseCodes),\n/* harmony export */   ResponseMode: () => (/* binding */ ResponseMode),\n/* harmony export */   SERVER_TELEM_CONSTANTS: () => (/* binding */ SERVER_TELEM_CONSTANTS),\n/* harmony export */   Separators: () => (/* binding */ Separators),\n/* harmony export */   ServerResponseType: () => (/* binding */ ServerResponseType),\n/* harmony export */   THE_FAMILY_ID: () => (/* binding */ THE_FAMILY_ID),\n/* harmony export */   ThrottlingConstants: () => (/* binding */ ThrottlingConstants)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    DSTS: \"dstsv2\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // CIAM URL\n    CIAM_AUTH_URL: \".ciamlogin.com\",\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    NOT_APPLICABLE: \"N/A\",\n    NOT_AVAILABLE: \"Not Available\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\n        \"login.microsoftonline.com\",\n        \"login.windows.net\",\n        \"login.microsoft.com\",\n        \"sts.windows.net\"\n    ],\n    TOKEN_RESPONSE_TYPE: \"token\",\n    ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n    SHR_NONCE_VALIDITY: 240,\n    INVALID_INSTANCE: \"invalid_instance\"\n};\nconst HttpStatus = {\n    SUCCESS: 200,\n    SUCCESS_RANGE_START: 200,\n    SUCCESS_RANGE_END: 299,\n    REDIRECT: 302,\n    CLIENT_ERROR: 400,\n    CLIENT_ERROR_RANGE_START: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    REQUEST_TIMEOUT: 408,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_ERROR_RANGE_END: 499,\n    SERVER_ERROR: 500,\n    SERVER_ERROR_RANGE_START: 500,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504,\n    SERVER_ERROR_RANGE_END: 599,\n    MULTI_SIDED_ERROR: 600\n};\nconst OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE\n];\nconst OIDC_SCOPES = [\n    ...OIDC_DEFAULT_SCOPES,\n    Constants.EMAIL_SCOPE\n];\n/**\r\n * Request header names\r\n */ const HeaderNames = {\n    CONTENT_TYPE: \"Content-Type\",\n    CONTENT_LENGTH: \"Content-Length\",\n    RETRY_AFTER: \"Retry-After\",\n    CCS_HEADER: \"X-AnchorMailbox\",\n    WWWAuthenticate: \"WWW-Authenticate\",\n    AuthenticationInfo: \"Authentication-Info\",\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\n    X_MS_HTTP_VERSION: \"x-ms-httpver\"\n};\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */ const PersistentCacheKeys = {\n    ID_TOKEN: \"idtoken\",\n    CLIENT_INFO: \"client.info\",\n    ADAL_ID_TOKEN: \"adal.idtoken\",\n    ERROR: \"error\",\n    ERROR_DESC: \"error.description\",\n    ACTIVE_ACCOUNT: \"active-account\",\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\"\n};\n/**\r\n * String constants related to AAD Authority\r\n */ const AADAuthorityConstants = {\n    COMMON: \"common\",\n    ORGANIZATIONS: \"organizations\",\n    CONSUMERS: \"consumers\"\n};\n/**\r\n * Claims request keys\r\n */ const ClaimsRequestKeys = {\n    ACCESS_TOKEN: \"access_token\",\n    XMS_CC: \"xms_cc\"\n};\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */ const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\",\n    NO_SESSION: \"no_session\"\n};\n/**\r\n * allowed values for codeVerifier\r\n */ const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\"\n};\n/**\r\n * allowed values for server response type\r\n */ const ServerResponseType = {\n    QUERY: \"query\",\n    FRAGMENT: \"fragment\"\n};\n/**\r\n * allowed values for response_mode\r\n */ const ResponseMode = {\n    ...ServerResponseType,\n    FORM_POST: \"form_post\"\n};\n/**\r\n * allowed grant_type\r\n */ const GrantType = {\n    IMPLICIT_GRANT: \"implicit\",\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\n    DEVICE_CODE_GRANT: \"device_code\",\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n};\n/**\r\n * Account types in Cache\r\n */ const CacheAccountType = {\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\n    GENERIC_ACCOUNT_TYPE: \"Generic\"\n};\n/**\r\n * Separators used in cache\r\n */ const Separators = {\n    CACHE_KEY_SEPARATOR: \"-\",\n    CLIENT_INFO_SEPARATOR: \".\"\n};\n/**\r\n * Credential Type stored in the cache\r\n */ const CredentialType = {\n    ID_TOKEN: \"IdToken\",\n    ACCESS_TOKEN: \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN: \"RefreshToken\"\n};\n/**\r\n * Combine all cache types\r\n */ const CacheType = {\n    ADFS: 1001,\n    MSA: 1002,\n    MSSTS: 1003,\n    GENERIC: 1004,\n    ACCESS_TOKEN: 2001,\n    REFRESH_TOKEN: 2002,\n    ID_TOKEN: 2003,\n    APP_METADATA: 3001,\n    UNDEFINED: 9999\n};\n/**\r\n * More Cache related constants\r\n */ const APP_METADATA = \"appmetadata\";\nconst CLIENT_INFO = \"client_info\";\nconst THE_FAMILY_ID = \"1\";\nconst AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24\n};\nconst AuthorityMetadataSource = {\n    CONFIG: \"config\",\n    CACHE: \"cache\",\n    NETWORK: \"network\",\n    HARDCODED_VALUES: \"hardcoded_values\"\n};\nconst SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80,\n    MAX_LAST_HEADER_BYTES: 330,\n    MAX_CACHED_ERRORS: 50,\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */ const AuthenticationScheme = {\n    BEARER: \"Bearer\",\n    POP: \"pop\",\n    SSH: \"ssh-cert\"\n};\n/**\r\n * Constants related to throttling\r\n */ const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nconst Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */ const PasswordGrantConstants = {\n    username: \"username\",\n    password: \"password\"\n};\n/**\r\n * Response codes\r\n */ const ResponseCodes = {\n    httpSuccess: 200,\n    httpBadRequest: 400\n};\n/**\r\n * Region Discovery Sources\r\n */ const RegionDiscoverySources = {\n    FAILED_AUTO_DETECTION: \"1\",\n    INTERNAL_CACHE: \"2\",\n    ENVIRONMENT_VARIABLE: \"3\",\n    IMDS: \"4\"\n};\n/**\r\n * Region Discovery Outcomes\r\n */ const RegionDiscoveryOutcomes = {\n    CONFIGURED_MATCHES_DETECTED: \"1\",\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\n    CONFIGURED_NOT_DETECTED: \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\"\n};\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */ const CacheOutcome = {\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\n    NOT_APPLICABLE: \"0\",\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\n    // When the token request goes to the identity provider because no cached access token exists\n    NO_CACHED_ACCESS_TOKEN: \"2\",\n    // When the token request goes to the identity provider because cached access token expired\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n    PROACTIVELY_REFRESHED: \"4\"\n};\nconst JsonWebTokenTypes = {\n    Jwt: \"JWT\",\n    Jwk: \"JWK\",\n    Pop: \"pop\"\n};\nconst ONE_DAY_IN_MS = 86400000;\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n //# sourceMappingURL=Constants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   invokeAsync: () => (/* binding */ invokeAsync)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId)=>{\n    return (...args)=>{\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields({\n                [eventCount]: 1\n            }, correlationId);\n        }\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        } catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false\n            }, e);\n            throw e;\n        }\n    };\n};\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId)=>{\n    return (...args)=>{\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields({\n                [eventCount]: 1\n            }, correlationId);\n        }\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args).then((response)=>{\n            logger.trace(`Returning result from ${eventName}`);\n            inProgressEvent?.end({\n                success: true\n            });\n            return response;\n        }).catch((e)=>{\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false\n            }, e);\n            throw e;\n        });\n    };\n};\n //# sourceMappingURL=FunctionWrappers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvRnVuY3Rpb25XcmFwcGVycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Ozs7Ozs7OztDQVVDLEdBQ0QsOERBQThEO0FBQzlELE1BQU1BLFNBQVMsQ0FBQ0MsVUFBVUMsV0FBV0MsUUFBUUMsaUJBQWlCQztJQUMxRCxPQUFPLENBQUMsR0FBR0M7UUFDUEgsT0FBT0ksS0FBSyxDQUFDLENBQUMsbUJBQW1CLEVBQUVMLFVBQVUsQ0FBQztRQUM5QyxNQUFNTSxrQkFBa0JKLGlCQUFpQkssaUJBQWlCUCxXQUFXRztRQUNyRSxJQUFJQSxlQUFlO1lBQ2YsK0RBQStEO1lBQy9ELE1BQU1LLGFBQWFSLFlBQVk7WUFDL0JFLGlCQUFpQk8sZ0JBQWdCO2dCQUFFLENBQUNELFdBQVcsRUFBRTtZQUFFLEdBQUdMO1FBQzFEO1FBQ0EsSUFBSTtZQUNBLE1BQU1PLFNBQVNYLFlBQVlLO1lBQzNCRSxpQkFBaUJLLElBQUk7Z0JBQ2pCQyxTQUFTO1lBQ2I7WUFDQVgsT0FBT0ksS0FBSyxDQUFDLENBQUMsc0JBQXNCLEVBQUVMLFVBQVUsQ0FBQztZQUNqRCxPQUFPVTtRQUNYLEVBQ0EsT0FBT0csR0FBRztZQUNOWixPQUFPSSxLQUFLLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUwsVUFBVSxDQUFDO1lBQzdDLElBQUk7Z0JBQ0FDLE9BQU9JLEtBQUssQ0FBQ1MsS0FBS0MsU0FBUyxDQUFDRjtZQUNoQyxFQUNBLE9BQU9BLEdBQUc7Z0JBQ05aLE9BQU9JLEtBQUssQ0FBQztZQUNqQjtZQUNBQyxpQkFBaUJLLElBQUk7Z0JBQ2pCQyxTQUFTO1lBQ2IsR0FBR0M7WUFDSCxNQUFNQTtRQUNWO0lBQ0o7QUFDSjtBQUNBOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsOERBQThEO0FBQzlELE1BQU1HLGNBQWMsQ0FBQ2pCLFVBQVVDLFdBQVdDLFFBQVFDLGlCQUFpQkM7SUFDL0QsT0FBTyxDQUFDLEdBQUdDO1FBQ1BILE9BQU9JLEtBQUssQ0FBQyxDQUFDLG1CQUFtQixFQUFFTCxVQUFVLENBQUM7UUFDOUMsTUFBTU0sa0JBQWtCSixpQkFBaUJLLGlCQUFpQlAsV0FBV0c7UUFDckUsSUFBSUEsZUFBZTtZQUNmLCtEQUErRDtZQUMvRCxNQUFNSyxhQUFhUixZQUFZO1lBQy9CRSxpQkFBaUJPLGdCQUFnQjtnQkFBRSxDQUFDRCxXQUFXLEVBQUU7WUFBRSxHQUFHTDtRQUMxRDtRQUNBRCxpQkFBaUJlLGdCQUFnQmpCLFdBQVdHO1FBQzVDLE9BQU9KLFlBQVlLLE1BQ2RjLElBQUksQ0FBQyxDQUFDQztZQUNQbEIsT0FBT0ksS0FBSyxDQUFDLENBQUMsc0JBQXNCLEVBQUVMLFVBQVUsQ0FBQztZQUNqRE0saUJBQWlCSyxJQUFJO2dCQUNqQkMsU0FBUztZQUNiO1lBQ0EsT0FBT087UUFDWCxHQUNLQyxLQUFLLENBQUMsQ0FBQ1A7WUFDUlosT0FBT0ksS0FBSyxDQUFDLENBQUMsa0JBQWtCLEVBQUVMLFVBQVUsQ0FBQztZQUM3QyxJQUFJO2dCQUNBQyxPQUFPSSxLQUFLLENBQUNTLEtBQUtDLFNBQVMsQ0FBQ0Y7WUFDaEMsRUFDQSxPQUFPQSxHQUFHO2dCQUNOWixPQUFPSSxLQUFLLENBQUM7WUFDakI7WUFDQUMsaUJBQWlCSyxJQUFJO2dCQUNqQkMsU0FBUztZQUNiLEdBQUdDO1lBQ0gsTUFBTUE7UUFDVjtJQUNKO0FBQ0o7QUFFK0IsQ0FDL0IsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3V0aWxzL0Z1bmN0aW9uV3JhcHBlcnMubWpzP2Q0YjIiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFdyYXBzIGEgZnVuY3Rpb24gd2l0aCBhIHBlcmZvcm1hbmNlIG1lYXN1cmVtZW50LlxyXG4gKiBVc2FnZTogaW52b2tlKGZ1bmN0aW9uVG9DYWxsLCBwZXJmb3JtYW5jZUNsaWVudCwgXCJFdmVudE5hbWVcIiwgXCJjb3JyZWxhdGlvbklkXCIpKC4uLmFyZ3NUb1Bhc3NUb0Z1bmN0aW9uKVxyXG4gKiBAcGFyYW0gY2FsbGJhY2tcclxuICogQHBhcmFtIGV2ZW50TmFtZVxyXG4gKiBAcGFyYW0gbG9nZ2VyXHJcbiAqIEBwYXJhbSB0ZWxlbWV0cnlDbGllbnRcclxuICogQHBhcmFtIGNvcnJlbGF0aW9uSWRcclxuICogQHJldHVybnNcclxuICogQGludGVybmFsXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5jb25zdCBpbnZva2UgPSAoY2FsbGJhY2ssIGV2ZW50TmFtZSwgbG9nZ2VyLCB0ZWxlbWV0cnlDbGllbnQsIGNvcnJlbGF0aW9uSWQpID0+IHtcclxuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIGxvZ2dlci50cmFjZShgRXhlY3V0aW5nIGZ1bmN0aW9uICR7ZXZlbnROYW1lfWApO1xyXG4gICAgICAgIGNvbnN0IGluUHJvZ3Jlc3NFdmVudCA9IHRlbGVtZXRyeUNsaWVudD8uc3RhcnRNZWFzdXJlbWVudChldmVudE5hbWUsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIGlmIChjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgICAgIC8vIFRyYWNrIG51bWJlciBvZiB0aW1lcyB0aGlzIEFQSSBpcyBjYWxsZWQgaW4gYSBzaW5nbGUgcmVxdWVzdFxyXG4gICAgICAgICAgICBjb25zdCBldmVudENvdW50ID0gZXZlbnROYW1lICsgXCJDYWxsQ291bnRcIjtcclxuICAgICAgICAgICAgdGVsZW1ldHJ5Q2xpZW50Py5pbmNyZW1lbnRGaWVsZHMoeyBbZXZlbnRDb3VudF06IDEgfSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICBpblByb2dyZXNzRXZlbnQ/LmVuZCh7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKGBSZXR1cm5pbmcgcmVzdWx0IGZyb20gJHtldmVudE5hbWV9YCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci50cmFjZShgRXJyb3Igb2NjdXJyZWQgaW4gJHtldmVudE5hbWV9YCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIudHJhY2UoSlNPTi5zdHJpbmdpZnkoZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIudHJhY2UoXCJVbmFibGUgdG8gcHJpbnQgZXJyb3IgbWVzc2FnZS5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5Qcm9ncmVzc0V2ZW50Py5lbmQoe1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgICAgIH0sIGUpO1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn07XHJcbi8qKlxyXG4gKiBXcmFwcyBhbiBhc3luYyBmdW5jdGlvbiB3aXRoIGEgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQuXHJcbiAqIFVzYWdlOiBpbnZva2VBc3luYyhmdW5jdGlvblRvQ2FsbCwgcGVyZm9ybWFuY2VDbGllbnQsIFwiRXZlbnROYW1lXCIsIFwiY29ycmVsYXRpb25JZFwiKSguLi5hcmdzVG9QYXNzVG9GdW5jdGlvbilcclxuICogQHBhcmFtIGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBldmVudE5hbWVcclxuICogQHBhcmFtIGxvZ2dlclxyXG4gKiBAcGFyYW0gdGVsZW1ldHJ5Q2xpZW50XHJcbiAqIEBwYXJhbSBjb3JyZWxhdGlvbklkXHJcbiAqIEByZXR1cm5zXHJcbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuY29uc3QgaW52b2tlQXN5bmMgPSAoY2FsbGJhY2ssIGV2ZW50TmFtZSwgbG9nZ2VyLCB0ZWxlbWV0cnlDbGllbnQsIGNvcnJlbGF0aW9uSWQpID0+IHtcclxuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIGxvZ2dlci50cmFjZShgRXhlY3V0aW5nIGZ1bmN0aW9uICR7ZXZlbnROYW1lfWApO1xyXG4gICAgICAgIGNvbnN0IGluUHJvZ3Jlc3NFdmVudCA9IHRlbGVtZXRyeUNsaWVudD8uc3RhcnRNZWFzdXJlbWVudChldmVudE5hbWUsIGNvcnJlbGF0aW9uSWQpO1xyXG4gICAgICAgIGlmIChjb3JyZWxhdGlvbklkKSB7XHJcbiAgICAgICAgICAgIC8vIFRyYWNrIG51bWJlciBvZiB0aW1lcyB0aGlzIEFQSSBpcyBjYWxsZWQgaW4gYSBzaW5nbGUgcmVxdWVzdFxyXG4gICAgICAgICAgICBjb25zdCBldmVudENvdW50ID0gZXZlbnROYW1lICsgXCJDYWxsQ291bnRcIjtcclxuICAgICAgICAgICAgdGVsZW1ldHJ5Q2xpZW50Py5pbmNyZW1lbnRGaWVsZHMoeyBbZXZlbnRDb3VudF06IDEgfSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRlbGVtZXRyeUNsaWVudD8uc2V0UHJlUXVldWVUaW1lKGV2ZW50TmFtZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKC4uLmFyZ3MpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICBsb2dnZXIudHJhY2UoYFJldHVybmluZyByZXN1bHQgZnJvbSAke2V2ZW50TmFtZX1gKTtcclxuICAgICAgICAgICAgaW5Qcm9ncmVzc0V2ZW50Py5lbmQoe1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcclxuICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKGBFcnJvciBvY2N1cnJlZCBpbiAke2V2ZW50TmFtZX1gKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShKU09OLnN0cmluZ2lmeShlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcIlVuYWJsZSB0byBwcmludCBlcnJvciBtZXNzYWdlLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpblByb2dyZXNzRXZlbnQ/LmVuZCh7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgfSwgZSk7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59O1xuXG5leHBvcnQgeyBpbnZva2UsIGludm9rZUFzeW5jIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GdW5jdGlvbldyYXBwZXJzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJpbnZva2UiLCJjYWxsYmFjayIsImV2ZW50TmFtZSIsImxvZ2dlciIsInRlbGVtZXRyeUNsaWVudCIsImNvcnJlbGF0aW9uSWQiLCJhcmdzIiwidHJhY2UiLCJpblByb2dyZXNzRXZlbnQiLCJzdGFydE1lYXN1cmVtZW50IiwiZXZlbnRDb3VudCIsImluY3JlbWVudEZpZWxkcyIsInJlc3VsdCIsImVuZCIsInN1Y2Nlc3MiLCJlIiwiSlNPTiIsInN0cmluZ2lmeSIsImludm9rZUFzeW5jIiwic2V0UHJlUXVldWVUaW1lIiwidGhlbiIsInJlc3BvbnNlIiwiY2F0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProtocolUtils: () => (/* binding */ ProtocolUtils)\n/* harmony export */ });\n/* harmony import */ var _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */ class ProtocolUtils {\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */ static setRequestState(cryptoObj, userState, meta) {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return userState ? `${libraryState}${_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM}${userState}` : libraryState;\n    }\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */ static generateLibraryState(cryptoObj, meta) {\n        if (!cryptoObj) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noCryptoObject);\n        }\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj = {\n            id: cryptoObj.createNewGuid()\n        };\n        if (meta) {\n            stateObj.meta = meta;\n        }\n        const stateString = JSON.stringify(stateObj);\n        return cryptoObj.base64Encode(stateString);\n    }\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */ static parseRequestState(cryptoObj, state) {\n        if (!cryptoObj) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noCryptoObject);\n        }\n        if (!state) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n        }\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1 ? splitState.slice(1).join(_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM) : _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString);\n            return {\n                userRequestState: userState || _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n                libraryState: libraryStateObj\n            };\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n        }\n    }\n}\n //# sourceMappingURL=ProtocolUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvUHJvdG9jb2xVdGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUM0QztBQUN5QjtBQUNZO0FBRWpGOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUk7SUFDRjs7OztLQUlDLEdBQ0QsT0FBT0MsZ0JBQWdCQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxFQUFFO1FBQy9DLE1BQU1DLGVBQWVMLGNBQWNNLG9CQUFvQixDQUFDSixXQUFXRTtRQUNuRSxPQUFPRCxZQUNELENBQUMsRUFBRUUsYUFBYSxFQUFFVCxxREFBU0EsQ0FBQ1csY0FBYyxDQUFDLEVBQUVKLFVBQVUsQ0FBQyxHQUN4REU7SUFDVjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPQyxxQkFBcUJKLFNBQVMsRUFBRUUsSUFBSSxFQUFFO1FBQ3pDLElBQUksQ0FBQ0YsV0FBVztZQUNaLE1BQU1MLGlGQUFxQkEsQ0FBQ0MsMkVBQWNBO1FBQzlDO1FBQ0EseUZBQXlGO1FBQ3pGLE1BQU1VLFdBQVc7WUFDYkMsSUFBSVAsVUFBVVEsYUFBYTtRQUMvQjtRQUNBLElBQUlOLE1BQU07WUFDTkksU0FBU0osSUFBSSxHQUFHQTtRQUNwQjtRQUNBLE1BQU1PLGNBQWNDLEtBQUtDLFNBQVMsQ0FBQ0w7UUFDbkMsT0FBT04sVUFBVVksWUFBWSxDQUFDSDtJQUNsQztJQUNBOzs7O0tBSUMsR0FDRCxPQUFPSSxrQkFBa0JiLFNBQVMsRUFBRWMsS0FBSyxFQUFFO1FBQ3ZDLElBQUksQ0FBQ2QsV0FBVztZQUNaLE1BQU1MLGlGQUFxQkEsQ0FBQ0MsMkVBQWNBO1FBQzlDO1FBQ0EsSUFBSSxDQUFDa0IsT0FBTztZQUNSLE1BQU1uQixpRkFBcUJBLENBQUNFLHlFQUFZQTtRQUM1QztRQUNBLElBQUk7WUFDQSx5RkFBeUY7WUFDekYsTUFBTWtCLGFBQWFELE1BQU1FLEtBQUssQ0FBQ3RCLHFEQUFTQSxDQUFDVyxjQUFjO1lBQ3ZELE1BQU1GLGVBQWVZLFVBQVUsQ0FBQyxFQUFFO1lBQ2xDLE1BQU1kLFlBQVljLFdBQVdFLE1BQU0sR0FBRyxJQUNoQ0YsV0FBV0csS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQ3pCLHFEQUFTQSxDQUFDVyxjQUFjLElBQ2pEWCxxREFBU0EsQ0FBQzBCLFlBQVk7WUFDNUIsTUFBTUMscUJBQXFCckIsVUFBVXNCLFlBQVksQ0FBQ25CO1lBQ2xELE1BQU1vQixrQkFBa0JiLEtBQUtjLEtBQUssQ0FBQ0g7WUFDbkMsT0FBTztnQkFDSEksa0JBQWtCeEIsYUFBYVAscURBQVNBLENBQUMwQixZQUFZO2dCQUNyRGpCLGNBQWNvQjtZQUNsQjtRQUNKLEVBQ0EsT0FBT0csR0FBRztZQUNOLE1BQU0vQixpRkFBcUJBLENBQUNFLHlFQUFZQTtRQUM1QztJQUNKO0FBQ0o7QUFFeUIsQ0FDekIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3V0aWxzL1Byb3RvY29sVXRpbHMubWpzP2MwZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuL0NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50QXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBub0NyeXB0b09iamVjdCwgaW52YWxpZFN0YXRlIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDbGFzcyB3aGljaCBwcm92aWRlcyBoZWxwZXJzIGZvciBPQXV0aCAyLjAgcHJvdG9jb2wgc3BlY2lmaWMgdmFsdWVzXHJcbiAqL1xyXG5jbGFzcyBQcm90b2NvbFV0aWxzIHtcclxuICAgIC8qKlxyXG4gICAgICogQXBwZW5kcyB1c2VyIHN0YXRlIHdpdGggcmFuZG9tIGd1aWQsIG9yIHJldHVybnMgcmFuZG9tIGd1aWQuXHJcbiAgICAgKiBAcGFyYW0gdXNlclN0YXRlXHJcbiAgICAgKiBAcGFyYW0gcmFuZG9tR3VpZFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2V0UmVxdWVzdFN0YXRlKGNyeXB0b09iaiwgdXNlclN0YXRlLCBtZXRhKSB7XHJcbiAgICAgICAgY29uc3QgbGlicmFyeVN0YXRlID0gUHJvdG9jb2xVdGlscy5nZW5lcmF0ZUxpYnJhcnlTdGF0ZShjcnlwdG9PYmosIG1ldGEpO1xyXG4gICAgICAgIHJldHVybiB1c2VyU3RhdGVcclxuICAgICAgICAgICAgPyBgJHtsaWJyYXJ5U3RhdGV9JHtDb25zdGFudHMuUkVTT1VSQ0VfREVMSU19JHt1c2VyU3RhdGV9YFxyXG4gICAgICAgICAgICA6IGxpYnJhcnlTdGF0ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIHRoZSBzdGF0ZSB2YWx1ZSB1c2VkIGJ5IHRoZSBjb21tb24gbGlicmFyeS5cclxuICAgICAqIEBwYXJhbSByYW5kb21HdWlkXHJcbiAgICAgKiBAcGFyYW0gY3J5cHRvT2JqXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZW5lcmF0ZUxpYnJhcnlTdGF0ZShjcnlwdG9PYmosIG1ldGEpIHtcclxuICAgICAgICBpZiAoIWNyeXB0b09iaikge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3Iobm9DcnlwdG9PYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDcmVhdGUgYSBzdGF0ZSBvYmplY3QgY29udGFpbmluZyBhIHVuaXF1ZSBpZCBhbmQgdGhlIHRpbWVzdGFtcCBvZiB0aGUgcmVxdWVzdCBjcmVhdGlvblxyXG4gICAgICAgIGNvbnN0IHN0YXRlT2JqID0ge1xyXG4gICAgICAgICAgICBpZDogY3J5cHRvT2JqLmNyZWF0ZU5ld0d1aWQoKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChtZXRhKSB7XHJcbiAgICAgICAgICAgIHN0YXRlT2JqLm1ldGEgPSBtZXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzdGF0ZVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHN0YXRlT2JqKTtcclxuICAgICAgICByZXR1cm4gY3J5cHRvT2JqLmJhc2U2NEVuY29kZShzdGF0ZVN0cmluZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyB0aGUgc3RhdGUgaW50byB0aGUgUmVxdWVzdFN0YXRlT2JqZWN0LCB3aGljaCBjb250YWlucyB0aGUgTGlicmFyeVN0YXRlIGluZm8gYW5kIHRoZSBzdGF0ZSBwYXNzZWQgYnkgdGhlIHVzZXIuXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqIEBwYXJhbSBjcnlwdG9PYmpcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHBhcnNlUmVxdWVzdFN0YXRlKGNyeXB0b09iaiwgc3RhdGUpIHtcclxuICAgICAgICBpZiAoIWNyeXB0b09iaikge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3Iobm9DcnlwdG9PYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXN0YXRlKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihpbnZhbGlkU3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBTcGxpdCB0aGUgc3RhdGUgYmV0d2VlbiBsaWJyYXJ5IHN0YXRlIGFuZCB1c2VyIHBhc3NlZCBzdGF0ZSBhbmQgZGVjb2RlIHRoZW0gc2VwYXJhdGVseVxyXG4gICAgICAgICAgICBjb25zdCBzcGxpdFN0YXRlID0gc3RhdGUuc3BsaXQoQ29uc3RhbnRzLlJFU09VUkNFX0RFTElNKTtcclxuICAgICAgICAgICAgY29uc3QgbGlicmFyeVN0YXRlID0gc3BsaXRTdGF0ZVswXTtcclxuICAgICAgICAgICAgY29uc3QgdXNlclN0YXRlID0gc3BsaXRTdGF0ZS5sZW5ndGggPiAxXHJcbiAgICAgICAgICAgICAgICA/IHNwbGl0U3RhdGUuc2xpY2UoMSkuam9pbihDb25zdGFudHMuUkVTT1VSQ0VfREVMSU0pXHJcbiAgICAgICAgICAgICAgICA6IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpYnJhcnlTdGF0ZVN0cmluZyA9IGNyeXB0b09iai5iYXNlNjREZWNvZGUobGlicmFyeVN0YXRlKTtcclxuICAgICAgICAgICAgY29uc3QgbGlicmFyeVN0YXRlT2JqID0gSlNPTi5wYXJzZShsaWJyYXJ5U3RhdGVTdHJpbmcpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdXNlclJlcXVlc3RTdGF0ZTogdXNlclN0YXRlIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkcsXHJcbiAgICAgICAgICAgICAgICBsaWJyYXJ5U3RhdGU6IGxpYnJhcnlTdGF0ZU9iaixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKGludmFsaWRTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFByb3RvY29sVXRpbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3RvY29sVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsIm5vQ3J5cHRvT2JqZWN0IiwiaW52YWxpZFN0YXRlIiwiUHJvdG9jb2xVdGlscyIsInNldFJlcXVlc3RTdGF0ZSIsImNyeXB0b09iaiIsInVzZXJTdGF0ZSIsIm1ldGEiLCJsaWJyYXJ5U3RhdGUiLCJnZW5lcmF0ZUxpYnJhcnlTdGF0ZSIsIlJFU09VUkNFX0RFTElNIiwic3RhdGVPYmoiLCJpZCIsImNyZWF0ZU5ld0d1aWQiLCJzdGF0ZVN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJiYXNlNjRFbmNvZGUiLCJwYXJzZVJlcXVlc3RTdGF0ZSIsInN0YXRlIiwic3BsaXRTdGF0ZSIsInNwbGl0IiwibGVuZ3RoIiwic2xpY2UiLCJqb2luIiwiRU1QVFlfU1RSSU5HIiwibGlicmFyeVN0YXRlU3RyaW5nIiwiYmFzZTY0RGVjb2RlIiwibGlicmFyeVN0YXRlT2JqIiwicGFyc2UiLCJ1c2VyUmVxdWVzdFN0YXRlIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringUtils: () => (/* binding */ StringUtils)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * @hidden\r\n */ class StringUtils {\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */ static isEmptyObj(strObj) {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n    static startsWith(str, search) {\n        return str.indexOf(search) === 0;\n    }\n    static endsWith(str, search) {\n        return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n    }\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */ static queryStringToObject(query) {\n        const obj = {};\n        const params = query.split(\"&\");\n        const decode = (s)=>decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair)=>{\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj;\n    }\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */ static trimArrayEntries(arr) {\n        return arr.map((entry)=>entry.trim());\n    }\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */ static removeEmptyStringsFromArray(arr) {\n        return arr.filter((entry)=>{\n            return !!entry;\n        });\n    }\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */ static jsonParseHelper(str) {\n        try {\n            return JSON.parse(str);\n        } catch (e) {\n            return null;\n        }\n    }\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */ static matchPattern(pattern, input) {\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */ // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n        return regex.test(input);\n    }\n}\n //# sourceMappingURL=StringUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvU3RyaW5nVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Q0FFQyxHQUNELE1BQU1BO0lBQ0Y7OztLQUdDLEdBQ0QsT0FBT0MsV0FBV0MsTUFBTSxFQUFFO1FBQ3RCLElBQUlBLFFBQVE7WUFDUixJQUFJO2dCQUNBLE1BQU1DLE1BQU1DLEtBQUtDLEtBQUssQ0FBQ0g7Z0JBQ3ZCLE9BQU9JLE9BQU9DLElBQUksQ0FBQ0osS0FBS0ssTUFBTSxLQUFLO1lBQ3ZDLEVBQ0EsT0FBT0MsR0FBRyxDQUFFO1FBQ2hCO1FBQ0EsT0FBTztJQUNYO0lBQ0EsT0FBT0MsV0FBV0MsR0FBRyxFQUFFQyxNQUFNLEVBQUU7UUFDM0IsT0FBT0QsSUFBSUUsT0FBTyxDQUFDRCxZQUFZO0lBQ25DO0lBQ0EsT0FBT0UsU0FBU0gsR0FBRyxFQUFFQyxNQUFNLEVBQUU7UUFDekIsT0FBUUQsSUFBSUgsTUFBTSxJQUFJSSxPQUFPSixNQUFNLElBQy9CRyxJQUFJSSxXQUFXLENBQUNILFlBQVlELElBQUlILE1BQU0sR0FBR0ksT0FBT0osTUFBTTtJQUM5RDtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPUSxvQkFBb0JDLEtBQUssRUFBRTtRQUM5QixNQUFNZCxNQUFNLENBQUM7UUFDYixNQUFNZSxTQUFTRCxNQUFNRSxLQUFLLENBQUM7UUFDM0IsTUFBTUMsU0FBUyxDQUFDQyxJQUFNQyxtQkFBbUJELEVBQUVFLE9BQU8sQ0FBQyxPQUFPO1FBQzFETCxPQUFPTSxPQUFPLENBQUMsQ0FBQ0M7WUFDWixJQUFJQSxLQUFLQyxJQUFJLElBQUk7Z0JBQ2IsTUFBTSxDQUFDQyxLQUFLQyxNQUFNLEdBQUdILEtBQUtOLEtBQUssQ0FBQyxVQUFVLElBQUksb0RBQW9EO2dCQUNsRyxJQUFJUSxPQUFPQyxPQUFPO29CQUNkekIsR0FBRyxDQUFDaUIsT0FBT08sS0FBSyxHQUFHUCxPQUFPUTtnQkFDOUI7WUFDSjtRQUNKO1FBQ0EsT0FBT3pCO0lBQ1g7SUFDQTs7OztLQUlDLEdBQ0QsT0FBTzBCLGlCQUFpQkMsR0FBRyxFQUFFO1FBQ3pCLE9BQU9BLElBQUlDLEdBQUcsQ0FBQyxDQUFDQyxRQUFVQSxNQUFNTixJQUFJO0lBQ3hDO0lBQ0E7OztLQUdDLEdBQ0QsT0FBT08sNEJBQTRCSCxHQUFHLEVBQUU7UUFDcEMsT0FBT0EsSUFBSUksTUFBTSxDQUFDLENBQUNGO1lBQ2YsT0FBTyxDQUFDLENBQUNBO1FBQ2I7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE9BQU9HLGdCQUFnQnhCLEdBQUcsRUFBRTtRQUN4QixJQUFJO1lBQ0EsT0FBT1AsS0FBS0MsS0FBSyxDQUFDTTtRQUN0QixFQUNBLE9BQU9GLEdBQUc7WUFDTixPQUFPO1FBQ1g7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPMkIsYUFBYUMsT0FBTyxFQUFFQyxLQUFLLEVBQUU7UUFDaEM7OztTQUdDLEdBQ0QsOERBQThEO1FBQzlELE1BQU1DLFFBQVEsSUFBSUMsT0FBT0gsUUFDcEJkLE9BQU8sQ0FBQyxPQUFPLFFBQ2ZBLE9BQU8sQ0FBQyxPQUFPLFNBQ2ZBLE9BQU8sQ0FBQyxPQUFPO1FBQ3BCLE9BQU9nQixNQUFNRSxJQUFJLENBQUNIO0lBQ3RCO0FBQ0o7QUFFdUIsQ0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2VydGV4Ly4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3V0aWxzL1N0cmluZ1V0aWxzLm1qcz84MTJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAaGlkZGVuXHJcbiAqL1xyXG5jbGFzcyBTdHJpbmdVdGlscyB7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIHN0cmluZ2lmaWVkIG9iamVjdCBpcyBlbXB0eVxyXG4gICAgICogQHBhcmFtIHN0ck9ialxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNFbXB0eU9iaihzdHJPYmopIHtcclxuICAgICAgICBpZiAoc3RyT2JqKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvYmogPSBKU09OLnBhcnNlKHN0ck9iaik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzdGFydHNXaXRoKHN0ciwgc2VhcmNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCkgPT09IDA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZW5kc1dpdGgoc3RyLCBzZWFyY2gpIHtcclxuICAgICAgICByZXR1cm4gKHN0ci5sZW5ndGggPj0gc2VhcmNoLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICBzdHIubGFzdEluZGV4T2Yoc2VhcmNoKSA9PT0gc3RyLmxlbmd0aCAtIHNlYXJjaC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZXMgc3RyaW5nIGludG8gYW4gb2JqZWN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBxdWVyeVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcXVlcnlTdHJpbmdUb09iamVjdChxdWVyeSkge1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHF1ZXJ5LnNwbGl0KFwiJlwiKTtcclxuICAgICAgICBjb25zdCBkZWNvZGUgPSAocykgPT4gZGVjb2RlVVJJQ29tcG9uZW50KHMucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XHJcbiAgICAgICAgcGFyYW1zLmZvckVhY2goKHBhaXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBhaXIudHJpbSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBwYWlyLnNwbGl0KC89KC4rKS9nLCAyKTsgLy8gU3BsaXQgb24gdGhlIGZpcnN0IG9jY3VyZW5jZSBvZiB0aGUgJz0nIGNoYXJhY3RlclxyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAmJiB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ialtkZWNvZGUoa2V5KV0gPSBkZWNvZGUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJpbXMgZW50cmllcyBpbiBhbiBhcnJheS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYXJyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB0cmltQXJyYXlFbnRyaWVzKGFycikge1xyXG4gICAgICAgIHJldHVybiBhcnIubWFwKChlbnRyeSkgPT4gZW50cnkudHJpbSgpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBlbXB0eSBzdHJpbmdzIGZyb20gYXJyYXlcclxuICAgICAqIEBwYXJhbSBhcnJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHJlbW92ZUVtcHR5U3RyaW5nc0Zyb21BcnJheShhcnIpIHtcclxuICAgICAgICByZXR1cm4gYXJyLmZpbHRlcigoZW50cnkpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICEhZW50cnk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEF0dGVtcHRzIHRvIHBhcnNlIGEgc3RyaW5nIGludG8gSlNPTlxyXG4gICAgICogQHBhcmFtIHN0clxyXG4gICAgICovXHJcbiAgICBzdGF0aWMganNvblBhcnNlSGVscGVyKHN0cikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgaWYgYSBnaXZlbiBzdHJpbmcgbWF0Y2hlcyBhIGdpdmVuIHBhdHRlcm4sIHdpdGggc3VwcG9ydCBmb3Igd2lsZGNhcmRzIGFuZCBxdWVyaWVzLlxyXG4gICAgICogQHBhcmFtIHBhdHRlcm4gV2lsZGNhcmQgcGF0dGVybiB0byBzdHJpbmcgbWF0Y2guIFN1cHBvcnRzIFwiKlwiIGZvciB3aWxkY2FyZHMgYW5kIFwiP1wiIGZvciBxdWVyaWVzXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgU3RyaW5nIHRvIG1hdGNoIGFnYWluc3RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIG1hdGNoUGF0dGVybihwYXR0ZXJuLCBpbnB1dCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdpbGRjYXJkIHN1cHBvcnQ6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMTE3MjQ4LzQ4ODg1NTlcclxuICAgICAgICAgKiBRdWVyaWVzOiByZXBsYWNlcyBcIj9cIiBpbiBzdHJpbmcgd2l0aCBlc2NhcGVkIFwiXFw/XCIgZm9yIHJlZ2V4IHRlc3RcclxuICAgICAgICAgKi9cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc2VjdXJpdHkvZGV0ZWN0LW5vbi1saXRlcmFsLXJlZ2V4cFxyXG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcKi9nLCBcIlteIF0qXCIpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXD8vZywgXCJcXFxcP1wiKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QoaW5wdXQpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFN0cmluZ1V0aWxzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdHJpbmdVdGlscy5tanMubWFwXG4iXSwibmFtZXMiOlsiU3RyaW5nVXRpbHMiLCJpc0VtcHR5T2JqIiwic3RyT2JqIiwib2JqIiwiSlNPTiIsInBhcnNlIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImUiLCJzdGFydHNXaXRoIiwic3RyIiwic2VhcmNoIiwiaW5kZXhPZiIsImVuZHNXaXRoIiwibGFzdEluZGV4T2YiLCJxdWVyeVN0cmluZ1RvT2JqZWN0IiwicXVlcnkiLCJwYXJhbXMiLCJzcGxpdCIsImRlY29kZSIsInMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiZm9yRWFjaCIsInBhaXIiLCJ0cmltIiwia2V5IiwidmFsdWUiLCJ0cmltQXJyYXlFbnRyaWVzIiwiYXJyIiwibWFwIiwiZW50cnkiLCJyZW1vdmVFbXB0eVN0cmluZ3NGcm9tQXJyYXkiLCJmaWx0ZXIiLCJqc29uUGFyc2VIZWxwZXIiLCJtYXRjaFBhdHRlcm4iLCJwYXR0ZXJuIiwiaW5wdXQiLCJyZWdleCIsIlJlZ0V4cCIsInRlc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   isTokenExpired: () => (/* binding */ isTokenExpired),\n/* harmony export */   nowSeconds: () => (/* binding */ nowSeconds),\n/* harmony export */   wasClockTurnedBack: () => (/* binding */ wasClockTurnedBack)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Utility functions for managing date and time operations.\r\n */ /**\r\n * return the current time in Unix time (seconds).\r\n */ function nowSeconds() {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n}\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */ function isTokenExpired(expiresOn, offset) {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = nowSeconds() + offset;\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n}\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */ function wasClockTurnedBack(cachedAt) {\n    const cachedAtSec = Number(cachedAt);\n    return cachedAtSec > nowSeconds();\n}\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */ function delay(t, value) {\n    return new Promise((resolve)=>setTimeout(()=>resolve(value), t));\n}\n //# sourceMappingURL=TimeUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvVGltZVV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRDs7Q0FFQyxHQUNELFNBQVNBO0lBQ0wsMENBQTBDO0lBQzFDLE9BQU9DLEtBQUtDLEtBQUssQ0FBQyxJQUFJQyxPQUFPQyxPQUFPLEtBQUs7QUFDN0M7QUFDQTs7O0NBR0MsR0FDRCxTQUFTQyxlQUFlQyxTQUFTLEVBQUVDLE1BQU07SUFDckMsZ0NBQWdDO0lBQ2hDLE1BQU1DLGdCQUFnQkMsT0FBT0gsY0FBYztJQUMzQyxNQUFNSSx1QkFBdUJWLGVBQWVPO0lBQzVDLHlGQUF5RjtJQUN6RixPQUFPRyx1QkFBdUJGO0FBQ2xDO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTRyxtQkFBbUJDLFFBQVE7SUFDaEMsTUFBTUMsY0FBY0osT0FBT0c7SUFDM0IsT0FBT0MsY0FBY2I7QUFDekI7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU2MsTUFBTUMsQ0FBQyxFQUFFQyxLQUFLO0lBQ25CLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxVQUFZQyxXQUFXLElBQU1ELFFBQVFGLFFBQVFEO0FBQ3JFO0FBRWlFLENBQ2pFLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC91dGlscy9UaW1lVXRpbHMubWpzP2E3NzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFV0aWxpdHkgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBkYXRlIGFuZCB0aW1lIG9wZXJhdGlvbnMuXHJcbiAqL1xyXG4vKipcclxuICogcmV0dXJuIHRoZSBjdXJyZW50IHRpbWUgaW4gVW5peCB0aW1lIChzZWNvbmRzKS5cclxuICovXHJcbmZ1bmN0aW9uIG5vd1NlY29uZHMoKSB7XHJcbiAgICAvLyBEYXRlLmdldFRpbWUoKSByZXR1cm5zIGluIG1pbGxpc2Vjb25kcy5cclxuICAgIHJldHVybiBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMC4wKTtcclxufVxyXG4vKipcclxuICogY2hlY2sgaWYgYSB0b2tlbiBpcyBleHBpcmVkIGJhc2VkIG9uIGdpdmVuIFVUQyB0aW1lIGluIHNlY29uZHMuXHJcbiAqIEBwYXJhbSBleHBpcmVzT25cclxuICovXHJcbmZ1bmN0aW9uIGlzVG9rZW5FeHBpcmVkKGV4cGlyZXNPbiwgb2Zmc2V0KSB7XHJcbiAgICAvLyBjaGVjayBmb3IgYWNjZXNzIHRva2VuIGV4cGlyeVxyXG4gICAgY29uc3QgZXhwaXJhdGlvblNlYyA9IE51bWJlcihleHBpcmVzT24pIHx8IDA7XHJcbiAgICBjb25zdCBvZmZzZXRDdXJyZW50VGltZVNlYyA9IG5vd1NlY29uZHMoKSArIG9mZnNldDtcclxuICAgIC8vIElmIGN1cnJlbnQgdGltZSArIG9mZnNldCBpcyBncmVhdGVyIHRoYW4gdG9rZW4gZXhwaXJhdGlvbiB0aW1lLCB0aGVuIHRva2VuIGlzIGV4cGlyZWQuXHJcbiAgICByZXR1cm4gb2Zmc2V0Q3VycmVudFRpbWVTZWMgPiBleHBpcmF0aW9uU2VjO1xyXG59XHJcbi8qKlxyXG4gKiBJZiB0aGUgY3VycmVudCB0aW1lIGlzIGVhcmxpZXIgdGhhbiB0aGUgdGltZSB0aGF0IGEgdG9rZW4gd2FzIGNhY2hlZCBhdCwgd2UgbXVzdCBkaXNjYXJkIHRoZSB0b2tlblxyXG4gKiBpLmUuIFRoZSBzeXN0ZW0gY2xvY2sgd2FzIHR1cm5lZCBiYWNrIGFmdGVyIGFjcXVpcmluZyB0aGUgY2FjaGVkIHRva2VuXHJcbiAqIEBwYXJhbSBjYWNoZWRBdFxyXG4gKiBAcGFyYW0gb2Zmc2V0XHJcbiAqL1xyXG5mdW5jdGlvbiB3YXNDbG9ja1R1cm5lZEJhY2soY2FjaGVkQXQpIHtcclxuICAgIGNvbnN0IGNhY2hlZEF0U2VjID0gTnVtYmVyKGNhY2hlZEF0KTtcclxuICAgIHJldHVybiBjYWNoZWRBdFNlYyA+IG5vd1NlY29uZHMoKTtcclxufVxyXG4vKipcclxuICogV2FpdHMgZm9yIHQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kc1xyXG4gKiBAcGFyYW0gdCBudW1iZXJcclxuICogQHBhcmFtIHZhbHVlIFRcclxuICovXHJcbmZ1bmN0aW9uIGRlbGF5KHQsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh2YWx1ZSksIHQpKTtcclxufVxuXG5leHBvcnQgeyBkZWxheSwgaXNUb2tlbkV4cGlyZWQsIG5vd1NlY29uZHMsIHdhc0Nsb2NrVHVybmVkQmFjayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGltZVV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJub3dTZWNvbmRzIiwiTWF0aCIsInJvdW5kIiwiRGF0ZSIsImdldFRpbWUiLCJpc1Rva2VuRXhwaXJlZCIsImV4cGlyZXNPbiIsIm9mZnNldCIsImV4cGlyYXRpb25TZWMiLCJOdW1iZXIiLCJvZmZzZXRDdXJyZW50VGltZVNlYyIsIndhc0Nsb2NrVHVybmVkQmFjayIsImNhY2hlZEF0IiwiY2FjaGVkQXRTZWMiLCJkZWxheSIsInQiLCJ2YWx1ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDeserializedResponse: () => (/* binding */ getDeserializedResponse),\n/* harmony export */   stripLeadingHashOrQuery: () => (/* binding */ stripLeadingHashOrQuery)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(ssr)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */ function stripLeadingHashOrQuery(responseString) {\n    if (responseString.startsWith(\"#/\")) {\n        return responseString.substring(2);\n    } else if (responseString.startsWith(\"#\") || responseString.startsWith(\"?\")) {\n        return responseString.substring(1);\n    }\n    return responseString;\n}\n/**\r\n * Returns URL hash as server auth code response object.\r\n */ function getDeserializedResponse(responseString) {\n    // Check if given hash is empty\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\n        return null;\n    }\n    try {\n        // Strip the # or ? symbol if present\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\n        // Check for known response properties\n        if (deserializedHash.code || deserializedHash.error || deserializedHash.error_description || deserializedHash.state) {\n            return deserializedHash;\n        }\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.hashNotDeserialized);\n    }\n    return null;\n}\n //# sourceMappingURL=UrlUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvVXJsVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDcUU7QUFDRztBQUV4RTs7O0NBR0MsR0FDRDs7O0NBR0MsR0FDRCxTQUFTRSx3QkFBd0JDLGNBQWM7SUFDM0MsSUFBSUEsZUFBZUMsVUFBVSxDQUFDLE9BQU87UUFDakMsT0FBT0QsZUFBZUUsU0FBUyxDQUFDO0lBQ3BDLE9BQ0ssSUFBSUYsZUFBZUMsVUFBVSxDQUFDLFFBQy9CRCxlQUFlQyxVQUFVLENBQUMsTUFBTTtRQUNoQyxPQUFPRCxlQUFlRSxTQUFTLENBQUM7SUFDcEM7SUFDQSxPQUFPRjtBQUNYO0FBQ0E7O0NBRUMsR0FDRCxTQUFTRyx3QkFBd0JILGNBQWM7SUFDM0MsK0JBQStCO0lBQy9CLElBQUksQ0FBQ0Esa0JBQWtCQSxlQUFlSSxPQUFPLENBQUMsT0FBTyxHQUFHO1FBQ3BELE9BQU87SUFDWDtJQUNBLElBQUk7UUFDQSxxQ0FBcUM7UUFDckMsTUFBTUMscUJBQXFCTix3QkFBd0JDO1FBQ25ELDJGQUEyRjtRQUMzRixNQUFNTSxtQkFBbUJDLE9BQU9DLFdBQVcsQ0FBQyxJQUFJQyxnQkFBZ0JKO1FBQ2hFLHNDQUFzQztRQUN0QyxJQUFJQyxpQkFBaUJJLElBQUksSUFDckJKLGlCQUFpQkssS0FBSyxJQUN0QkwsaUJBQWlCTSxpQkFBaUIsSUFDbENOLGlCQUFpQk8sS0FBSyxFQUFFO1lBQ3hCLE9BQU9QO1FBQ1g7SUFDSixFQUNBLE9BQU9RLEdBQUc7UUFDTixNQUFNakIsaUZBQXFCQSxDQUFDQyxnRkFBbUJBO0lBQ25EO0lBQ0EsT0FBTztBQUNYO0FBRTRELENBQzVELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NlcnRleC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC91dGlscy9VcmxVdGlscy5tanM/OGIzMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudEF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgaGFzaE5vdERlc2VyaWFsaXplZCB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUGFyc2VzIGhhc2ggc3RyaW5nIGZyb20gZ2l2ZW4gc3RyaW5nLiBSZXR1cm5zIGVtcHR5IHN0cmluZyBpZiBubyBoYXNoIHN5bWJvbCBpcyBmb3VuZC5cclxuICogQHBhcmFtIGhhc2hTdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ0hhc2hPclF1ZXJ5KHJlc3BvbnNlU3RyaW5nKSB7XHJcbiAgICBpZiAocmVzcG9uc2VTdHJpbmcuc3RhcnRzV2l0aChcIiMvXCIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlU3RyaW5nLnN1YnN0cmluZygyKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHJlc3BvbnNlU3RyaW5nLnN0YXJ0c1dpdGgoXCIjXCIpIHx8XHJcbiAgICAgICAgcmVzcG9uc2VTdHJpbmcuc3RhcnRzV2l0aChcIj9cIikpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2VTdHJpbmcuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3BvbnNlU3RyaW5nO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIFVSTCBoYXNoIGFzIHNlcnZlciBhdXRoIGNvZGUgcmVzcG9uc2Ugb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0RGVzZXJpYWxpemVkUmVzcG9uc2UocmVzcG9uc2VTdHJpbmcpIHtcclxuICAgIC8vIENoZWNrIGlmIGdpdmVuIGhhc2ggaXMgZW1wdHlcclxuICAgIGlmICghcmVzcG9uc2VTdHJpbmcgfHwgcmVzcG9uc2VTdHJpbmcuaW5kZXhPZihcIj1cIikgPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIFN0cmlwIHRoZSAjIG9yID8gc3ltYm9sIGlmIHByZXNlbnRcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkUmVzcG9uc2UgPSBzdHJpcExlYWRpbmdIYXNoT3JRdWVyeShyZXNwb25zZVN0cmluZyk7XHJcbiAgICAgICAgLy8gSWYgIyBzeW1ib2wgd2FzIG5vdCBwcmVzZW50LCBhYm92ZSB3aWxsIHJldHVybiBlbXB0eSBzdHJpbmcsIHNvIGdpdmUgb3JpZ2luYWwgaGFzaCB2YWx1ZVxyXG4gICAgICAgIGNvbnN0IGRlc2VyaWFsaXplZEhhc2ggPSBPYmplY3QuZnJvbUVudHJpZXMobmV3IFVSTFNlYXJjaFBhcmFtcyhub3JtYWxpemVkUmVzcG9uc2UpKTtcclxuICAgICAgICAvLyBDaGVjayBmb3Iga25vd24gcmVzcG9uc2UgcHJvcGVydGllc1xyXG4gICAgICAgIGlmIChkZXNlcmlhbGl6ZWRIYXNoLmNvZGUgfHxcclxuICAgICAgICAgICAgZGVzZXJpYWxpemVkSGFzaC5lcnJvciB8fFxyXG4gICAgICAgICAgICBkZXNlcmlhbGl6ZWRIYXNoLmVycm9yX2Rlc2NyaXB0aW9uIHx8XHJcbiAgICAgICAgICAgIGRlc2VyaWFsaXplZEhhc2guc3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplZEhhc2g7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoaGFzaE5vdERlc2VyaWFsaXplZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxuXG5leHBvcnQgeyBnZXREZXNlcmlhbGl6ZWRSZXNwb25zZSwgc3RyaXBMZWFkaW5nSGFzaE9yUXVlcnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVybFV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJoYXNoTm90RGVzZXJpYWxpemVkIiwic3RyaXBMZWFkaW5nSGFzaE9yUXVlcnkiLCJyZXNwb25zZVN0cmluZyIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJnZXREZXNlcmlhbGl6ZWRSZXNwb25zZSIsImluZGV4T2YiLCJub3JtYWxpemVkUmVzcG9uc2UiLCJkZXNlcmlhbGl6ZWRIYXNoIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJjb2RlIiwiZXJyb3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsInN0YXRlIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\n");

/***/ })

};
;